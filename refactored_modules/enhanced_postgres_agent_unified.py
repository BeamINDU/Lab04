# refactored_modules/enhanced_postgres_agent_unified.py
# üîß ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à HVAC Service & Spare Parts

import os
import time
import re
import json
import asyncio
import aiohttp
import psycopg2
from decimal import Decimal
from datetime import datetime, date
from typing import Dict, Any, Optional, List, Tuple, AsyncGenerator
import logging
from .intelligent_schema_discovery import EnhancedSchemaIntegration
# Import configs only
from .tenant_config import TenantConfigManager, TenantConfig

# Configure logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class UnifiedEnhancedPostgresOllamaAgent:
    """ü§ñ Enhanced PostgreSQL Agent ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à HVAC Service & Spare Parts"""
    
    def __init__(self):
        """üèóÔ∏è Initialize unified agent ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö HVAC"""
        
        # üîß Configuration
        self.config_manager = TenantConfigManager()
        self.tenant_configs = self.config_manager.tenant_configs
        
        # üåê Ollama Configuration
        self.ollama_base_url = os.getenv('OLLAMA_BASE_URL', 'http://52.74.36.160:12434')
        self.request_timeout = int(os.getenv('AI_REQUEST_TIMEOUT', '90'))
        self.max_retries = int(os.getenv('AI_MAX_RETRIES', '3'))
        
        # üÜï AI Response Configuration
        self.enable_ai_responses = os.getenv('ENABLE_AI_RESPONSES', 'true').lower() == 'true'
        self.ai_response_temperature = float(os.getenv('AI_RESPONSE_TEMPERATURE', '0.3'))
        self.fallback_to_hardcode = os.getenv('FALLBACK_TO_HARDCODE', 'true').lower() == 'true'
        
        # üìä Performance tracking
        self.stats = {
            'total_queries': 0,
            'hvac_queries': 0,
            'customer_queries': 0,
            'spare_parts_queries': 0,
            'service_queries': 0,
            'successful_queries': 0,
            'failed_queries': 0,
            'ai_responses_used': 0,
            'hardcode_responses_used': 0,
            'avg_response_time': 0.0
        }
        
        # üß† Schema cache
        self.schema_cache = {}
        self.cache_ttl = 3600  # 1 hour
        
        # üéØ HVAC Intent detection keywords
        self.hvac_indicators = {
            'customer_queries': ['‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤', 'customer', '‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó', '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô', 'count', '‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥', 'history'],
            'spare_parts_queries': ['‡∏≠‡∏∞‡πÑ‡∏´‡∏•‡πà', 'spare', 'part', '‡∏£‡∏≤‡∏Ñ‡∏≤', 'price', '‡∏™‡∏ï‡πá‡∏≠‡∏Å', 'stock', '‡∏Ñ‡∏•‡∏±‡∏á'],
            'service_queries': ['‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£', 'service', '‡∏ã‡πà‡∏≠‡∏°', 'repair', '‡∏ö‡∏≥‡∏£‡∏∏‡∏á', 'maintenance', 'pm', 'overhaul'],
            'work_schedule_queries': ['‡πÅ‡∏ú‡∏ô‡∏á‡∏≤‡∏ô', 'schedule', '‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà', 'date', '‡∏ó‡∏µ‡∏°', 'team', '‡∏ä‡πà‡∏≤‡∏á', 'tempnician'],
            'sales_analysis': ['‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢', 'sales', '‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå', 'analysis', '‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô', 'report', '‡∏™‡∏£‡∏∏‡∏õ', 'summary']
        }
        
        self.conversational_indicators = {
            'greetings': ['‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ', 'hello', 'hi', '‡∏ä‡πà‡∏ß‡∏¢', 'help'],
            'general_info': ['‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠‡πÉ‡∏Ñ‡∏£', '‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö', 'about', 'what are you'],
            'capabilities': ['‡∏ó‡∏≥‡∏≠‡∏∞‡πÑ‡∏£‡πÑ‡∏î‡πâ', '‡∏ä‡πà‡∏ß‡∏¢‡∏≠‡∏∞‡πÑ‡∏£', 'what can you do']
        }
        
        # HVAC Business Knowledge (‡πÅ‡∏ó‡∏ô metadata ‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•)
        self.hvac_business_knowledge = {
            'table_info': {
                'sales2024': '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏á‡∏≤‡∏ô‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏õ‡∏µ 2024',
                'sales2023': '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏á‡∏≤‡∏ô‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏õ‡∏µ 2023',
                'sales2022': '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏á‡∏≤‡∏ô‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏õ‡∏µ 2022',
                'sales2025': '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏á‡∏≤‡∏ô‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏õ‡∏µ 2025',
                'spare_part': '‡∏Ñ‡∏•‡∏±‡∏á‡∏≠‡∏∞‡πÑ‡∏´‡∏•‡πà‡∏´‡∏•‡∏±‡∏Å',
                'spare_part2': '‡∏Ñ‡∏•‡∏±‡∏á‡∏≠‡∏∞‡πÑ‡∏´‡∏•‡πà‡∏™‡∏≥‡∏£‡∏≠‡∏á',
                'work_force': '‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏ó‡∏µ‡∏°‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡∏∞‡πÅ‡∏ú‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô'
            },
            'technical_terms': {
                'PM': 'Preventive Maintenance',
                'Chiller': '‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ó‡∏≥‡∏ô‡πâ‡∏≥‡πÄ‡∏¢‡πá‡∏ô',
                'Compressor': '‡∏Ñ‡∏≠‡∏°‡πÄ‡∏û‡∏£‡∏™‡πÄ‡∏ã‡∏≠‡∏£‡πå',
                'Overhaul': '‡∏Å‡∏≤‡∏£‡∏¢‡∏Å‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á',
                'Air Cooled': '‡∏£‡∏∞‡∏ö‡∏≤‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡πâ‡∏≠‡∏ô‡∏î‡πâ‡∏ß‡∏¢‡∏≠‡∏≤‡∏Å‡∏≤‡∏®',
                'Water Cooled': '‡∏£‡∏∞‡∏ö‡∏≤‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡πâ‡∏≠‡∏ô‡∏î‡πâ‡∏ß‡∏¢‡∏ô‡πâ‡∏≥'
            },
            'brands': ['Hitachi', 'Daikin', 'EuroKlimat', 'Toyota', 'Mitsubishi', 'York', 'Carrier']
        }
        
        try:
            from .intelligent_schema_discovery import EnhancedSchemaIntegration
            self.schema_integration = EnhancedSchemaIntegration(
                database_handler=self,  # ‡∏™‡πà‡∏á self ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏°‡∏µ method get_database_connection
                tenant_configs=self.tenant_configs
            )
            self.intelligent_schema_available = True
            logger.info("üß† HVAC Intelligent Schema Discovery integrated successfully")
        except Exception as e:
            logger.error(f"‚ùå Failed to initialize HVAC Intelligent Schema Discovery: {e}")
            self.schema_integration = None
            self.intelligent_schema_available = False
            logger.warning("‚ö†Ô∏è Falling back to basic HVAC schema discovery")
        
        logger.info("ü§ñ HVAC Enhanced PostgreSQL Agent initialized")
        logger.info(f"üåê Ollama: {self.ollama_base_url}")
        logger.info(f"üé® AI Responses: {'Enabled' if self.enable_ai_responses else 'Disabled'}")
        logger.info(f"üè¢ Tenants: {list(self.tenant_configs.keys())}")
    
    # ========================================================================
    # üéØ MAIN ENTRY POINT
    # ========================================================================
    
    async def process_enhanced_question(self, question: str, tenant_id: str) -> Dict[str, Any]:
        """üéØ MAIN: Process questions ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à HVAC"""
        
        if tenant_id not in self.tenant_configs:
            return self._create_error_response(f"Unknown tenant: {tenant_id}", tenant_id)
        
        start_time = time.time()
        self.stats['total_queries'] += 1
        
        try:
            logger.info(f"üéØ Processing HVAC question for {tenant_id}: {question[:100]}...")
            
            # ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå intent ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à HVAC
            intent_result = self._detect_hvac_intent(question)
            logger.info(f"üîç HVAC Intent detected: {intent_result}")
            
            # ‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏™‡∏ô‡∏≠‡∏á
            if intent_result['is_conversational']:
                self.stats['conversational_queries'] += 1
                response = await self._handle_hvac_conversational_query(question, tenant_id, intent_result)
            else:
                # ‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
                response = await self._handle_hvac_data_query(question, tenant_id, intent_result)
            
            # Update statistics
            processing_time = time.time() - start_time
            self._update_stats(tenant_id, True, processing_time)
            
            return response
            
        except Exception as e:
            logger.error(f"‚ùå HVAC Enhanced question processing failed: {e}")
            processing_time = time.time() - start_time
            self._update_stats(tenant_id, False, processing_time)
            return self._create_error_response(str(e), tenant_id)
    
    def _detect_hvac_intent(self, question: str) -> Dict[str, Any]:
        """üîç ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå intent ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à HVAC"""
        
        question_lower = question.lower()
        
        intent_result = {
            'is_conversational': False,
            'hvac_category': 'general',
            'confidence': 0.0,
            'keywords_found': [],
            'requires_database': True,
            'suggested_tables': []
        }
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏™‡∏ô‡∏ó‡∏ô‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        conversational_score = 0
        for category, keywords in self.conversational_indicators.items():
            for keyword in keywords:
                if keyword in question_lower:
                    conversational_score += 1
                    intent_result['keywords_found'].append(keyword)
        
        if conversational_score > 0:
            intent_result['is_conversational'] = True
            intent_result['requires_database'] = False
            return intent_result
        
        # ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏° HVAC
        max_score = 0
        best_category = 'general'
        
        for category, keywords in self.hvac_indicators.items():
            score = 0
            category_keywords = []
            
            for keyword in keywords:
                if keyword in question_lower:
                    score += 1
                    category_keywords.append(keyword)
            
            if score > max_score:
                max_score = score
                best_category = category
                intent_result['keywords_found'] = category_keywords
        
        intent_result['hvac_category'] = best_category
        intent_result['confidence'] = min(max_score / 3.0, 1.0)  # normalize to 0-1
        
        # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏ó‡∏µ‡πà‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥
        table_mapping = {
            'customer_queries': ['sales2024', 'sales2023', 'sales2022'],
            'spare_parts_queries': ['spare_part', 'spare_part2'],
            'service_queries': ['sales2024', 'work_force'],
            'work_schedule_queries': ['work_force'],
            'sales_analysis': ['sales2024', 'sales2023', 'sales2022']
        }
        
        intent_result['suggested_tables'] = table_mapping.get(best_category, ['sales2024'])
        
        return intent_result
    
    async def _handle_hvac_conversational_query(self, question: str, tenant_id: str, 
                                              intent_result: Dict[str, Any]) -> Dict[str, Any]:
        """üí¨ ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏™‡∏ô‡∏ó‡∏ô‡∏≤‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö HVAC"""
        
        config = self.tenant_configs[tenant_id]
        business_emoji = self._get_hvac_business_emoji(tenant_id)
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏™‡∏ô‡∏ó‡∏ô‡∏≤‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à HVAC
        if any(word in question.lower() for word in ['‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ', 'hello', 'hi']):
            answer = self._create_hvac_greeting_response(config, business_emoji)
        elif any(word in question.lower() for word in ['‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠‡πÉ‡∏Ñ‡∏£', 'what are you']):
            answer = self._create_hvac_identity_response(config, business_emoji)
        elif any(word in question.lower() for word in ['‡∏ä‡πà‡∏ß‡∏¢‡∏≠‡∏∞‡πÑ‡∏£', 'what can you do']):
            answer = self._create_hvac_capabilities_response(config, business_emoji)
        else:
            answer = self._create_hvac_general_response(question, config, business_emoji)
        
        return {
            "answer": answer,
            "success": True,
            "data_source_used": f"hvac_conversational_{config.model_name}",
            "sql_query": None,
            "tenant_id": tenant_id,
            "system_used": "hvac_conversational_ai",
            "intent_detected": intent_result
        }
    
    async def _handle_hvac_data_query(self, question: str, tenant_id: str, 
                                    intent_result: Dict[str, Any]) -> Dict[str, Any]:
        """üìä ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö HVAC"""
        
        try:
            # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°
            category = intent_result['hvac_category']
            if category in self.stats:
                self.stats[category] += 1
            
            # ‡πÉ‡∏ä‡πâ Intelligent Schema Discovery ‡∏´‡∏≤‡∏Å‡∏°‡∏µ
            if self.intelligent_schema_available and self.schema_integration:
                sql_prompt = await self.schema_integration.generate_intelligent_sql_prompt(question, tenant_id)
            else:
                # ‡πÉ‡∏ä‡πâ fallback prompt ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö HVAC
                sql_prompt = self._generate_hvac_fallback_prompt(question, tenant_id, intent_result)
            
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á SQL ‡∏à‡∏≤‡∏Å AI
            ai_response = await self._call_ollama_api(sql_prompt, tenant_id)
            
            # ‡∏î‡∏∂‡∏á SQL query ‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏™‡∏ô‡∏≠‡∏á‡∏Ç‡∏≠‡∏á AI
            sql_query = self._extract_sql_unified(ai_response, question)
            
            if not sql_query:
                return self._create_sql_error_response(question, tenant_id, "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á SQL query ‡πÑ‡∏î‡πâ")
            
            # Execute SQL
            results = await self._execute_sql_unified(sql_query, tenant_id)
            
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à HVAC
            if self.enable_ai_responses and results:
                answer = await self._generate_hvac_ai_response(question, results, tenant_id, intent_result)
                self.stats['ai_responses_used'] += 1
            else:
                answer = self._format_hvac_results(question, results, tenant_id, intent_result)
                self.stats['hardcode_responses_used'] += 1
            
            return {
                "answer": answer,
                "success": True,
                "data_source_used": f"hvac_database_{self.tenant_configs[tenant_id].model_name}",
                "sql_query": sql_query,
                "results_count": len(results),
                "tenant_id": tenant_id,
                "system_used": "hvac_intelligent_agent",
                "intent_detected": intent_result
            }
            
        except Exception as e:
            logger.error(f"‚ùå HVAC data query failed: {e}")
            return self._create_sql_error_response(question, tenant_id, str(e))
    
    # ========================================================================
    # üé® HVAC RESPONSE FORMATTING
    # ========================================================================
    
    def _create_hvac_greeting_response(self, config: TenantConfig, business_emoji: str) -> str:
        return f"""‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡∏£‡∏±‡∏ö! {business_emoji} ‡∏ú‡∏°‡∏Ñ‡∏∑‡∏≠ AI Assistant ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏∞‡∏ö‡∏ö HVAC Service & Spare Parts ‡∏Ç‡∏≠‡∏á {config.name}

üîß ‡∏ú‡∏°‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ä‡πà‡∏ß‡∏¢‡∏Ñ‡∏∏‡∏ì:
‚Ä¢ ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£
‚Ä¢ ‡∏™‡∏∑‡∏ö‡∏Ñ‡πâ‡∏ô‡∏£‡∏≤‡∏Ñ‡∏≤‡πÅ‡∏•‡∏∞‡∏™‡∏ï‡πá‡∏≠‡∏Å‡∏≠‡∏∞‡πÑ‡∏´‡∏•‡πà
‚Ä¢ ‡∏î‡∏π‡πÅ‡∏ú‡∏ô‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏ó‡∏µ‡∏°
‚Ä¢ ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡πÅ‡∏•‡∏∞‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô

üí° ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°:
- "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"
- "‡∏£‡∏≤‡∏Ñ‡∏≤‡∏≠‡∏∞‡πÑ‡∏´‡∏•‡πà Hitachi chiller"
- "‡πÅ‡∏ú‡∏ô‡∏á‡∏≤‡∏ô‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà 15/06/2568"
- "‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢ overhaul ‡∏õ‡∏µ 2567"

‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏≠‡∏ö‡∏ñ‡∏≤‡∏°‡∏≠‡∏∞‡πÑ‡∏£‡∏Ñ‡∏£‡∏±‡∏ö?"""
    
    def _create_hvac_identity_response(self, config: TenantConfig, business_emoji: str) -> str:
        return f"""{business_emoji} ‡∏ú‡∏°‡∏Ñ‡∏∑‡∏≠ AI Assistant ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à HVAC Service & Spare Parts

üè¢ ‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó: {config.name}
üîß ‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à: ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏ã‡πà‡∏≠‡∏°‡∏ö‡∏≥‡∏£‡∏∏‡∏á‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏¢‡πá‡∏ô‡πÅ‡∏•‡∏∞‡∏à‡∏≥‡∏´‡∏ô‡πà‡∏≤‡∏¢‡∏≠‡∏∞‡πÑ‡∏´‡∏•‡πà
üõ†Ô∏è ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏´‡∏•‡∏±‡∏Å: PM (Preventive Maintenance), ‡∏ã‡πà‡∏≠‡∏°‡πÅ‡∏ã‡∏°, ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ä‡∏¥‡πâ‡∏ô‡∏™‡πà‡∏ß‡∏ô, Overhaul
üè∑Ô∏è ‡πÅ‡∏ö‡∏£‡∏ô‡∏î‡πå‡∏ó‡∏µ‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö: Hitachi, Daikin, EuroKlimat, Toyota, Mitsubishi

üí° ‡∏ú‡∏°‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ä‡πà‡∏ß‡∏¢‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡∏∞‡∏ï‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö:
‚Ä¢ ‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£
‚Ä¢ ‡∏≠‡∏∞‡πÑ‡∏´‡∏•‡πà‡πÅ‡∏•‡∏∞‡∏£‡∏≤‡∏Ñ‡∏≤  
‚Ä¢ ‡πÅ‡∏ú‡∏ô‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡∏∞‡∏ó‡∏µ‡∏°‡∏ä‡πà‡∏≤‡∏á
‚Ä¢ ‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡πÅ‡∏•‡∏∞‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô"""
    
    def _create_hvac_capabilities_response(self, config: TenantConfig, business_emoji: str) -> str:
        return f"""{business_emoji} ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Ç‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏ö HVAC AI Assistant

üîç ‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÅ‡∏•‡∏∞‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå:
‚Ä¢ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤: "‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó ABC ‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏≠‡∏∞‡πÑ‡∏£‡∏ö‡πâ‡∏≤‡∏á"
‚Ä¢ ‡∏≠‡∏∞‡πÑ‡∏´‡∏•‡πà‡πÅ‡∏•‡∏∞‡∏£‡∏≤‡∏Ñ‡∏≤: "‡∏£‡∏≤‡∏Ñ‡∏≤‡∏≠‡∏∞‡πÑ‡∏´‡∏•‡πà Compressor Hitachi"
‚Ä¢ ‡πÅ‡∏ú‡∏ô‡∏á‡∏≤‡∏ô: "‡πÅ‡∏ú‡∏ô‡∏á‡∏≤‡∏ô‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏á‡∏≤‡∏ô‡∏≠‡∏∞‡πÑ‡∏£‡∏ö‡πâ‡∏≤‡∏á"
‚Ä¢ ‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢: "‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡∏õ‡∏µ 2567"

üìä ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡∏∞‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥:
‚Ä¢ ‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤ ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£
‚Ä¢ ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡∏°
‚Ä¢ ‡∏™‡∏£‡∏∏‡∏õ‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡πÅ‡∏•‡∏∞‡∏Å‡∏≥‡πÑ‡∏£
‚Ä¢ ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏™‡∏ï‡πá‡∏≠‡∏Å‡∏≠‡∏∞‡πÑ‡∏´‡∏•‡πà

üõ†Ô∏è ‡πÄ‡∏ó‡∏Ñ‡πÇ‡∏ô‡πÇ‡∏•‡∏¢‡∏µ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ:
‚Ä¢ AI Model: {config.model_name}
‚Ä¢ Database: PostgreSQL HVAC System  
‚Ä¢ Language: {config.language}"""
    
    def _create_hvac_general_response(self, question: str, config: TenantConfig, business_emoji: str) -> str:
        return f"""{business_emoji} ‡∏£‡∏∞‡∏ö‡∏ö HVAC AI ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö {config.name}

‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°: {question}

üí° ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏ó‡∏µ‡πà‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏à‡∏≤‡∏∞‡∏à‡∏á:
üîç ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤: "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î" ‡∏´‡∏£‡∏∑‡∏≠ "‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó [‡∏ä‡∏∑‡πà‡∏≠] ‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏≠‡∏∞‡πÑ‡∏£‡∏ö‡πâ‡∏≤‡∏á"
üîß ‡∏≠‡∏∞‡πÑ‡∏´‡∏•‡πà: "‡∏£‡∏≤‡∏Ñ‡∏≤‡∏≠‡∏∞‡πÑ‡∏´‡∏•‡πà [‡∏¢‡∏µ‡πà‡∏´‡πâ‡∏≠] [‡∏£‡∏∏‡πà‡∏ô]" ‡∏´‡∏£‡∏∑‡∏≠ "‡∏™‡∏ï‡πá‡∏≠‡∏Å‡∏≠‡∏∞‡πÑ‡∏´‡∏•‡πà Chiller"
üë∑ ‡πÅ‡∏ú‡∏ô‡∏á‡∏≤‡∏ô: "‡πÅ‡∏ú‡∏ô‡∏á‡∏≤‡∏ô‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà [‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà]" ‡∏´‡∏£‡∏∑‡∏≠ "‡∏ó‡∏µ‡∏°‡∏ä‡πà‡∏≤‡∏á‡∏°‡∏µ‡πÉ‡∏Ñ‡∏£‡∏ö‡πâ‡∏≤‡∏á"
üìä ‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢: "‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡∏õ‡∏µ [‡∏õ‡∏µ]" ‡∏´‡∏£‡∏∑‡∏≠ "‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£ PM"

‡∏•‡∏≠‡∏á‡∏ñ‡∏≤‡∏°‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏ó‡∏µ‡πà‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏à‡∏≤‡∏∞‡∏à‡∏á‡∏°‡∏≤‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô‡∏ô‡∏∞‡∏Ñ‡∏£‡∏±‡∏ö!"""
    
    def _format_hvac_results(self, question: str, results: List[Dict], tenant_id: str, 
                           intent_result: Dict[str, Any]) -> str:
        """üé® ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö HVAC"""
        
        if not results:
            return f"‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°: {question}"
        
        config = self.tenant_configs[tenant_id]
        business_emoji = self._get_hvac_business_emoji(tenant_id)
        category = intent_result.get('hvac_category', 'general')
        
        response = f"{business_emoji} ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏£‡∏∞‡∏ö‡∏ö HVAC - {config.name}\n\n"
        
        # ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏° HVAC
        if category == 'customer_queries':
            response += self._format_hvac_customer_results(results)
        elif category == 'spare_parts_queries':
            response += self._format_hvac_spare_parts_results(results)
        elif category == 'service_queries':
            response += self._format_hvac_service_results(results)
        elif category == 'work_schedule_queries':
            response += self._format_hvac_work_schedule_results(results)
        elif category == 'sales_analysis':
            response += self._format_hvac_sales_analysis_results(results)
        else:
            response += self._format_hvac_general_results(results)
        
        response += f"\n\nüìà ‡∏™‡∏£‡∏∏‡∏õ: ‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• {len(results)} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£"
        return response
    
    def _format_hvac_customer_results(self, results: List[Dict]) -> str:
        """‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤ HVAC"""
        formatted = "üë• ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤ HVAC:\n"
        for i, row in enumerate(results[:10], 1):
            customer = row.get('customer_name', row.get('customer', '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'))
            value = row.get('service_contact_', row.get('value', 0))
            job = row.get('job_no', row.get('description', ''))
            
            formatted += f"{i}. {customer}\n"
            if job:
                formatted += f"   ‡∏á‡∏≤‡∏ô: {job}\n"
            if value and str(value).replace('.', '').isdigit():
                formatted += f"   ‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤: {float(value):,.0f} ‡∏ö‡∏≤‡∏ó\n"
            formatted += "\n"
        return formatted
    
    def _format_hvac_spare_parts_results(self, results: List[Dict]) -> str:
        """‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏≠‡∏∞‡πÑ‡∏´‡∏•‡πà HVAC"""
        formatted = "üîß ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏≠‡∏∞‡πÑ‡∏´‡∏•‡πà HVAC:\n"
        for i, row in enumerate(results[:10], 1):
            code = row.get('product_code', '')
            name = row.get('product_name', '')
            price = row.get('unit_price', '0')
            balance = row.get('balance', 0)
            description = row.get('description', '')
            
            formatted += f"{i}. {code} - {name}\n"
            if price and str(price).replace('.', '').replace(',', '').isdigit():
                formatted += f"   ‡∏£‡∏≤‡∏Ñ‡∏≤: {float(str(price).replace(',', '')):,.0f} ‡∏ö‡∏≤‡∏ó"
                if balance:
                    formatted += f" | ‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠: {balance} ‡∏ä‡∏¥‡πâ‡∏ô"
                formatted += "\n"
            if description:
                formatted += f"   ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î: {description[:80]}...\n"
            formatted += "\n"
        return formatted
    
    def _format_hvac_service_results(self, results: List[Dict]) -> str:
        """‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£ HVAC"""
        formatted = "üõ†Ô∏è ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£ HVAC:\n"
        for i, row in enumerate(results[:10], 1):
            customer = row.get('customer_name', row.get('customer', ''))
            description = row.get('description', row.get('detail', ''))
            job_no = row.get('job_no', '')
            value = row.get('service_contact_', 0)
            
            formatted += f"{i}. {customer}\n"
            if job_no:
                formatted += f"   ‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏á‡∏≤‡∏ô: {job_no}\n"
            if description:
                formatted += f"   ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£: {description[:80]}...\n"
            if value and str(value).replace('.', '').isdigit():
                formatted += f"   ‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤: {float(value):,.0f} ‡∏ö‡∏≤‡∏ó\n"
            formatted += "\n"
        return formatted
    
    def _format_hvac_work_schedule_results(self, results: List[Dict]) -> str:
        """‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÅ‡∏ú‡∏ô‡∏á‡∏≤‡∏ô HVAC"""
        formatted = "üìã ‡πÅ‡∏ú‡∏ô‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡∏° HVAC:\n"
        for i, row in enumerate(results[:10], 1):
            customer = row.get('customer', '')
            detail = row.get('detail', '')
            team = row.get('service_group', '')
            date = row.get('date', '')
            job_type = row.get('job_type', '')
            
            formatted += f"{i}. ‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤: {customer}\n"
            if date:
                formatted += f"   ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà: {date}\n"
            if detail:
                formatted += f"   ‡∏á‡∏≤‡∏ô: {detail}\n"
            if team:
                formatted += f"   ‡∏ó‡∏µ‡∏°‡∏ä‡πà‡∏≤‡∏á: {team}\n"
            if job_type:
                formatted += f"   ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó: {job_type}\n"
            formatted += "\n"
        return formatted
    
    def _format_hvac_sales_analysis_results(self, results: List[Dict]) -> str:
        """‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢ HVAC"""
        formatted = "üìä ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢ HVAC:\n"
        for i, row in enumerate(results[:10], 1):
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏µ‡∏¢‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏õ‡πÑ‡∏î‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥
            total_jobs = row.get('total_jobs', row.get('job_count', row.get('count', 0)))
            total_revenue = row.get('total_revenue', row.get('total_value', row.get('sum', 0)))
            avg_value = row.get('avg_job_value', row.get('avg_value', row.get('avg', 0)))
            
            if total_jobs:
                formatted += f"{i}. ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏á‡∏≤‡∏ô: {total_jobs} ‡∏á‡∏≤‡∏ô\n"
            if total_revenue and str(total_revenue).replace('.', '').isdigit():
                formatted += f"   ‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏£‡∏ß‡∏°: {float(total_revenue):,.0f} ‡∏ö‡∏≤‡∏ó\n"
            if avg_value and str(avg_value).replace('.', '').isdigit():
                formatted += f"   ‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢: {float(avg_value):,.0f} ‡∏ö‡∏≤‡∏ó/‡∏á‡∏≤‡∏ô\n"
            formatted += "\n"
        return formatted
    
    def _format_hvac_general_results(self, results: List[Dict]) -> str:
        """‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ HVAC"""
        formatted = "üìä ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå HVAC:\n"
        for i, row in enumerate(results[:10], 1):
            formatted += f"{i}. "
            formatted += " | ".join([f"{k}: {v}" for k, v in row.items() if v is not None])
            formatted += "\n"
        return formatted
    
    # ========================================================================
    # ü§ñ AI RESPONSE GENERATION
    # ========================================================================
    
    async def _generate_hvac_ai_response(self, question: str, results: List[Dict], 
                                       tenant_id: str, intent_result: Dict[str, Any]) -> str:
        """ü§ñ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö AI ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö HVAC"""
        
        config = self.tenant_configs[tenant_id]
        category = intent_result.get('hvac_category', 'general')
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á context ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö AI
        context_prompt = f"""‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠ AI Assistant ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à HVAC Service & Spare Parts ‡∏Ç‡∏≠‡∏á {config.name}

üîß ‡∏ö‡∏£‡∏¥‡∏ö‡∏ó‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à: ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏ã‡πà‡∏≠‡∏°‡∏ö‡∏≥‡∏£‡∏∏‡∏á‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏¢‡πá‡∏ô‡πÅ‡∏•‡∏∞‡∏à‡∏≥‡∏´‡∏ô‡πà‡∏≤‡∏¢‡∏≠‡∏∞‡πÑ‡∏´‡∏•‡πà
üè∑Ô∏è ‡πÅ‡∏ö‡∏£‡∏ô‡∏î‡πå‡∏´‡∏•‡∏±‡∏Å: Hitachi, Daikin, EuroKlimat, Toyota, Mitsubishi
üìä ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°: {category}

‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°: {question}

‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏û‡∏ö: {json.dumps(results[:5], ensure_ascii=False, indent=2)}

‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏ó‡∏µ‡πà:
1. ‡πÄ‡∏õ‡πá‡∏ô‡∏°‡∏¥‡∏ï‡∏£‡πÅ‡∏•‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏ä‡∏ô‡πå
2. ‡πÉ‡∏ä‡πâ‡∏®‡∏±‡∏û‡∏ó‡πå‡πÄ‡∏ó‡∏Ñ‡∏ô‡∏¥‡∏Ñ HVAC ‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°
3. ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÉ‡∏´‡πâ‡∏≠‡πà‡∏≤‡∏ô‡∏á‡πà‡∏≤‡∏¢
4. ‡πÄ‡∏ô‡πâ‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç
5. ‡πÉ‡∏™‡πà‡∏´‡∏ô‡πà‡∏ß‡∏¢‡πÄ‡∏á‡∏¥‡∏ô (‡∏ö‡∏≤‡∏ó) ‡∏´‡∏≤‡∏Å‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏£‡∏≤‡∏Ñ‡∏≤"""

        try:
            ai_response = await self._call_ollama_api(context_prompt, tenant_id)
            return ai_response
        except Exception as e:
            logger.error(f"‚ùå AI response generation failed: {e}")
            # Fallback to formatted response
            return self._format_hvac_results(question, results, tenant_id, intent_result)
    
    # ========================================================================
    # üîß HVAC UTILITY METHODS
    # ========================================================================
    
    def _get_hvac_business_emoji(self, tenant_id: str) -> str:
        """üé® Business emoji ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö HVAC"""
        emoji_mapping = {
            'company-a': 'üîß',  # HVAC Service Main
            'company-b': '‚ùÑÔ∏è',  # HVAC Regional  
            'company-c': 'üåç'   # HVAC International
        }
        return emoji_mapping.get(tenant_id, 'üîß')
    
    def _generate_hvac_fallback_prompt(self, question: str, tenant_id: str, 
                                     intent_result: Dict[str, Any]) -> str:
        """üîÑ Fallback prompt ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö HVAC"""
        
        config = self.tenant_configs[tenant_id]
        category = intent_result.get('hvac_category', 'general')
        suggested_tables = intent_result.get('suggested_tables', ['sales2024'])
        
        return f"""‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠ PostgreSQL Expert ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à HVAC Service & Spare Parts - {config.name}

üîß ‡∏ö‡∏£‡∏¥‡∏ö‡∏ó‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à: ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏ã‡πà‡∏≠‡∏°‡∏ö‡∏≥‡∏£‡∏∏‡∏á‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏¢‡πá‡∏ô‡πÅ‡∏•‡∏∞‡∏à‡∏≥‡∏´‡∏ô‡πà‡∏≤‡∏¢‡∏≠‡∏∞‡πÑ‡∏´‡∏•‡πà
üí∞ ‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å: ‡πÇ‡∏£‡∏á‡∏á‡∏≤‡∏ô‡∏≠‡∏∏‡∏ï‡∏™‡∏≤‡∏´‡∏Å‡∏£‡∏£‡∏°, ‡πÇ‡∏£‡∏á‡πÅ‡∏£‡∏°, ‡∏≠‡∏≤‡∏Ñ‡∏≤‡∏£‡∏™‡∏≥‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô
üõ†Ô∏è ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏´‡∏•‡∏±‡∏Å: PM (Preventive Maintenance), ‡∏ã‡πà‡∏≠‡∏°‡πÅ‡∏ã‡∏°, ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ä‡∏¥‡πâ‡∏ô‡∏™‡πà‡∏ß‡∏ô, Overhaul

üìä ‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:
‚Ä¢ sales2024, sales2023, sales2022: ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏á‡∏≤‡∏ô‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏£‡∏≤‡∏¢‡∏õ‡∏µ
  - job_no: ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏á‡∏≤‡∏ô (SV.‡∏õ‡∏µ-‡πÄ‡∏î‡∏∑‡∏≠‡∏ô-‡∏•‡∏≥‡∏î‡∏±‡∏ö-‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó)
  - customer_name: ‡∏ä‡∏∑‡πà‡∏≠‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÄ‡∏ï‡πá‡∏°
  - description: ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏á‡∏≤‡∏ô‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£  
  - service_contact_: ‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤‡∏á‡∏≤‡∏ô (‡∏ö‡∏≤‡∏ó)
‚Ä¢ spare_part, spare_part2: ‡∏Ñ‡∏•‡∏±‡∏á‡∏≠‡∏∞‡πÑ‡∏´‡∏•‡πà
  - product_code: ‡∏£‡∏´‡∏±‡∏™‡∏≠‡∏∞‡πÑ‡∏´‡∏•‡πà, product_name: ‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏∞‡πÑ‡∏´‡∏•‡πà (‡∏†‡∏≤‡∏©‡∏≤‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©)
  - unit_price: ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πà‡∏≠‡∏´‡∏ô‡πà‡∏ß‡∏¢, balance: ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠
‚Ä¢ work_force: ‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏ó‡∏µ‡∏°‡∏á‡∏≤‡∏ô
  - date: ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô, customer: ‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤, service_group: ‡∏ó‡∏µ‡∏°‡∏ä‡πà‡∏≤‡∏á

üéØ ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°: {category}
üìã ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏ó‡∏µ‡πà‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥: {', '.join(suggested_tables)}

üîß ‡∏Å‡∏é‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö HVAC:
1. ‡πÉ‡∏ä‡πâ ILIKE '%keyword%' ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÅ‡∏•‡∏∞‡∏≠‡∏∞‡πÑ‡∏´‡∏•‡πà
2. service_contact_ ‡πÄ‡∏õ‡πá‡∏ô‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤‡∏á‡∏≤‡∏ô (‡∏ö‡∏≤‡∏ó) - ‡πÉ‡∏ä‡πâ CAST ‡πÄ‡∏õ‡πá‡∏ô numeric ‡∏´‡∏≤‡∏Å‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
3. ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢‡πÅ‡∏¢‡∏Å‡∏ï‡∏≤‡∏°‡∏õ‡∏µ - ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
4. ‡πÉ‡∏ä‡πâ UNION ALL ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏•‡∏≤‡∏¢‡∏õ‡∏µ
5. product_name ‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á spare_part ‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©
6. ‡πÉ‡∏ä‡πâ LIMIT 20 ‡πÄ‡∏™‡∏°‡∏≠

‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°: {question}

‡∏™‡∏£‡πâ‡∏≤‡∏á PostgreSQL query ‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à HVAC:"""
    
    # ========================================================================
    # üåê OLLAMA API INTEGRATION
    # ========================================================================
    
    async def _call_ollama_api(self, prompt: str, tenant_id: str) -> str:
        """üåê Call Ollama API with retry logic"""
        
        config = self.tenant_configs[tenant_id]
        
        payload = {
            "model": config.model_name,
            "prompt": prompt,
            "stream": False,
            "options": {
                "temperature": self.ai_response_temperature,
                "top_p": 0.9,
                "max_tokens": 2000
            }
        }
        
        for attempt in range(self.max_retries):
            try:
                async with aiohttp.ClientSession(timeout=aiohttp.ClientTimeout(total=self.request_timeout)) as session:
                    async with session.post(f"{self.ollama_base_url}/api/generate", json=payload) as response:
                        if response.status == 200:
                            result = await response.json()
                            return result.get('response', '').strip()
                        else:
                            logger.warning(f"üîÑ Ollama API returned {response.status}, attempt {attempt + 1}")
                            if attempt < self.max_retries - 1:
                                await asyncio.sleep(2 ** attempt)
                                
            except asyncio.TimeoutError:
                logger.warning(f"üîÑ AI request timeout attempt {attempt + 1}")
                if attempt < self.max_retries - 1:
                    await asyncio.sleep(2 ** attempt)
                    
            except Exception as e:
                logger.warning(f"üîÑ AI API error attempt {attempt + 1}: {e}")
                if attempt < self.max_retries - 1:
                    await asyncio.sleep(2 ** attempt)
        
        raise Exception(f"All {self.max_retries} AI API attempts failed")
    
    # ========================================================================
    # üóÑÔ∏è DATABASE OPERATIONS
    # ========================================================================
    
    def get_database_connection(self, tenant_id: str) -> psycopg2.extensions.connection:
        """üîå Get database connection (public method for schema discovery)"""
        
        config = self.tenant_configs[tenant_id]
        
        try:
            conn = psycopg2.connect(
                host=config.db_host,
                port=config.db_port,
                database=config.db_name,
                user=config.db_user,
                password=config.db_password,
                connect_timeout=10
            )
            conn.set_session(autocommit=True)
            return conn
            
        except Exception as e:
            logger.error(f"‚ùå Database connection failed for {tenant_id}: {e}")
            raise
    
    async def _execute_sql_unified(self, sql_query: str, tenant_id: str) -> List[Dict[str, Any]]:
        """üóÑÔ∏è Execute SQL query ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö HVAC"""
        
        try:
            logger.info(f"üóÑÔ∏è Executing HVAC SQL for {tenant_id}: {sql_query[:100]}...")
            
            conn = self.get_database_connection(tenant_id)
            cursor = conn.cursor()
            
            cursor.execute(sql_query)
            
            # Get results
            columns = [desc[0] for desc in cursor.description] if cursor.description else []
            rows = cursor.fetchall()
            
            # Process results
            results = []
            for row in rows:
                row_dict = dict(zip(columns, row))
                processed_row = self._process_row_data(row_dict)
                results.append(processed_row)
            
            cursor.close()
            conn.close()
            
            logger.info(f"‚úÖ HVAC SQL executed successfully: {len(results)} results")
            return results
            
        except Exception as e:
            logger.error(f"‚ùå HVAC SQL execution failed: {e}")
            logger.error(f"‚ùå Failed SQL: {sql_query}")
            return []
    
    def _process_row_data(self, row_dict: Dict[str, Any]) -> Dict[str, Any]:
        """üîß Process row data ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö HVAC"""
        
        processed_row = {}
        
        for key, value in row_dict.items():
            if isinstance(value, Decimal):
                processed_row[key] = float(value)
            elif isinstance(value, (date, datetime)):
                processed_row[key] = value.isoformat()
            elif value is None:
                processed_row[key] = None
            elif isinstance(value, str):
                processed_row[key] = value.strip()
            else:
                processed_row[key] = value
        
        return processed_row
    
    # ========================================================================
    # üîç SQL EXTRACTION
    # ========================================================================
    
    def _extract_sql_unified(self, ai_response: str, question: str) -> str:
        """üîç Extract SQL from AI response"""
        
        logger.info(f"üîç Extracting SQL from response (length: {len(ai_response)})")
        
        # Method 1: Look for SQL blocks
        sql_patterns = [
            r'```sql\s*(.*?)\s*```',
            r'```\s*(SELECT.*?);?\s*```',
            r'Query:\s*(SELECT.*?);?',
            r'SQL:\s*(SELECT.*?);?',
            r'(SELECT\s+.*?FROM\s+.*?(?:WHERE.*?)?(?:GROUP BY.*?)?(?:ORDER BY.*?)?(?:LIMIT.*?)?);?'
        ]
        
        for pattern in sql_patterns:
            matches = re.findall(pattern, ai_response, re.DOTALL | re.IGNORECASE)
            if matches:
                sql = matches[0].strip()
                if self._is_valid_sql_structure(sql):
                    logger.info(f"‚úÖ Extracted SQL: {sql[:100]}...")
                    return sql
        
        # Method 2: Look for any SELECT statement
        select_pattern = r'(SELECT\s+[^;]*(?:FROM\s+[^;]*)?(?:WHERE\s+[^;]*)?(?:LIMIT\s+\d+)?)'
        matches = re.findall(select_pattern, ai_response, re.DOTALL | re.IGNORECASE)
        
        for match in matches:
            sql = match.strip()
            if len(sql) > 20 and 'FROM' in sql.upper():
                logger.info(f"‚úÖ Found SELECT statement: {sql[:100]}...")
                return sql
        
        logger.warning("‚ùå No valid SQL found in AI response")
        return None
    
    def _is_valid_sql_structure(self, sql: str) -> bool:
        """‚úÖ Validate SQL structure"""
        
        sql_upper = sql.upper()
        
        # Must have SELECT and FROM
        if 'SELECT' not in sql_upper or 'FROM' not in sql_upper:
            return False
        
        # Should not have dangerous keywords
        dangerous_keywords = ['DROP', 'DELETE', 'UPDATE', 'INSERT', 'ALTER', 'CREATE']
        if any(keyword in sql_upper for keyword in dangerous_keywords):
            return False
        
        # Basic structure check
        if sql.strip().startswith('SELECT') and len(sql.strip()) > 20:
            return True
        
        return False
    
    # ========================================================================
    # ‚ùå ERROR HANDLING
    # ========================================================================
    
    def _create_error_response(self, error_message: str, tenant_id: str) -> Dict[str, Any]:
        return {
            "answer": f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö HVAC: {error_message}",
            "success": False,
            "data_source_used": "hvac_error",
            "sql_query": None,
            "tenant_id": tenant_id,
            "system_used": "hvac_error_handler",
            "error": error_message
        }
    
    def _create_sql_error_response(self, question: str, tenant_id: str, error_message: str) -> Dict[str, Any]:
        config = self.tenant_configs[tenant_id]
        business_emoji = self._get_hvac_business_emoji(tenant_id)
        
        answer = f"""{business_emoji} ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏° HVAC ‡πÑ‡∏î‡πâ

‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°: {question}

‚ö†Ô∏è ‡∏õ‡∏±‡∏ç‡∏´‡∏≤: {error_message}

üí° ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏° HVAC:
‚Ä¢ ‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤: "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î" ‡∏´‡∏£‡∏∑‡∏≠ "‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó ABC ‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏≠‡∏∞‡πÑ‡∏£‡∏ö‡πâ‡∏≤‡∏á"
‚Ä¢ ‡∏≠‡∏∞‡πÑ‡∏´‡∏•‡πà: "‡∏£‡∏≤‡∏Ñ‡∏≤‡∏≠‡∏∞‡πÑ‡∏´‡∏•‡πà Hitachi chiller" ‡∏´‡∏£‡∏∑‡∏≠ "‡∏™‡∏ï‡πá‡∏≠‡∏Å‡∏≠‡∏∞‡πÑ‡∏´‡∏•‡πà‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"
‚Ä¢ ‡πÅ‡∏ú‡∏ô‡∏á‡∏≤‡∏ô: "‡πÅ‡∏ú‡∏ô‡∏á‡∏≤‡∏ô‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà 15/06/2568" ‡∏´‡∏£‡∏∑‡∏≠ "‡∏ó‡∏µ‡∏°‡∏ä‡πà‡∏≤‡∏á‡∏°‡∏µ‡πÉ‡∏Ñ‡∏£‡∏ö‡πâ‡∏≤‡∏á"
‚Ä¢ ‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢: "‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡∏õ‡∏µ 2567" ‡∏´‡∏£‡∏∑‡∏≠ "‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£ PM"

‡∏´‡∏£‡∏∑‡∏≠‡∏•‡∏≠‡∏á‡∏ñ‡∏≤‡∏°‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ‡∏Ç‡∏≠‡∏á‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à HVAC"""
        
        return {
            "answer": answer,
            "success": False,
            "data_source_used": f"hvac_sql_error_{config.model_name}",
            "sql_query": None,
            "tenant_id": tenant_id,
            "system_used": "hvac_sql_error_handler",
            "error_reason": error_message
        }
    
    # ========================================================================
    # üìä STATISTICS
    # ========================================================================
    
    def _update_stats(self, tenant_id: str, success: bool, processing_time: float):
        """Update system statistics"""
        
        if success:
            self.stats['successful_queries'] += 1
        else:
            self.stats['failed_queries'] += 1
        
        # Update average response time
        total_queries = self.stats['total_queries']
        current_avg = self.stats['avg_response_time']
        new_avg = ((current_avg * (total_queries - 1)) + processing_time) / total_queries
        self.stats['avg_response_time'] = new_avg
    
    async def get_intelligent_schema_stats(self) -> Dict[str, Any]:
        """üìä ‡∏î‡∏π‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Ç‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏ö HVAC Intelligent Schema Discovery"""
        
        if self.intelligent_schema_available and self.schema_integration:
            try:
                cache_stats = self.schema_integration.schema_discovery.get_cache_statistics()
                return {
                    'hvac_intelligent_schema_system': 'active',
                    'cache_statistics': cache_stats,
                    'hvac_features': [
                        'contextual_hvac_schema_discovery',
                        'intelligent_hvac_prompt_building',
                        'hvac_question_analysis',
                        'hvac_business_data_extraction',
                        'smart_caching'
                    ]
                }
            except Exception as e:
                return {'error': f'Failed to get HVAC stats: {str(e)}'}
        else:
            return {'hvac_intelligent_schema_system': 'not_available'}

    def clear_schema_cache(self, tenant_id: Optional[str] = None):
        """üóëÔ∏è ‡∏•‡πâ‡∏≤‡∏á cache ‡∏Ç‡∏≠‡∏á HVAC schema discovery"""
        
        if self.intelligent_schema_available and self.schema_integration:
            try:
                self.schema_integration.schema_discovery.clear_cache(tenant_id)
                logger.info(f"üóëÔ∏è HVAC Schema cache cleared for {tenant_id if tenant_id else 'all tenants'}")
            except Exception as e:
                logger.error(f"‚ùå Failed to clear HVAC cache: {e}")
        else:
            logger.warning("‚ö†Ô∏è HVAC Intelligent Schema Discovery not available")
    
    # ========================================================================
    # üîÑ COMPATIBILITY METHODS
    # ========================================================================
    
    async def process_question(self, question: str, tenant_id: str) -> Dict[str, Any]:
        """Compatibility method"""
        return await self.process_enhanced_question(question, tenant_id)


# Export for compatibility
UnifiedEnhancedPostgresOllamaAgentWithAIResponse = UnifiedEnhancedPostgresOllamaAgent
EnhancedPostgresOllamaAgent = UnifiedEnhancedPostgresOllamaAgent