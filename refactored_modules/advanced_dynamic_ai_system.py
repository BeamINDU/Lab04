# refactored_modules/advanced_dynamic_ai_system.py
# üîß ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç Dynamic AI System ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ Schema ‡∏à‡∏£‡∏¥‡∏á

import re
import json
import asyncio
from typing import Dict, List, Any, Optional
from datetime import datetime, timedelta
import logging

logger = logging.getLogger(__name__)

class AdvancedDynamicAISystem:
    """üöÄ ‡∏£‡∏∞‡∏ö‡∏ö AI ‡πÅ‡∏ö‡∏ö Dynamic ‡∏ó‡∏µ‡πà‡∏ï‡∏≠‡∏ö‡πÑ‡∏î‡πâ‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏° - ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÅ‡∏•‡πâ‡∏ß"""
    
    def __init__(self, database_handler, ollama_client):
        self.db_handler = database_handler
        self.ollama_client = ollama_client
        
        # Cache ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• schema ‡πÅ‡∏•‡∏∞‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á
        self.schema_cache = {}
        self.sample_data_cache = {}
        self.relationship_cache = {}
        self.actual_columns_cache = {}  # üÜï Cache ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏à‡∏£‡∏¥‡∏á
        
        # Advanced Question Pattern Recognition
        self.question_patterns = {
            'counting': {
                'patterns': [
                    r'(?:‡∏°‡∏µ|‡∏à‡∏≥‡∏ô‡∏ß‡∏ô|‡∏Å‡∏µ‡πà|count|how many).*?(?:‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤|customer|‡∏á‡∏≤‡∏ô|job|‡∏≠‡∏∞‡πÑ‡∏´‡∏•‡πà|part)',
                    r'(?:‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î|total|‡∏£‡∏ß‡∏°|all).*?(?:‡∏Å‡∏µ‡πà|how many|count)',
                ],
                'response_format': 'summary_with_count'
            },
            'spare_parts_search': {
                'patterns': [
                    r'(?:‡∏£‡∏≤‡∏Ñ‡∏≤|price|‡∏≠‡∏∞‡πÑ‡∏´‡∏•‡πà|spare.*part).*?(?:hitachi|daikin|euroklimat)',
                    r'(?:‡∏´‡∏≤|find|‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤).*?(?:‡∏≠‡∏∞‡πÑ‡∏´‡∏•‡πà|spare|part)',
                ],
                'preferred_tables': ['spare_part', 'spare_part2'],
                'response_format': 'spare_parts_list'
            },
            'customer_analysis': {
                'patterns': [
                    r'(?:‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤|customer|‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó|company).*?(?:‡∏°‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î|most|‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î|all)',
                    r'(?:‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå|analysis).*?(?:‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤|customer)',
                ],
                'preferred_tables': ['sales2024', 'sales2023', 'sales2022'],
                'response_format': 'customer_analysis'
            },
            'sales_analysis': {
                'patterns': [
                    r'(?:‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå|analysis|‡∏™‡∏£‡∏∏‡∏õ|summary).*?(?:‡∏Ç‡∏≤‡∏¢|sales|‡∏õ‡∏µ|year)',
                    r'(?:‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢|sales).*?(?:‡∏õ‡∏µ|year|\d{4})',
                ],
                'preferred_tables': ['sales2024', 'sales2023', 'sales2022'],
                'response_format': 'sales_summary'
            }
        }
        
        logger.info("üöÄ Fixed Advanced Dynamic AI System initialized")
    
    async def process_any_question(self, question: str, tenant_id: str) -> Dict[str, Any]:
        """üéØ ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÉ‡∏î‡πÜ ‡∏î‡πâ‡∏ß‡∏¢ Schema Discovery ‡∏ó‡∏µ‡πà‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥"""
        
        try:
            logger.info(f"üöÄ Processing dynamic question: {question}")
            
            # Step 1: ‡∏Ñ‡πâ‡∏ô‡∏û‡∏ö schema ‡∏à‡∏£‡∏¥‡∏á‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
            actual_schema = await self._get_actual_database_schema(tenant_id)
            
            # Step 2: ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°
            question_analysis = self._analyze_question_with_schema(question, actual_schema)
            
            # Step 3: ‡∏™‡∏£‡πâ‡∏≤‡∏á SQL ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
            sql_query = await self._generate_accurate_sql(question, question_analysis, actual_schema, tenant_id)
            
            # Step 4: Execute ‡πÅ‡∏•‡∏∞ process results
            if sql_query:
                results = await self._execute_sql_safely(sql_query, tenant_id)
                answer = self._format_results_intelligently(question, results, question_analysis)
                
                return {
                    "answer": answer,
                    "success": True,
                    "sql_query": sql_query,
                    "results_count": len(results),
                    "question_analysis": question_analysis,
                    "data_source_used": "fixed_dynamic_ai",
                    "system_used": "advanced_dynamic_ai_fixed"
                }
            else:
                return await self._create_helpful_response(question, actual_schema, tenant_id)
                
        except Exception as e:
            logger.error(f"‚ùå Fixed dynamic processing failed: {e}")
            return {
                "answer": f"‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢ ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏ô‡∏µ‡πâ‡πÑ‡∏î‡πâ: {str(e)}",
                "success": False,
                "error": str(e),
                "data_source_used": "dynamic_ai_error"
            }
    
    async def _get_actual_database_schema(self, tenant_id: str) -> Dict[str, Any]:
        """üîç ‡∏î‡∏∂‡∏á schema ‡∏à‡∏£‡∏¥‡∏á‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• - ‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥ 100%"""
        
        cache_key = f"{tenant_id}_actual_schema"
        if cache_key in self.schema_cache:
            cache_age = (datetime.now() - self.schema_cache[cache_key]['timestamp']).seconds
            if cache_age < 1800:  # 30 ‡∏ô‡∏≤‡∏ó‡∏µ
                return self.schema_cache[cache_key]['data']
        
        try:
            conn = self.db_handler.get_database_connection(tenant_id)
            cursor = conn.cursor()
            
            actual_schema = {}
            
            # ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
            cursor.execute("""
                SELECT table_name 
                FROM information_schema.tables 
                WHERE table_schema = 'public' 
                AND table_type = 'BASE TABLE'
                ORDER BY table_name
            """)
            table_names = [row[0] for row in cursor.fetchall()]
            
            # ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ï‡∏≤‡∏£‡∏≤‡∏á
            for table_name in table_names:
                actual_schema[table_name] = await self._get_table_actual_structure(cursor, table_name)
            
            cursor.close()
            conn.close()
            
            # Cache ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
            self.schema_cache[cache_key] = {
                'data': actual_schema,
                'timestamp': datetime.now()
            }
            
            logger.info(f"‚úÖ Actual schema loaded: {len(actual_schema)} tables")
            for table_name, info in actual_schema.items():
                column_names = [col['name'] for col in info['columns']]
                logger.info(f"  üìã {table_name}: {', '.join(column_names[:5])}...")
            
            return actual_schema
            
        except Exception as e:
            logger.error(f"‚ùå Actual schema discovery failed: {e}")
            return {}
    
    async def _get_table_actual_structure(self, cursor, table_name: str) -> Dict[str, Any]:
        """üìã ‡∏î‡∏∂‡∏á‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏à‡∏£‡∏¥‡∏á"""
        
        try:
            # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏à‡∏£‡∏¥‡∏á
            cursor.execute("""
                SELECT column_name, data_type, is_nullable, column_default
                FROM information_schema.columns 
                WHERE table_name = %s AND table_schema = 'public'
                ORDER BY ordinal_position
            """, (table_name,))
            
            columns = []
            for row in cursor.fetchall():
                columns.append({
                    'name': row[0],
                    'type': row[1],
                    'nullable': row[2] == 'YES',
                    'default': row[3]
                })
            
            # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á
            try:
                cursor.execute(f"SELECT * FROM {table_name} LIMIT 3")
                sample_rows = cursor.fetchall()
                if sample_rows and cursor.description:
                    sample_columns = [desc[0] for desc in cursor.description]
                    samples = []
                    for row in sample_rows:
                        sample_dict = dict(zip(sample_columns, row))
                        # ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô string ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢
                        for key, value in sample_dict.items():
                            if value is not None:
                                sample_dict[key] = str(value)
                        samples.append(sample_dict)
                else:
                    samples = []
            except Exception as e:
                logger.warning(f"Could not get samples from {table_name}: {e}")
                samples = []
            
            # ‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÅ‡∏ñ‡∏ß
            try:
                cursor.execute(f"SELECT COUNT(*) FROM {table_name}")
                row_count = cursor.fetchone()[0]
            except:
                row_count = 0
            
            return {
                'columns': columns,
                'samples': samples,
                'row_count': row_count,
                'purpose': self._infer_table_purpose_from_actual_data(table_name, columns, samples)
            }
            
        except Exception as e:
            logger.error(f"‚ùå Failed to analyze table {table_name}: {e}")
            return {'columns': [], 'samples': [], 'row_count': 0, 'purpose': 'unknown'}
    
    def _infer_table_purpose_from_actual_data(self, table_name: str, columns: List[Dict], samples: List[Dict]) -> str:
        """üéØ ‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏õ‡∏£‡∏∞‡∏™‡∏á‡∏Ñ‡πå‡∏Ç‡∏≠‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏£‡∏¥‡∏á"""
        
        column_names = [col['name'].lower() for col in columns]
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ï‡∏≤‡∏°‡∏ä‡∏∑‡πà‡∏≠‡∏ï‡∏≤‡∏£‡∏≤‡∏á
        if 'sales' in table_name.lower():
            return 'sales_transaction_data'
        elif 'spare' in table_name.lower() or 'part' in table_name.lower():
            return 'spare_parts_inventory'
        elif 'work' in table_name.lower() or 'force' in table_name.lower():
            return 'workforce_scheduling'
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ï‡∏≤‡∏°‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏à‡∏£‡∏¥‡∏á
        if 'customer_name' in column_names:
            return 'customer_transaction_data'
        elif 'product_name' in column_names and 'unit_price' in column_names:
            return 'product_inventory_data'
        elif 'service_group' in column_names and 'date' in column_names:
            return 'work_scheduling_data'
        
        return 'general_business_data'
    
    def _analyze_question_with_schema(self, question: str, actual_schema: Dict[str, Any]) -> Dict[str, Any]:
        """üß† ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ schema ‡∏à‡∏£‡∏¥‡∏á"""
        
        question_lower = question.lower()
        
        analysis = {
            'original_question': question,
            'question_type': 'unknown',
            'target_tables': [],
            'available_columns': {},
            'search_keywords': [],
            'filters': [],
            'confidence': 0.0
        }
        
        # ‡∏´‡∏≤‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°
        max_confidence = 0
        best_type = 'unknown'
        
        for q_type, pattern_info in self.question_patterns.items():
            confidence = 0
            for pattern in pattern_info['patterns']:
                if re.search(pattern, question_lower):
                    confidence += 1
            
            if confidence > max_confidence:
                max_confidence = confidence
                best_type = q_type
        
        analysis['question_type'] = best_type
        analysis['confidence'] = max_confidence
        
        # ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°
        if best_type in self.question_patterns and 'preferred_tables' in self.question_patterns[best_type]:
            preferred_tables = self.question_patterns[best_type]['preferred_tables']
            analysis['target_tables'] = [t for t in preferred_tables if t in actual_schema]
        
        # ‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏à‡∏≤‡∏∞‡∏à‡∏á ‡πÉ‡∏´‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ï‡∏≤‡∏°‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°
        if not analysis['target_tables']:
            analysis['target_tables'] = self._select_tables_by_content(question, actual_schema)
        
        # ‡∏î‡∏∂‡∏á‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏£‡∏¥‡∏á‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
        for table_name in analysis['target_tables']:
            if table_name in actual_schema:
                analysis['available_columns'][table_name] = [
                    col['name'] for col in actual_schema[table_name]['columns']
                ]
        
        # ‡∏´‡∏≤‡∏Ñ‡∏≥‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤
        analysis['search_keywords'] = self._extract_search_keywords(question)
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á filters
        analysis['filters'] = self._create_filters_from_question(question, analysis['available_columns'])
        
        return analysis
    
    def _select_tables_by_content(self, question: str, actual_schema: Dict[str, Any]) -> List[str]:
        """üìã ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏ï‡∏≤‡∏°‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°"""
        
        question_lower = question.lower()
        selected_tables = []
        
        # ‡∏Ñ‡∏≥‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ï‡∏≤‡∏£‡∏≤‡∏á
        table_keywords = {
            'spare_parts': ['‡∏≠‡∏∞‡πÑ‡∏´‡∏•‡πà', 'spare', 'part', '‡∏£‡∏≤‡∏Ñ‡∏≤', 'price', '‡∏™‡∏ï‡πá‡∏≠‡∏Å'],
            'sales': ['‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤', 'customer', '‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£', 'service', '‡∏Ç‡∏≤‡∏¢', 'sales', '‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó'],
            'workforce': ['‡∏ó‡∏µ‡∏°', 'team', '‡∏ä‡πà‡∏≤‡∏á', '‡πÅ‡∏ú‡∏ô‡∏á‡∏≤‡∏ô', 'schedule', '‡∏á‡∏≤‡∏ô', 'work']
        }
        
        for category, keywords in table_keywords.items():
            if any(keyword in question_lower for keyword in keywords):
                # ‡∏´‡∏≤‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏±‡∏ö category
                for table_name in actual_schema.keys():
                    table_lower = table_name.lower()
                    if category == 'spare_parts' and ('spare' in table_lower or 'part' in table_lower):
                        selected_tables.append(table_name)
                    elif category == 'sales' and 'sales' in table_lower:
                        selected_tables.append(table_name)
                    elif category == 'workforce' and ('work' in table_lower or 'force' in table_lower):
                        selected_tables.append(table_name)
        
        # ‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏û‡∏ö ‡πÉ‡∏´‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏´‡∏•‡∏±‡∏Å
        if not selected_tables:
            main_tables = ['sales2024', 'spare_part', 'work_force']
            selected_tables = [t for t in main_tables if t in actual_schema]
        
        return selected_tables[:3]  # ‡∏à‡∏≥‡∏Å‡∏±‡∏î 3 ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÅ‡∏£‡∏Å
    
    def _extract_search_keywords(self, question: str) -> List[str]:
        """üîç ‡∏™‡∏Å‡∏±‡∏î‡∏Ñ‡∏≥‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤"""
        
        keywords = []
        
        # ‡∏´‡∏≤‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏ö‡∏£‡∏ô‡∏î‡πå
        brands = ['hitachi', 'daikin', 'euroklimat', 'toyota', 'mitsubishi', 'york', 'carrier']
        for brand in brands:
            if brand in question.lower():
                keywords.append(brand)
        
        # ‡∏´‡∏≤‡∏ä‡∏∑‡πà‡∏≠‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó
        company_pattern = r'‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó\s*([^‡∏°\s]+)'
        company_match = re.search(company_pattern, question)
        if company_match:
            company_name = company_match.group(1).strip()
            keywords.append(company_name)
        
        # ‡∏´‡∏≤‡∏Ñ‡∏≥‡πÄ‡∏ó‡∏Ñ‡∏ô‡∏¥‡∏Ñ
        technical_terms = ['pm', 'overhaul', 'maintenance', 'repair', 'chiller', 'compressor']
        for term in technical_terms:
            if term in question.lower():
                keywords.append(term)
        
        return keywords
    
    def _create_filters_from_question(self, question: str, available_columns: Dict[str, List[str]]) -> List[Dict]:
        """üéØ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ü‡∏¥‡∏•‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏à‡∏≤‡∏Å‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°"""
        
        filters = []
        keywords = self._extract_search_keywords(question)
        
        for table_name, columns in available_columns.items():
            for keyword in keywords:
                # ‡∏´‡∏≤‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤
                text_columns = []
                
                for col in columns:
                    col_lower = col.lower()
                    if any(text_type in col_lower for text_type in ['name', 'description', 'detail']):
                        text_columns.append(col)
                
                if text_columns:
                    filters.append({
                        'table': table_name,
                        'columns': text_columns,
                        'keyword': keyword,
                        'operator': 'ILIKE',
                        'value': f'%{keyword}%'
                    })
        
        return filters
    
    async def _generate_accurate_sql(self, question: str, analysis: Dict[str, Any], 
                                   actual_schema: Dict[str, Any], tenant_id: str) -> str:
        """üîß ‡∏™‡∏£‡πâ‡∏≤‡∏á SQL ‡∏ó‡∏µ‡πà‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥‡∏ï‡∏≤‡∏° schema ‡∏à‡∏£‡∏¥‡∏á"""
        
        question_type = analysis['question_type']
        target_tables = analysis['target_tables']
        available_columns = analysis['available_columns']
        
        if not target_tables:
            logger.warning("No target tables found")
            return None
        
        main_table = target_tables[0]
        
        try:
            if question_type == 'counting':
                return self._generate_counting_sql(main_table, available_columns, analysis)
            
            elif question_type == 'spare_parts_search':
                return self._generate_spare_parts_sql(main_table, available_columns, analysis)
            
            elif question_type == 'customer_analysis':
                return self._generate_customer_sql(main_table, available_columns, analysis)
            
            elif question_type == 'sales_analysis':
                return self._generate_sales_analysis_sql(target_tables, available_columns, analysis)
            
            else:
                return self._generate_general_sql(main_table, available_columns, analysis)
                
        except Exception as e:
            logger.error(f"‚ùå SQL generation failed: {e}")
            return None
    
    def _generate_counting_sql(self, table_name: str, available_columns: Dict[str, List[str]], 
                             analysis: Dict[str, Any]) -> str:
        """üìä ‡∏™‡∏£‡πâ‡∏≤‡∏á SQL ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ô‡∏±‡∏ö"""
        
        columns = available_columns.get(table_name, [])
        
        # ‡∏´‡∏≤‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ô‡∏±‡∏ö
        if 'customer_name' in columns:
            count_column = 'DISTINCT customer_name'
            alias = 'total_customers'
        elif 'product_name' in columns:
            count_column = 'DISTINCT product_name'
            alias = 'total_products'
        else:
            count_column = '*'
            alias = 'total_records'
        
        sql = f"SELECT COUNT({count_column}) as {alias} FROM {table_name}"
        
        # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç
        where_conditions = self._build_where_conditions(table_name, columns, analysis)
        if where_conditions:
            sql += f" WHERE {where_conditions}"
        
        return sql
    
    def _generate_spare_parts_sql(self, table_name: str, available_columns: Dict[str, List[str]], 
                                analysis: Dict[str, Any]) -> str:
        """üîß ‡∏™‡∏£‡πâ‡∏≤‡∏á SQL ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏≠‡∏∞‡πÑ‡∏´‡∏•‡πà"""
        
        columns = available_columns.get(table_name, [])
        
        # ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç
        select_columns = []
        for col in ['product_code', 'product_name', 'unit_price', 'balance', 'description']:
            if col in columns:
                select_columns.append(col)
        
        if not select_columns:
            select_columns = columns[:5]  # ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å 5 ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡πÅ‡∏£‡∏Å
        
        sql = f"SELECT {', '.join(select_columns)} FROM {table_name}"
        
        # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç
        where_conditions = self._build_where_conditions(table_name, columns, analysis)
        if where_conditions:
            sql += f" WHERE {where_conditions}"
        
        sql += " ORDER BY product_code LIMIT 20"
        
        return sql
    
    def _generate_customer_sql(self, table_name: str, available_columns: Dict[str, List[str]], 
                             analysis: Dict[str, Any]) -> str:
        """üë• ‡∏™‡∏£‡πâ‡∏≤‡∏á SQL ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤"""
        
        columns = available_columns.get(table_name, [])
        
        # ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤
        select_columns = []
        for col in ['customer_name', 'job_no', 'description', 'service_contact_']:
            if col in columns:
                select_columns.append(col)
        
        if not select_columns:
            select_columns = columns[:4]
        
        sql = f"SELECT {', '.join(select_columns)} FROM {table_name}"
        
        # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç
        where_conditions = self._build_where_conditions(table_name, columns, analysis)
        if where_conditions:
            sql += f" WHERE {where_conditions}"
        
        sql += " ORDER BY customer_name LIMIT 20"
        
        return sql
    
    def _generate_sales_analysis_sql(self, target_tables: List[str], available_columns: Dict[str, List[str]], 
                                   analysis: Dict[str, Any]) -> str:
        """üìà ‡∏™‡∏£‡πâ‡∏≤‡∏á SQL ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢"""
        
        # ‡πÉ‡∏ä‡πâ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÅ‡∏£‡∏Å‡πÄ‡∏õ‡πá‡∏ô‡∏´‡∏•‡∏±‡∏Å
        main_table = target_tables[0]
        columns = available_columns.get(main_table, [])
        
        # ‡∏´‡∏≤‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢
        value_column = None
        for col in ['service_contact_', 'amount', 'value', 'price']:
            if col in columns:
                value_column = col
                break
        
        if value_column:
            sql = f"""SELECT 
                COUNT(*) as total_jobs,
                SUM(CAST({value_column} as NUMERIC)) as total_revenue,
                AVG(CAST({value_column} as NUMERIC)) as avg_job_value
            FROM {main_table}"""
        else:
            sql = f"SELECT COUNT(*) as total_jobs FROM {main_table}"
        
        # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç
        where_conditions = self._build_where_conditions(main_table, columns, analysis)
        if where_conditions:
            sql += f" WHERE {where_conditions}"
        
        return sql
    
    def _generate_general_sql(self, table_name: str, available_columns: Dict[str, List[str]], 
                            analysis: Dict[str, Any]) -> str:
        """üîç ‡∏™‡∏£‡πâ‡∏≤‡∏á SQL ‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ"""
        
        columns = available_columns.get(table_name, [])
        
        # ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç
        important_columns = []
        priority_columns = ['id', 'name', 'customer_name', 'product_name', 'description', 'date']
        
        for col in priority_columns:
            if col in columns:
                important_columns.append(col)
        
        # ‡πÄ‡∏ï‡∏¥‡∏°‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏≠‡∏∑‡πà‡∏ô‡∏à‡∏ô‡∏Ñ‡∏£‡∏ö 5 ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå
        for col in columns:
            if col not in important_columns and len(important_columns) < 5:
                important_columns.append(col)
        
        if not important_columns:
            important_columns = ['*']
        
        sql = f"SELECT {', '.join(important_columns)} FROM {table_name}"
        
        # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç
        where_conditions = self._build_where_conditions(table_name, columns, analysis)
        if where_conditions:
            sql += f" WHERE {where_conditions}"
        
        sql += " LIMIT 20"
        
        return sql
    
    def _build_where_conditions(self, table_name: str, columns: List[str], 
                              analysis: Dict[str, Any]) -> str:
        """üéØ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç WHERE"""
        
        conditions = []
        keywords = analysis.get('search_keywords', [])
        
        for keyword in keywords:
            keyword_conditions = []
            
            # ‡∏´‡∏≤‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ñ‡∏≥‡∏ô‡∏µ‡πâ
            for col in columns:
                col_lower = col.lower()
                if any(text_type in col_lower for text_type in ['name', 'description', 'detail']):
                    keyword_conditions.append(f"{col} ILIKE '%{keyword}%'")
            
            if keyword_conditions:
                conditions.append(f"({' OR '.join(keyword_conditions)})")
        
        # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏û‡∏¥‡πÄ‡∏®‡∏©
        if 'service_contact_' in columns:
            conditions.append("service_contact_ IS NOT NULL")
        
        return ' AND '.join(conditions)
    
    async def _execute_sql_safely(self, sql_query: str, tenant_id: str) -> List[Dict[str, Any]]:
        """üõ°Ô∏è Execute SQL ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢"""
        
        try:
            results = await self.db_handler._execute_sql_unified(sql_query, tenant_id)
            return results if results else []
            
        except Exception as e:
            logger.error(f"‚ùå Safe SQL execution failed: {e}")
            logger.error(f"‚ùå Failed SQL: {sql_query}")
            
            # ‡∏•‡∏≠‡∏á fallback query ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏á‡πà‡∏≤‡∏¢
            try:
                # ‡∏´‡∏≤‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏à‡∏≤‡∏Å SQL
                table_match = re.search(r'FROM\s+(\w+)', sql_query, re.IGNORECASE)
                if table_match:
                    table_name = table_match.group(1)
                    simple_query = f"SELECT * FROM {table_name} LIMIT 5"
                    logger.info(f"üîÑ Trying fallback query: {simple_query}")
                    
                    fallback_results = await self.db_handler._execute_sql_unified(simple_query, tenant_id)
                    return fallback_results if fallback_results else []
            except:
                pass
            
            return []
    
    def _format_results_intelligently(self, question: str, results: List[Dict], 
                                    analysis: Dict[str, Any]) -> str:
        """üé® ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ä‡∏≤‡∏ç‡∏â‡∏•‡∏≤‡∏î"""
        
        if not results:
            return self._create_no_results_response(question, analysis)
        
        question_type = analysis.get('question_type', 'unknown')
        
        # ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°
        if question_type == 'counting':
            return self._format_counting_results(question, results)
        elif question_type == 'spare_parts_search':
            return self._format_spare_parts_results(question, results)
        elif question_type == 'customer_analysis':
            return self._format_customer_results(question, results)
        elif question_type == 'sales_analysis':
            return self._format_sales_results(question, results)
        else:
            return self._format_general_results(question, results)
    
    def _format_counting_results(self, question: str, results: List[Dict]) -> str:
        """üìä ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ô‡∏±‡∏ö"""
        
        if len(results) == 1:
            count_result = results[0]
            # ‡∏´‡∏≤‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç
            count_value = None
            count_type = "‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£"
            
            for key, value in count_result.items():
                if isinstance(value, (int, float)) and value > 0:
                    count_value = int(value)
                    # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏ï‡∏≤‡∏°‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå
                    if 'customer' in key.lower():
                        count_type = "‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤"
                    elif 'product' in key.lower():
                        count_type = "‡∏ú‡∏•‡∏¥‡∏ï‡∏†‡∏±‡∏ì‡∏ë‡πå"
                    elif 'job' in key.lower():
                        count_type = "‡∏á‡∏≤‡∏ô"
                    break
            
            if count_value is not None:
                return f"üîß ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤: {question}\n\nüìä ‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: {count_value:,} {count_type}"
        
        return f"üîß ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤: {question}\n\nüìä ‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: {len(results)} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£"
    
    def _format_spare_parts_results(self, question: str, results: List[Dict]) -> str:
        """üîß ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏≠‡∏∞‡πÑ‡∏´‡∏•‡πà"""
        
        response = f"üîß ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏≠‡∏∞‡πÑ‡∏´‡∏•‡πà: {question}\n\n"
        
        for i, result in enumerate(results[:10], 1):
            response += f"{i}. "
            
            # ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏Ç‡∏≠‡∏á‡∏≠‡∏∞‡πÑ‡∏´‡∏•‡πà
            code = result.get('product_code', '')
            name = result.get('product_name', '')
            price = result.get('unit_price', '')
            balance = result.get('balance', '')
            description = result.get('description', '')
            
            if code:
                response += f"{code}"
            if name:
                response += f" - {name}"
            response += "\n"
            
            if price and str(price).replace('.', '').replace(',', '').isdigit():
                try:
                    price_num = float(str(price).replace(',', ''))
                    response += f"   üí∞ ‡∏£‡∏≤‡∏Ñ‡∏≤: {price_num:,.0f} ‡∏ö‡∏≤‡∏ó"
                    if balance:
                        response += f" | üì¶ ‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠: {balance} ‡∏ä‡∏¥‡πâ‡∏ô"
                    response += "\n"
                except:
                    pass
            
            if description:
                desc_short = description[:80] + "..." if len(description) > 80 else description
                response += f"   üìù ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î: {desc_short}\n"
            
            response += "\n"
        
        response += f"üìà ‡∏™‡∏£‡∏∏‡∏õ: ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå {min(len(results), 10)} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏à‡∏≤‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î {len(results)} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£"
        
        return response
    
    def _format_customer_results(self, question: str, results: List[Dict]) -> str:
        """üë• ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤"""
        
        response = f"üë• ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤: {question}\n\n"
        
        for i, result in enumerate(results[:10], 1):
            customer = result.get('customer_name', result.get('customer', ''))
            job_no = result.get('job_no', '')
            description = result.get('description', result.get('detail', ''))
            value = result.get('service_contact_', result.get('value', ''))
            
            response += f"{i}. {customer}\n"
            
            if job_no:
                response += f"   üìã ‡∏á‡∏≤‡∏ô: {job_no}\n"
            
            if description:
                desc_short = description[:100] + "..." if len(description) > 100 else description
                response += f"   üõ†Ô∏è ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£: {desc_short}\n"
            
            if value and str(value).replace('.', '').replace(',', '').isdigit():
                try:
                    value_num = float(str(value).replace(',', ''))
                    if value_num > 0:
                        response += f"   üí∞ ‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤: {value_num:,.0f} ‡∏ö‡∏≤‡∏ó\n"
                except:
                    pass
            
            response += "\n"
        
        response += f"üìà ‡∏™‡∏£‡∏∏‡∏õ: ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå {min(len(results), 10)} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏à‡∏≤‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î {len(results)} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£"
        
        return response
    
    def _format_sales_results(self, question: str, results: List[Dict]) -> str:
        """üìä ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢"""
        
        response = f"üìä ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢: {question}\n\n"
        
        if len(results) == 1:
            result = results[0]
            
            total_jobs = result.get('total_jobs', 0)
            total_revenue = result.get('total_revenue', 0)
            avg_job_value = result.get('avg_job_value', 0)
            
            response += f"üìã ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏á‡∏≤‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: {total_jobs:,} ‡∏á‡∏≤‡∏ô\n"
            
            if total_revenue:
                try:
                    revenue_num = float(total_revenue)
                    response += f"üí∞ ‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏£‡∏ß‡∏°: {revenue_num:,.0f} ‡∏ö‡∏≤‡∏ó\n"
                    
                    if avg_job_value:
                        avg_num = float(avg_job_value)
                        response += f"üìà ‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏ï‡πà‡∏≠‡∏á‡∏≤‡∏ô: {avg_num:,.0f} ‡∏ö‡∏≤‡∏ó\n"
                except:
                    pass
        else:
            # ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏´‡∏•‡∏≤‡∏¢‡πÅ‡∏ñ‡∏ß
            for i, result in enumerate(results[:5], 1):
                response += f"{i}. "
                for key, value in result.items():
                    if value is not None:
                        if isinstance(value, (int, float)):
                            if 'revenue' in key.lower() or 'value' in key.lower():
                                response += f"{key}: {value:,.0f} ‡∏ö‡∏≤‡∏ó | "
                            else:
                                response += f"{key}: {value:,} | "
                        else:
                            response += f"{key}: {value} | "
                response = response.rstrip(" | ") + "\n"
        
        return response
    
    def _format_general_results(self, question: str, results: List[Dict]) -> str:
        """üìã ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ"""
        
        response = f"üîç ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤: {question}\n\n"
        
        for i, result in enumerate(results[:10], 1):
            response += f"{i}. "
            
            # ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏°‡∏≤‡πÅ‡∏™‡∏î‡∏á
            important_data = []
            
            for key, value in result.items():
                if value and str(value).strip():
                    # ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
                    if key.lower() in ['name', 'customer', 'customer_name', 'product_name']:
                        important_data.append(str(value))
                    elif key.lower() in ['price', 'cost', 'service_contact_', 'unit_price'] and str(value).replace('.', '').replace(',', '').isdigit():
                        try:
                            price_num = float(str(value).replace(',', ''))
                            important_data.append(f"{price_num:,.0f} ‡∏ö‡∏≤‡∏ó")
                        except:
                            important_data.append(str(value))
                    elif len(important_data) < 3:  # ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÅ‡∏™‡∏î‡∏á
                        important_data.append(str(value))
            
            response += " | ".join(important_data[:3])
            response += "\n"
        
        response += f"\nüìà ‡∏™‡∏£‡∏∏‡∏õ: ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå {min(len(results), 10)} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏à‡∏≤‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î {len(results)} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£"
        
        return response
    
    # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÉ‡∏ô advanced_dynamic_ai_system.py

    async def _create_smart_spare_parts_suggestions(self, question: str, target_tables: List[str], 
                                                tenant_id: str) -> str:
        """üí° ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Ñ‡∏≥‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏≠‡∏∞‡πÑ‡∏´‡∏•‡πà‡∏≠‡∏±‡∏à‡∏â‡∏£‡∏¥‡∏¢‡∏∞‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏£‡∏¥‡∏á"""
        
        try:
            # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏£‡∏¥‡∏á‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
            main_table = target_tables[0] if target_tables else 'spare_part'
            
            # ‡∏î‡∏∂‡∏á‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á product_name ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ã‡πâ‡∏≥
            sample_query = f"""
                SELECT DISTINCT product_name, unit_price, description 
                FROM {main_table} 
                WHERE product_name IS NOT NULL 
                ORDER BY product_name 
                LIMIT 15
            """
            
            results = await self.db_handler._execute_sql_unified(sample_query, tenant_id)
            
            if not results:
                return "üîç ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏∞‡πÑ‡∏´‡∏•‡πà‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö"
            
            response = f"üîç ‡πÑ‡∏°‡πà‡∏û‡∏ö 'Hitachi' ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏≠‡∏∞‡πÑ‡∏´‡∏•‡πà\n\n"
            response += "üîß **‡∏≠‡∏∞‡πÑ‡∏´‡∏•‡πà‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏à‡∏£‡∏¥‡∏á‡πÉ‡∏ô‡∏™‡∏ï‡πá‡∏≠‡∏Å:**\n\n"
            
            # ‡∏à‡∏±‡∏î‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏≠‡∏∞‡πÑ‡∏´‡∏•‡πà‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó
            categories = {
                'MOTOR': [],
                'CIRCUIT BOARD': [],
                'SENSOR': [],
                'TRANSFORMER': [],
                'OTHER': []
            }
            
            for item in results:
                product_name = item.get('product_name', '')
                unit_price = item.get('unit_price', '')
                description = item.get('description', '')
                
                # ‡∏à‡∏±‡∏î‡∏Å‡∏•‡∏∏‡πà‡∏°
                if 'MOTOR' in product_name.upper():
                    categories['MOTOR'].append({
                        'name': product_name,
                        'price': unit_price,
                        'desc': description
                    })
                elif 'CIRCUIT BOARD' in product_name.upper() or 'BOARD' in product_name.upper():
                    categories['CIRCUIT BOARD'].append({
                        'name': product_name,
                        'price': unit_price,
                        'desc': description
                    })
                elif 'SENSOR' in product_name.upper():
                    categories['SENSOR'].append({
                        'name': product_name,
                        'price': unit_price,
                        'desc': description
                    })
                elif 'TRANSFORMER' in product_name.upper():
                    categories['TRANSFORMER'].append({
                        'name': product_name,
                        'price': unit_price,
                        'desc': description
                    })
                else:
                    categories['OTHER'].append({
                        'name': product_name,
                        'price': unit_price,
                        'desc': description
                    })
            
            # ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó
            for category, items in categories.items():
                if items:
                    response += f"**{category}:**\n"
                    for item in items[:3]:  # ‡πÅ‡∏™‡∏î‡∏á‡πÅ‡∏Ñ‡πà 3 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÅ‡∏£‡∏Å
                        name = item['name']
                        price = item['price']
                        desc = item['desc'][:50] + "..." if len(item['desc']) > 50 else item['desc']
                        
                        response += f"‚Ä¢ {name}"
                        if price and str(price).replace('.', '').replace(',', '').isdigit():
                            try:
                                price_num = float(str(price).replace(',', ''))
                                response += f" - {price_num:,.0f} ‡∏ö‡∏≤‡∏ó"
                            except:
                                pass
                        response += f"\n  {desc}\n"
                    
                    response += "\n"
            
            # ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Ñ‡∏≥‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ó‡∏µ‡πà‡∏ô‡πà‡∏≤‡∏à‡∏∞‡πÑ‡∏î‡πâ‡∏ú‡∏•
            response += "üí° **‡∏•‡∏≠‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡∏≥‡πÄ‡∏´‡∏•‡πà‡∏≤‡∏ô‡∏µ‡πâ:**\n"
            
            suggestions = []
            if categories['MOTOR']:
                suggestions.append('"‡∏£‡∏≤‡∏Ñ‡∏≤‡∏≠‡∏∞‡πÑ‡∏´‡∏•‡πà MOTOR"')
            if categories['CIRCUIT BOARD']:
                suggestions.append('"‡∏£‡∏≤‡∏Ñ‡∏≤‡∏≠‡∏∞‡πÑ‡∏´‡∏•‡πà Circuit Board"')
            if categories['SENSOR']:
                suggestions.append('"‡∏£‡∏≤‡∏Ñ‡∏≤‡∏≠‡∏∞‡πÑ‡∏´‡∏•‡πà Sensor"')
            if categories['TRANSFORMER']:
                suggestions.append('"‡∏£‡∏≤‡∏Ñ‡∏≤‡∏≠‡∏∞‡πÑ‡∏´‡∏•‡πà Transformer"')
            
            # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≥‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏à‡∏≤‡∏Å‡∏£‡∏∏‡πà‡∏ô‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á
            models = set()
            for item in results:
                desc = item.get('description', '')
                if 'SET FREE' in desc:
                    models.add('SET FREE')
                if 'RAS-24' in desc:
                    models.add('RAS-24')
            
            for model in models:
                suggestions.append(f'"‡∏≠‡∏∞‡πÑ‡∏´‡∏•‡πà {model}"')
            
            for suggestion in suggestions[:5]:
                response += f"‚Ä¢ {suggestion}\n"
            
            response += f"\nüìã ‡∏£‡∏ß‡∏° {len(results)} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏≠‡∏∞‡πÑ‡∏´‡∏•‡πà‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö"
            
            return response
            
        except Exception as e:
            logger.error(f"Failed to create smart suggestions: {e}")
            return "üîç ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏° ‡πÅ‡∏ï‡πà‡∏•‡∏≠‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡∏≥‡∏≠‡∏∑‡πà‡∏ô‡∏î‡∏π"

    # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï method ‡∏´‡∏•‡∏±‡∏Å‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ
    def _create_no_results_response(self, question: str, analysis: Dict[str, Any]) -> str:
        """üì≠ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• - ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏£‡∏¥‡∏á"""
        
        question_type = analysis.get('question_type', 'unknown')
        target_tables = analysis.get('target_tables', [])
        keywords = analysis.get('search_keywords', [])
        
        # ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏≠‡∏∞‡πÑ‡∏´‡∏•‡πà ‡πÉ‡∏´‡πâ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏£‡∏¥‡∏á
        if question_type == 'spare_parts_search' and 'hitachi' in [k.lower() for k in keywords]:
            # ‡πÉ‡∏ä‡πâ async function (‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏õ‡πÑ‡∏î‡πâ)
            return f"""üîç ‡πÑ‡∏°‡πà‡∏û‡∏ö 'Hitachi' ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏≠‡∏∞‡πÑ‡∏´‡∏•‡πà

    üí° **‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥:**
    ‚Ä¢ ‡∏•‡∏≠‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ "‡∏£‡∏≤‡∏Ñ‡∏≤‡∏≠‡∏∞‡πÑ‡∏´‡∏•‡πà MOTOR" 
    ‚Ä¢ ‡∏•‡∏≠‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ "‡∏£‡∏≤‡∏Ñ‡∏≤‡∏≠‡∏∞‡πÑ‡∏´‡∏•‡πà Circuit Board"
    ‚Ä¢ ‡∏•‡∏≠‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ "‡∏≠‡∏∞‡πÑ‡∏´‡∏•‡πà SET FREE"
    ‚Ä¢ ‡∏•‡∏≠‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ "‡∏£‡∏≤‡∏Ñ‡∏≤‡∏≠‡∏∞‡πÑ‡∏´‡∏•‡πà 17B29401A"

    üîß ‡∏´‡∏£‡∏∑‡∏≠‡∏•‡∏≠‡∏á‡∏ñ‡∏≤‡∏° "‡∏≠‡∏∞‡πÑ‡∏´‡∏•‡πà‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡∏°‡∏µ‡πÉ‡∏ô‡∏™‡∏ï‡πá‡∏≠‡∏Å" ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î

    üìã ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤: {', '.join(target_tables)}"""
        
        # ‡∏Å‡∏£‡∏ì‡∏µ‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡πÉ‡∏ä‡πâ response ‡πÄ‡∏î‡∏¥‡∏°
        response = f"üîç ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°: {question}\n\n"
        
        if keywords:
            response += f"üîç ‡∏Ñ‡∏≥‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤: {', '.join(keywords)}\n\n"
        
        response += "üí° ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ:\n"
        response += "‚Ä¢ ‡∏•‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏ó‡∏µ‡πà‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏à‡∏≤‡∏∞‡∏à‡∏á‡∏°‡∏≤‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô\n"
        response += "‚Ä¢ ‡∏•‡∏≠‡∏á‡∏ñ‡∏≤‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ‡∏Å‡πà‡∏≠‡∏ô ‡πÄ‡∏ä‡πà‡∏ô '‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏∞‡πÑ‡∏£‡∏ö‡πâ‡∏≤‡∏á'\n"
        
        return response
    
    async def _create_helpful_response(self, question: str, actual_schema: Dict[str, Any], 
                                     tenant_id: str) -> Dict[str, Any]:
        """üí° ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏ä‡∏ô‡πå‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á SQL ‡πÑ‡∏î‡πâ"""
        
        # ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏°‡∏µ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö
        available_tables = list(actual_schema.keys())
        
        answer = f"""ü§î ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏ô‡∏µ‡πâ‡πÑ‡∏î‡πâ: {question}

üìä ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏°‡∏µ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö:
"""
        
        for table_name, table_info in actual_schema.items():
            purpose = table_info.get('purpose', '‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö')
            row_count = table_info.get('row_count', 0)
            column_names = [col['name'] for col in table_info.get('columns', [])]
            
            answer += f"‚Ä¢ {table_name} ({row_count:,} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£)\n"
            answer += f"  ‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏õ‡∏£‡∏∞‡∏™‡∏á‡∏Ñ‡πå: {purpose}\n"
            answer += f"  ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏´‡∏•‡∏±‡∏Å: {', '.join(column_names[:5])}\n\n"
        
        answer += """üí° ‡∏•‡∏≠‡∏á‡∏ñ‡∏≤‡∏°‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÄ‡∏´‡∏•‡πà‡∏≤‡∏ô‡∏µ‡πâ:
‚Ä¢ "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"
‚Ä¢ "‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏≠‡∏∞‡πÑ‡∏´‡∏•‡πà‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î" 
‚Ä¢ "‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î"
‚Ä¢ "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á [‡∏ä‡∏∑‡πà‡∏≠‡∏ï‡∏≤‡∏£‡∏≤‡∏á]"
‚Ä¢ "‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏∞‡πÑ‡∏£‡∏ö‡πâ‡∏≤‡∏á‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö"
"""
        
        return {
            "answer": answer,
            "success": False,
            "data_source_used": "schema_exploration",
            "system_used": "helpful_response_generator",
            "available_tables": available_tables
        }


# ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏°‡∏ò‡∏≠‡∏î‡πÉ‡∏´‡∏°‡πà‡πÉ‡∏´‡πâ‡∏Å‡∏±‡∏ö existing agent
class EnhancedUnifiedPostgresOllamaAgent:
    """üöÄ ‡∏Ç‡∏¢‡∏≤‡∏¢ agent ‡πÄ‡∏î‡∏¥‡∏°‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ Dynamic AI ‡∏ó‡∏µ‡πà‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÅ‡∏•‡πâ‡∏ß"""
    
    def __init__(self):
        # Import ‡πÅ‡∏•‡∏∞ initialize ‡∏ï‡∏±‡∏ß‡πÄ‡∏î‡∏¥‡∏°
        from .enhanced_postgres_agent_unified import UnifiedEnhancedPostgresOllamaAgent as OriginalAgent
        
        # ‡πÄ‡∏Å‡πá‡∏ö properties ‡∏Ç‡∏≠‡∏á agent ‡πÄ‡∏î‡∏¥‡∏°
        original_agent = OriginalAgent()
        for attr_name in dir(original_agent):
            if not attr_name.startswith('_') or attr_name in ['_call_ollama_api', '_execute_sql_unified', 'get_database_connection']:
                setattr(self, attr_name, getattr(original_agent, attr_name))
        
        # ‡πÄ‡∏û‡∏¥‡πà‡∏° Dynamic AI system ‡∏ó‡∏µ‡πà‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÅ‡∏•‡πâ‡∏ß
        self.dynamic_ai_system = AdvancedDynamicAISystem(self, self)
        logger.info("üöÄ Enhanced agent with FIXED Dynamic AI capabilities initialized")
    
    async def process_any_question(self, question: str, tenant_id: str) -> Dict[str, Any]:
        """üéØ ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÉ‡∏î‡πÜ ‡∏î‡πâ‡∏ß‡∏¢ FIXED Dynamic AI"""
        return await self.dynamic_ai_system.process_any_question(question, tenant_id)
    
    async def process_enhanced_question_with_fallback(self, question: str, tenant_id: str) -> Dict[str, Any]:
        """üîÑ ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏î‡πâ‡∏ß‡∏¢ fallback ‡πÄ‡∏õ‡πá‡∏ô FIXED Dynamic AI"""
        
        # ‡∏•‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡∏ß‡∏¥‡∏ò‡∏µ‡πÄ‡∏î‡∏¥‡∏°‡∏Å‡πà‡∏≠‡∏ô
        try:
            result = await self.process_enhanced_question(question, tenant_id)
            
            # ‡∏´‡∏≤‡∏Å‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÑ‡∏°‡πà‡∏î‡∏µ‡∏û‡∏≠ ‡πÉ‡∏ä‡πâ Dynamic AI
            if (not result.get('success') or 
                not result.get('answer') or 
                '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ' in result.get('answer', '') or
                '‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢' in result.get('answer', '')):
                
                logger.info("üîÑ Falling back to FIXED Dynamic AI system")
                return await self.dynamic_ai_system.process_any_question(question, tenant_id)
            
            return result
            
        except Exception as e:
            logger.error(f"‚ùå Standard processing failed, using FIXED Dynamic AI: {e}")
            return await self.dynamic_ai_system.process_any_question(question, tenant_id)