# refactored_modules/intelligent_schema_discovery.py
# üîß ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à HVAC Service & Spare Parts

import time
import re
from typing import Dict, List, Any, Optional, Tuple
import logging
from datetime import datetime

logger = logging.getLogger(__name__)

class IntelligentSchemaDiscovery:
    """üß† Intelligent Schema Discovery ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à HVAC"""
    
    def __init__(self, database_handler):
        self.db_handler = database_handler
        
        # ‡πÄ‡∏Å‡πá‡∏ö cache ‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡πÅ‡∏•‡πâ‡∏ß
        self.learned_schemas = {
            'customers': {},
            'spare_parts': {},
            'services': {},
            'work_schedules': {}
        }
        
        # HVAC Business Knowledge Base (‡πÅ‡∏ó‡∏ô metadata ‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•)
        self.hvac_knowledge_base = {
            'table_purposes': {
                'sales2024': '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢‡πÅ‡∏•‡∏∞‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏õ‡∏µ 2024',
                'sales2023': '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢‡πÅ‡∏•‡∏∞‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏õ‡∏µ 2023', 
                'sales2022': '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢‡πÅ‡∏•‡∏∞‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏õ‡∏µ 2022',
                'sales2025': '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢‡πÅ‡∏•‡∏∞‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏õ‡∏µ 2025',
                'spare_part': '‡∏Ñ‡∏•‡∏±‡∏á‡∏≠‡∏∞‡πÑ‡∏´‡∏•‡πà‡∏´‡∏•‡∏±‡∏Å',
                'spare_part2': '‡∏Ñ‡∏•‡∏±‡∏á‡∏≠‡∏∞‡πÑ‡∏´‡∏•‡πà‡∏™‡∏≥‡∏£‡∏≠‡∏á',
                'work_force': '‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏ó‡∏µ‡∏°‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡∏∞‡πÅ‡∏ú‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô'
            },
            
            'column_meanings': {
                'job_no': '‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏á‡∏≤‡∏ô ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö SV.‡∏õ‡∏µ-‡πÄ‡∏î‡∏∑‡∏≠‡∏ô-‡∏•‡∏≥‡∏î‡∏±‡∏ö-‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó',
                'customer_name': '‡∏ä‡∏∑‡πà‡∏≠‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÄ‡∏ï‡πá‡∏°',
                'customer': '‡∏ä‡∏∑‡πà‡∏≠‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÅ‡∏ö‡∏ö‡∏¢‡πà‡∏≠',
                'description': '‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏á‡∏≤‡∏ô‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£',
                'service_contact_': '‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤‡∏á‡∏≤‡∏ô‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£ (‡∏´‡∏ô‡πà‡∏ß‡∏¢: ‡∏ö‡∏≤‡∏ó)',
                'overhaul_': '‡∏á‡∏≤‡∏ô‡∏¢‡∏Å‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á/‡∏ã‡πà‡∏≠‡∏°‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÉ‡∏´‡∏ç‡πà',
                'replacement': '‡∏á‡∏≤‡∏ô‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ä‡∏¥‡πâ‡∏ô‡∏™‡πà‡∏ß‡∏ô',
                'product_code': '‡∏£‡∏´‡∏±‡∏™‡∏≠‡∏∞‡πÑ‡∏´‡∏•‡πà‡∏Ç‡∏≠‡∏á‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó',
                'product_name': '‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏∞‡πÑ‡∏´‡∏•‡πà‡∏†‡∏≤‡∏©‡∏≤‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©',
                'unit_price': '‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πà‡∏≠‡∏´‡∏ô‡πà‡∏ß‡∏¢ (‡∏ö‡∏≤‡∏ó)',
                'balance': '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÉ‡∏ô‡∏™‡∏ï‡πá‡∏≠‡∏Å',
                'wh': '‡∏£‡∏´‡∏±‡∏™‡∏Ñ‡∏•‡∏±‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤',
                'date': '‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô',
                'project': '‡∏ä‡∏∑‡πà‡∏≠‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ/‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà',
                'detail': '‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏á‡∏≤‡∏ô‡πÄ‡∏â‡∏û‡∏≤‡∏∞',
                'service_group': '‡∏ä‡∏∑‡πà‡∏≠‡∏ó‡∏µ‡∏°‡∏ä‡πà‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ö‡∏ú‡∏¥‡∏î‡∏ä‡∏≠‡∏ö',
                'job_description_pm': '‡∏á‡∏≤‡∏ô Preventive Maintenance',
                'job_description_replacement': '‡∏á‡∏≤‡∏ô‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ä‡∏¥‡πâ‡∏ô‡∏™‡πà‡∏ß‡∏ô'
            },
            
            'business_patterns': {
                'job_number_format': 'SV.{year}-{month}-{sequence}-{type}',
                'service_types': ['PM', 'Repair', 'Replacement', 'Overhaul', 'Installation'],
                'brands': ['Hitachi', 'Daikin', 'EuroKlimat', 'Toyota', 'Mitsubishi', 'York', 'Carrier'],
                'customer_types': ['‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó', '‡∏Å‡∏≤‡∏£‡πÑ‡∏ü‡∏ü‡πâ‡∏≤', '‡πÇ‡∏£‡∏á‡πÅ‡∏£‡∏°', '‡πÇ‡∏£‡∏á‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•', '‡πÇ‡∏£‡∏á‡∏á‡∏≤‡∏ô'],
                'technical_terms': {
                    'Chiller': '‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ó‡∏≥‡∏ô‡πâ‡∏≥‡πÄ‡∏¢‡πá‡∏ô',
                    'Compressor': '‡∏Ñ‡∏≠‡∏°‡πÄ‡∏û‡∏£‡∏™‡πÄ‡∏ã‡∏≠‡∏£‡πå',
                    'PM': 'Preventive Maintenance',
                    'Air Cooled': '‡∏£‡∏∞‡∏ö‡∏≤‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡πâ‡∏≠‡∏ô‡∏î‡πâ‡∏ß‡∏¢‡∏≠‡∏≤‡∏Å‡∏≤‡∏®',
                    'Water Cooled': '‡∏£‡∏∞‡∏ö‡∏≤‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡πâ‡∏≠‡∏ô‡∏î‡πâ‡∏ß‡∏¢‡∏ô‡πâ‡∏≥',
                    'RCUA': 'Roof Top Unit Air Cooled',
                    'Set Free': '‡∏£‡∏∞‡∏ö‡∏ö VRF',
                    'FTG': 'Floor Type Gas',
                    'EKAC': 'EuroKlimat Air Cooled'
                }
            },
            
            'query_templates': {
                'customer_count': 'SELECT COUNT(DISTINCT customer_name) FROM sales{year}',
                'customer_history': '''
                    SELECT job_no, description, service_contact_ 
                    FROM sales{year} 
                    WHERE customer_name ILIKE '%{customer}%'
                ''',
                'spare_parts_search': '''
                    SELECT product_code, product_name, unit_price, balance, description
                    FROM spare_part 
                    WHERE product_name ILIKE '%{keyword}%' 
                    OR description ILIKE '%{keyword}%'
                ''',
                'work_schedule': '''
                    SELECT customer, detail, service_group,
                           CASE WHEN job_description_pm THEN 'PM'
                                WHEN job_description_replacement THEN 'Replacement'
                                ELSE 'Other' END as job_type
                    FROM work_force 
                    WHERE date = '{date}'
                ''',
                'sales_analysis': '''
                    SELECT 
                        COUNT(*) as total_jobs,
                        SUM(service_contact_) as total_revenue,
                        AVG(service_contact_) as avg_job_value
                    FROM sales{year}
                    WHERE service_contact_ > 0
                '''
            }
        }
        
        self.cache_timestamps = {}
        self.cache_duration = 1800  # 30 ‡∏ô‡∏≤‡∏ó‡∏µ
        
        logger.info("üß† HVAC Intelligent Schema Discovery system initialized")
    
    async def get_contextual_schema(self, question: str, tenant_id: str) -> Dict[str, Any]:
        """üéØ Main function - ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à HVAC"""
        
        # ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 1: ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏ï‡∏≤‡∏°‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à HVAC
        question_analysis = self._analyze_hvac_question_deeply(question)
        logger.info(f"üîç HVAC Question analysis: {question_analysis}")
        
        # ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 2: ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö HVAC
        required_data = await self._gather_hvac_required_data(tenant_id, question_analysis)
        
        # ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 3: ‡∏™‡∏£‡πâ‡∏≤‡∏á schema context ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö HVAC
        contextual_schema = self._build_hvac_intelligent_context(question_analysis, required_data, tenant_id)
        
        return contextual_schema
    
    def _analyze_hvac_question_deeply(self, question: str) -> Dict[str, Any]:
        """üîç ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÄ‡∏ä‡∏¥‡∏á‡∏•‡∏∂‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à HVAC"""
        
        question_lower = question.lower()
        
        analysis_result = {
            'question_type': 'unknown',
            'hvac_entities': [],
            'target_tables': [],
            'business_context': '',
            'time_range': None,
            'customer_mentioned': None,
            'brand_mentioned': [],
            'service_type': None,
            'needs_aggregation': False,
            'confidence_level': 0.0
        }
        
        # ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏´‡∏•‡∏±‡∏Å
        if any(word in question_lower for word in ['‡∏à‡∏≥‡∏ô‡∏ß‡∏ô', '‡∏Å‡∏µ‡πà', 'count', '‡∏ô‡∏±‡∏ö']):
            analysis_result['question_type'] = 'counting'
            analysis_result['needs_aggregation'] = True
            analysis_result['confidence_level'] += 0.4
        
        elif any(word in question_lower for word in ['‡∏£‡∏≤‡∏Ñ‡∏≤', 'price', '‡∏≠‡∏∞‡πÑ‡∏´‡∏•‡πà', 'spare']):
            analysis_result['question_type'] = 'spare_parts_inquiry'
            analysis_result['target_tables'] = ['spare_part', 'spare_part2']
            analysis_result['confidence_level'] += 0.4
        
        elif any(word in question_lower for word in ['‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥', 'history', '‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á', '‡∏°‡∏µ‡∏Å‡∏≤‡∏£']):
            analysis_result['question_type'] = 'customer_history'
            analysis_result['target_tables'] = ['sales2024', 'sales2023', 'sales2022']
            analysis_result['confidence_level'] += 0.4
        
        elif any(word in question_lower for word in ['‡πÅ‡∏ú‡∏ô‡∏á‡∏≤‡∏ô', 'schedule', '‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà', '‡∏á‡∏≤‡∏ô']):
            analysis_result['question_type'] = 'work_schedule'
            analysis_result['target_tables'] = ['work_force']
            analysis_result['confidence_level'] += 0.4
        
        elif any(word in question_lower for word in ['‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢', '‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå', '‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô', '‡∏™‡∏£‡∏∏‡∏õ']):
            analysis_result['question_type'] = 'sales_analysis'
            analysis_result['target_tables'] = ['sales2024', 'sales2023', 'sales2022']
            analysis_result['needs_aggregation'] = True
            analysis_result['confidence_level'] += 0.4
        
        # ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤
        year_patterns = ['2567', '2568', '2022', '2023', '2024', '2025']
        for year in year_patterns:
            if year in question:
                analysis_result['time_range'] = year
                if year in ['2567', '2568']:  # ‡πÅ‡∏õ‡∏•‡∏á‡∏õ‡∏µ ‡∏û.‡∏®. ‡πÄ‡∏õ‡πá‡∏ô ‡∏Ñ.‡∏®.
                    analysis_result['time_range'] = str(int(year) - 543)
                break
        
        # ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Å‡∏≤‡∏£‡∏£‡∏∞‡∏ö‡∏∏‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤
        if any(word in question_lower for word in ['‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó', 'company']):
            # ‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡∏î‡∏∂‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó‡∏à‡∏≤‡∏Å‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°
            company_pattern = r'‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó\s*([^‡∏°]+?)(?:\s|$)'
            match = re.search(company_pattern, question)
            if match:
                analysis_result['customer_mentioned'] = match.group(1).strip()
        
        # ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÅ‡∏ö‡∏£‡∏ô‡∏î‡πå‡∏ó‡∏µ‡πà‡∏Å‡∏•‡πà‡∏≤‡∏ß‡∏ñ‡∏∂‡∏á
        for brand in self.hvac_knowledge_base['business_patterns']['brands']:
            if brand.lower() in question_lower:
                analysis_result['brand_mentioned'].append(brand)
        
        # ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£
        for service in self.hvac_knowledge_base['business_patterns']['service_types']:
            if service.lower() in question_lower:
                analysis_result['service_type'] = service
                break
        
        # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ö‡∏£‡∏¥‡∏ö‡∏ó‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à
        if analysis_result['question_type'] == 'spare_parts_inquiry':
            analysis_result['business_context'] = '‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏≠‡∏∞‡πÑ‡∏´‡∏•‡πà‡πÅ‡∏•‡∏∞‡∏£‡∏≤‡∏Ñ‡∏≤'
        elif analysis_result['question_type'] == 'customer_history':
            analysis_result['business_context'] = '‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤'
        elif analysis_result['question_type'] == 'work_schedule':
            analysis_result['business_context'] = '‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡πÅ‡∏ú‡∏ô‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡∏∞‡∏ó‡∏µ‡∏°'
        elif analysis_result['question_type'] == 'sales_analysis':
            analysis_result['business_context'] = '‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢'
        
        return analysis_result
    
    async def _gather_hvac_required_data(self, tenant_id: str, analysis: Dict[str, Any]) -> Dict[str, Any]:
        """üìä ‡∏£‡∏ß‡∏ö‡∏£‡∏ß‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö HVAC"""
        
        required_data = {}
        
        try:
            # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏´‡∏≤‡∏Å‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
            if analysis['question_type'] in ['customer_history', 'counting']:
                required_data['customers'] = await self._get_hvac_customer_data(tenant_id, analysis)
            
            # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏∞‡πÑ‡∏´‡∏•‡πà‡∏´‡∏≤‡∏Å‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
            if analysis['question_type'] == 'spare_parts_inquiry':
                required_data['spare_parts'] = await self._get_spare_parts_data(tenant_id, analysis)
            
            # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡∏°‡∏á‡∏≤‡∏ô‡∏´‡∏≤‡∏Å‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
            if analysis['question_type'] == 'work_schedule':
                required_data['work_teams'] = await self._get_work_team_data(tenant_id, analysis)
            
            # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢‡∏´‡∏≤‡∏Å‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
            if analysis['question_type'] == 'sales_analysis':
                required_data['sales_stats'] = await self._get_sales_statistics(tenant_id, analysis)
        
        except Exception as e:
            logger.error(f"Failed to gather HVAC required data: {e}")
            required_data = self._get_hvac_fallback_data()
        
        return required_data
    
    async def _get_hvac_customer_data(self, tenant_id: str, analysis: Dict[str, Any]) -> Dict[str, Any]:
        """üë• ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö HVAC"""
        
        try:
            conn = self.db_handler.get_database_connection(tenant_id)
            cursor = conn.cursor()
            
            # ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ã‡πâ‡∏≥
            cursor.execute("""
                SELECT DISTINCT customer_name 
                FROM sales2024 
                WHERE customer_name IS NOT NULL 
                AND customer_name != ''
                ORDER BY customer_name
                LIMIT 50
            """)
            
            customers = [row[0] for row in cursor.fetchall()]
            
            cursor.close()
            conn.close()
            
            return {
                'all_customers': customers,
                'customer_count': len(customers),
                'has_customer_data': len(customers) > 0
            }
            
        except Exception as e:
            logger.error(f"Failed to get customer data: {e}")
            return {'all_customers': [], 'customer_count': 0, 'has_customer_data': False}
    
    async def _get_spare_parts_data(self, tenant_id: str, analysis: Dict[str, Any]) -> Dict[str, Any]:
        """üîß ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏∞‡πÑ‡∏´‡∏•‡πà"""
        
        try:
            conn = self.db_handler.get_database_connection(tenant_id)
            cursor = conn.cursor()
            
            # ‡∏î‡∏∂‡∏á‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏≠‡∏∞‡πÑ‡∏´‡∏•‡πà‡πÅ‡∏•‡∏∞‡πÅ‡∏ö‡∏£‡∏ô‡∏î‡πå
            cursor.execute("""
                SELECT DISTINCT 
                    CASE 
                        WHEN product_name ILIKE '%MOTOR%' THEN 'MOTOR'
                        WHEN product_name ILIKE '%BOARD%' THEN 'CIRCUIT_BOARD'
                        WHEN product_name ILIKE '%TRANSFORMER%' THEN 'TRANSFORMER'
                        WHEN product_name ILIKE '%FAN%' THEN 'FAN'
                        ELSE 'OTHER'
                    END as part_category,
                    product_name
                FROM spare_part 
                WHERE product_name IS NOT NULL
                LIMIT 30
            """)
            
            parts_data = cursor.fetchall()
            
            cursor.close()
            conn.close()
            
            categories = list(set([row[0] for row in parts_data]))
            sample_parts = [row[1] for row in parts_data[:10]]
            
            return {
                'part_categories': categories,
                'sample_parts': sample_parts,
                'has_parts_data': len(parts_data) > 0
            }
            
        except Exception as e:
            logger.error(f"Failed to get spare parts data: {e}")
            return {'part_categories': [], 'sample_parts': [], 'has_parts_data': False}
    
    async def _get_work_team_data(self, tenant_id: str, analysis: Dict[str, Any]) -> Dict[str, Any]:
        """üë∑ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡∏°‡∏á‡∏≤‡∏ô"""
        
        try:
            conn = self.db_handler.get_database_connection(tenant_id)
            cursor = conn.cursor()
            
            # ‡∏î‡∏∂‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏ó‡∏µ‡∏°‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏á‡∏≤‡∏ô
            cursor.execute("""
                SELECT DISTINCT service_group
                FROM work_force 
                WHERE service_group IS NOT NULL 
                AND service_group != ''
                ORDER BY service_group
                LIMIT 20
            """)
            
            teams = [row[0] for row in cursor.fetchall()]
            
            cursor.close()
            conn.close()
            
            return {
                'available_teams': teams,
                'team_count': len(teams),
                'has_team_data': len(teams) > 0
            }
            
        except Exception as e:
            logger.error(f"Failed to get work team data: {e}")
            return {'available_teams': [], 'team_count': 0, 'has_team_data': False}
    
    async def _get_sales_statistics(self, tenant_id: str, analysis: Dict[str, Any]) -> Dict[str, Any]:
        """üìä ‡∏î‡∏∂‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢"""
        
        try:
            conn = self.db_handler.get_database_connection(tenant_id)
            cursor = conn.cursor()
            
            # ‡∏î‡∏∂‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô
            cursor.execute("""
                SELECT 
                    COUNT(*) as job_count,
                    COUNT(DISTINCT customer_name) as customer_count,
                    AVG(service_contact_::numeric) as avg_value,
                    SUM(service_contact_::numeric) as total_value
                FROM sales2024 
                WHERE service_contact_::numeric > 0
            """)
            
            stats = cursor.fetchone()
            
            cursor.close()
            conn.close()
            
            return {
                'total_jobs': stats[0] if stats else 0,
                'unique_customers': stats[1] if stats else 0,
                'average_job_value': float(stats[2]) if stats and stats[2] else 0,
                'total_revenue': float(stats[3]) if stats and stats[3] else 0,
                'has_sales_data': stats and stats[0] > 0
            }
            
        except Exception as e:
            logger.error(f"Failed to get sales statistics: {e}")
            return {'total_jobs': 0, 'unique_customers': 0, 'average_job_value': 0, 'total_revenue': 0, 'has_sales_data': False}
    
    def _get_hvac_fallback_data(self) -> Dict[str, Any]:
        """üîÑ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• fallback ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö HVAC"""
        return {
            'customers': {'all_customers': [], 'has_customer_data': False},
            'spare_parts': {'part_categories': ['MOTOR', 'CIRCUIT_BOARD', 'FAN'], 'has_parts_data': True},
            'work_teams': {'available_teams': ['‡∏ó‡∏µ‡∏°‡∏ä‡πà‡∏≤‡∏á A', '‡∏ó‡∏µ‡∏°‡∏ä‡πà‡∏≤‡∏á B'], 'has_team_data': True},
            'sales_stats': {'has_sales_data': False}
        }
    
    def _build_hvac_intelligent_context(self, analysis: Dict[str, Any], 
                                       required_data: Dict[str, Any], tenant_id: str) -> Dict[str, Any]:
        """üéØ ‡∏™‡∏£‡πâ‡∏≤‡∏á context ‡∏ó‡∏µ‡πà‡∏ä‡∏≤‡∏ç‡∏â‡∏•‡∏≤‡∏î‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö HVAC"""
        
        context = {
            'schema_type': 'hvac_intelligent_contextual',
            'question_analysis': analysis,
            'discovered_at': datetime.now().isoformat(),
            'tenant_id': tenant_id,
            'hvac_guidance': {},
            'business_data': {},
            'query_hints': []
        }
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°
        if analysis['question_type'] == 'counting':
            context['hvac_guidance'] = {
                'query_type': 'COUNT aggregation for HVAC business',
                'sql_hints': [
                    '‡πÉ‡∏ä‡πâ COUNT(DISTINCT customer_name) ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ô‡∏±‡∏ö‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤',
                    '‡πÉ‡∏ä‡πâ COUNT(*) ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏á‡∏≤‡∏ô',
                    '‡∏£‡∏∞‡∏ß‡∏±‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ã‡πâ‡∏≥‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤'
                ],
                'recommended_tables': ['sales2024']
            }
        
        elif analysis['question_type'] == 'spare_parts_inquiry':
            context['hvac_guidance'] = {
                'query_type': 'Spare parts search and pricing',
                'sql_hints': [
                    '‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÉ‡∏ô product_name ‡πÅ‡∏•‡∏∞ description',
                    '‡πÉ‡∏ä‡πâ ILIKE ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏™‡∏ô‡πÉ‡∏à‡∏ï‡∏±‡∏ß‡πÉ‡∏´‡∏ç‡πà‡πÄ‡∏•‡πá‡∏Å',
                    '‡∏£‡∏ß‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å spare_part ‡πÅ‡∏•‡∏∞ spare_part2 ‡∏´‡∏≤‡∏Å‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô'
                ],
                'recommended_tables': ['spare_part', 'spare_part2']
            }
        
        elif analysis['question_type'] == 'customer_history':
            context['hvac_guidance'] = {
                'query_type': 'Customer service history across years',
                'sql_hints': [
                    '‡πÉ‡∏ä‡πâ UNION ALL ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏ß‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏•‡∏≤‡∏¢‡∏õ‡∏µ',
                    '‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏î‡πâ‡∏ß‡∏¢ ILIKE \'%customer_name%\'',
                    '‡πÅ‡∏™‡∏î‡∏á job_no, description, ‡πÅ‡∏•‡∏∞ service_contact_'
                ],
                'recommended_tables': analysis['target_tables']
            }
        
        elif analysis['question_type'] == 'work_schedule':
            context['hvac_guidance'] = {
                'query_type': 'Work planning and team assignment',
                'sql_hints': [
                    '‡πÉ‡∏ä‡πâ CASE WHEN ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏õ‡∏•‡∏á boolean ‡πÄ‡∏õ‡πá‡∏ô‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏á‡∏≤‡∏ô',
                    '‡∏Å‡∏£‡∏≠‡∏á‡∏ï‡∏≤‡∏°‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏´‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏∏',
                    '‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡∏°‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡∏∞‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏á‡∏≤‡∏ô'
                ],
                'recommended_tables': ['work_force']
            }
        
        elif analysis['question_type'] == 'sales_analysis':
            context['hvac_guidance'] = {
                'query_type': 'Sales performance analysis',
                'sql_hints': [
                    '‡πÉ‡∏ä‡πâ SUM(service_contact_) ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢',
                    '‡πÉ‡∏ä‡πâ GROUP BY ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏ö‡πà‡∏á‡∏ï‡∏≤‡∏°‡∏õ‡∏µ/‡πÄ‡∏î‡∏∑‡∏≠‡∏ô',
                    '‡∏Å‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà service_contact_ > 0'
                ],
                'recommended_tables': analysis['target_tables']
            }
        
        # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á
        if 'customers' in required_data and required_data['customers']['has_customer_data']:
            context['business_data']['available_customers'] = required_data['customers']['all_customers'][:10]
        
        if 'spare_parts' in required_data and required_data['spare_parts']['has_parts_data']:
            context['business_data']['part_categories'] = required_data['spare_parts']['part_categories']
        
        if 'work_teams' in required_data and required_data['work_teams']['has_team_data']:
            context['business_data']['available_teams'] = required_data['work_teams']['available_teams']
        
        # ‡πÄ‡∏û‡∏¥‡πà‡∏° query hints ‡πÄ‡∏â‡∏û‡∏≤‡∏∞
        if analysis['time_range']:
            context['query_hints'].append(f"‡πÄ‡∏ô‡πâ‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏µ {analysis['time_range']}")
        
        if analysis['customer_mentioned']:
            context['query_hints'].append(f"‡πÄ‡∏ô‡πâ‡∏ô‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤: {analysis['customer_mentioned']}")
        
        if analysis['brand_mentioned']:
            context['query_hints'].append(f"‡πÄ‡∏ô‡πâ‡∏ô‡πÅ‡∏ö‡∏£‡∏ô‡∏î‡πå: {', '.join(analysis['brand_mentioned'])}")
        
        return context


class IntelligentPromptBuilder:
    """üé® ‡∏™‡∏£‡πâ‡∏≤‡∏á Prompt ‡∏≠‡∏±‡∏à‡∏â‡∏£‡∏¥‡∏¢‡∏∞‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö HVAC"""
    
    def __init__(self, tenant_configs):
        self.tenant_configs = tenant_configs
        logger.info("üé® HVAC Intelligent Prompt Builder initialized")
    
    def build_contextual_prompt(self, question: str, tenant_id: str, 
                              intelligence_context: Dict[str, Any]) -> str:
        """üéØ ‡∏™‡∏£‡πâ‡∏≤‡∏á prompt ‡∏ó‡∏µ‡πà‡∏ä‡∏≤‡∏ç‡∏â‡∏•‡∏≤‡∏î‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö HVAC"""
        
        config = self.tenant_configs.get(tenant_id)
        if not config:
            return self._create_fallback_prompt(question, tenant_id)
        
        analysis = intelligence_context.get('question_analysis', {})
        guidance = intelligence_context.get('hvac_guidance', {})
        business_data = intelligence_context.get('business_data', {})
        
        prompt_sections = []
        
        # ‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà 1: ‡∏ö‡∏£‡∏¥‡∏ö‡∏ó‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó HVAC
        prompt_sections.append(f"‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠ PostgreSQL Expert ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à HVAC - {config.name}")
        prompt_sections.append("")
        
        # ‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà 2: ‡∏ö‡∏£‡∏¥‡∏ö‡∏ó‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à HVAC
        hvac_context = self._get_hvac_business_context(tenant_id)
        prompt_sections.append(hvac_context)
        prompt_sections.append("")
        
        # ‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà 3: ‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• HVAC
        prompt_sections.append("üìä ‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• HVAC:")
        prompt_sections.append("‚Ä¢ sales2024, sales2023, sales2022, sales2025: ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏á‡∏≤‡∏ô‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏£‡∏≤‡∏¢‡∏õ‡∏µ")
        prompt_sections.append("  - job_no: ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏á‡∏≤‡∏ô (SV.‡∏õ‡∏µ-‡πÄ‡∏î‡∏∑‡∏≠‡∏ô-‡∏•‡∏≥‡∏î‡∏±‡∏ö-‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó)")
        prompt_sections.append("  - customer_name: ‡∏ä‡∏∑‡πà‡∏≠‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÄ‡∏ï‡πá‡∏°") 
        prompt_sections.append("  - description: ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏á‡∏≤‡∏ô‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£")
        prompt_sections.append("  - service_contact_: ‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤‡∏á‡∏≤‡∏ô (‡∏ö‡∏≤‡∏ó)")
        prompt_sections.append("‚Ä¢ spare_part, spare_part2: ‡∏Ñ‡∏•‡∏±‡∏á‡∏≠‡∏∞‡πÑ‡∏´‡∏•‡πà")
        prompt_sections.append("  - product_code: ‡∏£‡∏´‡∏±‡∏™‡∏≠‡∏∞‡πÑ‡∏´‡∏•‡πà, product_name: ‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏∞‡πÑ‡∏´‡∏•‡πà")
        prompt_sections.append("  - unit_price: ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πà‡∏≠‡∏´‡∏ô‡πà‡∏ß‡∏¢, balance: ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠")
        prompt_sections.append("‚Ä¢ work_force: ‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏ó‡∏µ‡∏°‡∏á‡∏≤‡∏ô")
        prompt_sections.append("  - date: ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô, customer: ‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤, service_group: ‡∏ó‡∏µ‡∏°‡∏ä‡πà‡∏≤‡∏á")
        prompt_sections.append("")
        
        # ‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà 4: ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á
        if business_data:
            prompt_sections.append("üéØ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á:")
            
            if 'available_customers' in business_data:
                customers = "', '".join(business_data['available_customers'][:5])
                prompt_sections.append(f"üë• ‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á: '{customers}'")
            
            if 'part_categories' in business_data:
                categories = "', '".join(business_data['part_categories'])
                prompt_sections.append(f"üîß ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏≠‡∏∞‡πÑ‡∏´‡∏•‡πà: '{categories}'")
            
            if 'available_teams' in business_data:
                teams = "', '".join(business_data['available_teams'][:3])
                prompt_sections.append(f"üë∑ ‡∏ó‡∏µ‡∏°‡∏á‡∏≤‡∏ô: '{teams}'")
            
            prompt_sections.append("")
        
        # ‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà 5: ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÄ‡∏â‡∏û‡∏≤‡∏∞ HVAC
        if guidance:
            prompt_sections.append("üéØ ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏ô‡∏µ‡πâ:")
            
            if 'query_type' in guidance:
                prompt_sections.append(f"‚Ä¢ ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°: {guidance['query_type']}")
            
            if 'sql_hints' in guidance:
                for hint in guidance['sql_hints']:
                    prompt_sections.append(f"‚Ä¢ {hint}")
            
            if 'recommended_tables' in guidance:
                tables = "', '".join(guidance['recommended_tables'])
                prompt_sections.append(f"‚Ä¢ ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏ó‡∏µ‡πà‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥: '{tables}'")
            
            prompt_sections.append("")
        
        # ‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà 6: ‡∏Å‡∏é‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö HVAC
        prompt_sections.append("üîß ‡∏Å‡∏é‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à HVAC:")
        prompt_sections.append("1. ‡πÉ‡∏ä‡πâ ILIKE '%keyword%' ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÅ‡∏•‡∏∞‡∏≠‡∏∞‡πÑ‡∏´‡∏•‡πà")
        prompt_sections.append("2. service_contact_ ‡πÄ‡∏õ‡πá‡∏ô‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤‡∏á‡∏≤‡∏ô (‡∏´‡∏ô‡πà‡∏ß‡∏¢: ‡∏ö‡∏≤‡∏ó)")
        prompt_sections.append("3. ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢‡πÅ‡∏¢‡∏Å‡∏ï‡∏≤‡∏°‡∏õ‡∏µ - ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á")
        prompt_sections.append("4. ‡πÉ‡∏ä‡πâ UNION ALL ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏•‡∏≤‡∏¢‡∏õ‡∏µ")
        prompt_sections.append("5. product_name ‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á spare_part ‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©")
        prompt_sections.append("6. ‡πÉ‡∏ä‡πâ LIMIT 20 ‡πÄ‡∏™‡∏°‡∏≠")
        
        # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏é‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°
        if analysis.get('question_type') == 'counting':
            prompt_sections.append("7. ‡πÉ‡∏ä‡πâ COUNT(DISTINCT customer_name) ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ô‡∏±‡∏ö‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤")
        elif analysis.get('question_type') == 'spare_parts_inquiry':
            prompt_sections.append("7. ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÉ‡∏ô product_name AND description ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô")
        elif analysis.get('question_type') == 'customer_history':
            prompt_sections.append("7. ‡∏£‡∏ß‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å sales2022, sales2023, sales2024 ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥")
        
        prompt_sections.append("")
        
        # ‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà 7: ‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÅ‡∏•‡∏∞‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á
        prompt_sections.append(f"‚ùì ‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°: {question}")
        prompt_sections.append("")
        prompt_sections.append("‡∏™‡∏£‡πâ‡∏≤‡∏á PostgreSQL query ‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à HVAC:")
        
        return "\n".join(prompt_sections)
    
    def _get_hvac_business_context(self, tenant_id: str) -> str:
        """üè¢ Business context ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö HVAC"""
        contexts = {
            'company-a': """üîß ‡∏ö‡∏£‡∏¥‡∏ö‡∏ó: ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏ã‡πà‡∏≠‡∏°‡∏ö‡∏≥‡∏£‡∏∏‡∏á‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏¢‡πá‡∏ô ‡πÅ‡∏•‡∏∞‡∏à‡∏≥‡∏´‡∏ô‡πà‡∏≤‡∏¢‡∏≠‡∏∞‡πÑ‡∏´‡∏•‡πà
üí∞ ‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å: ‡πÇ‡∏£‡∏á‡∏á‡∏≤‡∏ô‡∏≠‡∏∏‡∏ï‡∏™‡∏≤‡∏´‡∏Å‡∏£‡∏£‡∏°, ‡πÇ‡∏£‡∏á‡πÅ‡∏£‡∏°, ‡∏≠‡∏≤‡∏Ñ‡∏≤‡∏£‡∏™‡∏≥‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô, ‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏á‡∏≤‡∏ô‡∏£‡∏≤‡∏ä‡∏Å‡∏≤‡∏£
üõ†Ô∏è ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£: PM (Preventive Maintenance), ‡∏ã‡πà‡∏≠‡∏°‡πÅ‡∏ã‡∏°, ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ä‡∏¥‡πâ‡∏ô‡∏™‡πà‡∏ß‡∏ô, Overhaul
üè∑Ô∏è ‡πÅ‡∏ö‡∏£‡∏ô‡∏î‡πå: Hitachi, Daikin, EuroKlimat, Toyota, Mitsubishi, York, Carrier""",

            'company-b': """üîß ‡∏ö‡∏£‡∏¥‡∏ö‡∏ó: ‡∏™‡∏≤‡∏Ç‡∏≤‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£ HVAC ‡∏†‡∏≤‡∏Ñ‡πÄ‡∏´‡∏ô‡∏∑‡∏≠ - ‡πÄ‡∏ä‡∏µ‡∏¢‡∏á‡πÉ‡∏´‡∏°‡πà
üí∞ ‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å: ‡πÇ‡∏£‡∏á‡πÅ‡∏£‡∏°‡∏ó‡πâ‡∏≠‡∏á‡∏ñ‡∏¥‡πà‡∏ô, ‡πÇ‡∏£‡∏á‡∏á‡∏≤‡∏ô‡∏†‡∏≤‡∏Ñ‡πÄ‡∏´‡∏ô‡∏∑‡∏≠, ‡∏´‡πâ‡∏≤‡∏á‡∏™‡∏£‡∏£‡∏û‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
üõ†Ô∏è ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£: PM, ‡∏ã‡πà‡∏≠‡∏°‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏õ‡∏£‡∏±‡∏ö‡∏≠‡∏≤‡∏Å‡∏≤‡∏®, ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô
üè∑Ô∏è ‡πÄ‡∏ô‡πâ‡∏ô‡πÅ‡∏ö‡∏£‡∏ô‡∏î‡πå: Daikin, Mitsubishi, Hitachi""",

            'company-c': """üîß ‡∏ö‡∏£‡∏¥‡∏ö‡∏ó: HVAC International Services - ‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏™‡∏≤‡∏Å‡∏•  
üí∞ ‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å: ‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó‡∏Ç‡πâ‡∏≤‡∏°‡∏ä‡∏≤‡∏ï‡∏¥, ‡πÇ‡∏£‡∏á‡∏á‡∏≤‡∏ô‡∏≠‡∏∏‡∏ï‡∏™‡∏≤‡∏´‡∏Å‡∏£‡∏£‡∏°‡∏Ç‡∏ô‡∏≤‡∏î‡πÉ‡∏´‡∏ç‡πà
üõ†Ô∏è ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£: Large scale HVAC systems, Industrial chillers
üè∑Ô∏è ‡πÅ‡∏ö‡∏£‡∏ô‡∏î‡πå‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏™‡∏≤‡∏Å‡∏•: York, Carrier, Trane, McQuay"""
        }
        
        return contexts.get(tenant_id, contexts['company-a'])
    
    def _create_fallback_prompt(self, question: str, tenant_id: str) -> str:
        """üîÑ Fallback prompt ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö HVAC"""
        
        return f"""‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠ PostgreSQL Expert ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à HVAC Service & Spare Parts

üîß ‡∏ö‡∏£‡∏¥‡∏ö‡∏ó‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à: ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏ã‡πà‡∏≠‡∏°‡∏ö‡∏≥‡∏£‡∏∏‡∏á‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏¢‡πá‡∏ô‡πÅ‡∏•‡∏∞‡∏à‡∏≥‡∏´‡∏ô‡πà‡∏≤‡∏¢‡∏≠‡∏∞‡πÑ‡∏´‡∏•‡πà

üìä ‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:
‚Ä¢ sales2024, sales2023, sales2022, sales2025: ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏á‡∏≤‡∏ô‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£
‚Ä¢ spare_part, spare_part2: ‡∏Ñ‡∏•‡∏±‡∏á‡∏≠‡∏∞‡πÑ‡∏´‡∏•‡πà
‚Ä¢ work_force: ‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏ó‡∏µ‡∏°‡∏á‡∏≤‡∏ô

üîß ‡∏Å‡∏é‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç:
1. ‡πÉ‡∏ä‡πâ ILIKE '%keyword%' ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤
2. service_contact_ ‡πÄ‡∏õ‡πá‡∏ô‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤‡∏á‡∏≤‡∏ô (‡∏ö‡∏≤‡∏ó)
3. ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏¢‡∏Å‡∏ï‡∏≤‡∏°‡∏õ‡∏µ - ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å
4. ‡πÉ‡∏ä‡πâ LIMIT 20 ‡πÄ‡∏™‡∏°‡∏≠

‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°: {question}

‡∏™‡∏£‡πâ‡∏≤‡∏á PostgreSQL query:"""


class EnhancedSchemaIntegration:
    """üîó Integration class ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö HVAC"""
    
    def __init__(self, database_handler, tenant_configs):
        self.schema_discovery = IntelligentSchemaDiscovery(database_handler)
        self.prompt_builder = IntelligentPromptBuilder(tenant_configs)
        logger.info("üîó HVAC Enhanced Schema Integration initialized")
    
    async def generate_intelligent_sql_prompt(self, question: str, tenant_id: str) -> str:
        """üéØ ‡∏™‡∏£‡πâ‡∏≤‡∏á intelligent prompt ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö HVAC"""
        
        try:
            # ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 1: ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÅ‡∏•‡∏∞‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• HVAC
            hvac_context = await self.schema_discovery.get_contextual_schema(question, tenant_id)
            
            # ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 2: ‡∏™‡∏£‡πâ‡∏≤‡∏á prompt ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö HVAC
            hvac_prompt = self.prompt_builder.build_contextual_prompt(
                question, tenant_id, hvac_context
            )
            
            logger.info(f"‚úÖ Generated HVAC intelligent prompt for {tenant_id}: {len(hvac_prompt)} chars")
            return hvac_prompt
            
        except Exception as e:
            logger.error(f"‚ùå Failed to generate HVAC intelligent prompt: {e}")
            
            # fallback ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö HVAC
            return self._create_hvac_fallback_prompt(question, tenant_id)
    
    def _create_hvac_fallback_prompt(self, question: str, tenant_id: str) -> str:
        """üîÑ Fallback prompt ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö HVAC"""
        
        return f"""‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠ PostgreSQL Expert ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à HVAC Service & Spare Parts

üîß ‡∏ö‡∏£‡∏¥‡∏ö‡∏ó‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à: ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏ã‡πà‡∏≠‡∏°‡∏ö‡∏≥‡∏£‡∏∏‡∏á‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏¢‡πá‡∏ô‡πÅ‡∏•‡∏∞‡∏≠‡∏∞‡πÑ‡∏´‡∏•‡πà

üìä ‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:
‚Ä¢ sales2024: ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏á‡∏≤‡∏ô‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏õ‡∏µ 2024
  - job_no: ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏á‡∏≤‡∏ô, customer_name: ‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤
  - description: ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏á‡∏≤‡∏ô, service_contact_: ‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤ (‡∏ö‡∏≤‡∏ó)
‚Ä¢ spare_part: ‡∏Ñ‡∏•‡∏±‡∏á‡∏≠‡∏∞‡πÑ‡∏´‡∏•‡πà
  - product_code: ‡∏£‡∏´‡∏±‡∏™, product_name: ‡∏ä‡∏∑‡πà‡∏≠, unit_price: ‡∏£‡∏≤‡∏Ñ‡∏≤
‚Ä¢ work_force: ‡∏ó‡∏µ‡∏°‡∏á‡∏≤‡∏ô
  - date: ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà, customer: ‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤, service_group: ‡∏ó‡∏µ‡∏°

üîß ‡∏Å‡∏é‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç:
1. ‡πÉ‡∏ä‡πâ ILIKE '%keyword%' ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤
2. service_contact_ ‡πÄ‡∏õ‡πá‡∏ô‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤‡∏á‡∏≤‡∏ô (‡∏ö‡∏≤‡∏ó)  
3. ‡πÉ‡∏ä‡πâ LIMIT 20 ‡πÄ‡∏™‡∏°‡∏≠
4. ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏¢‡∏Å‡∏ï‡∏≤‡∏°‡∏õ‡∏µ

‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°: {question}

‡∏™‡∏£‡πâ‡∏≤‡∏á PostgreSQL query ‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à HVAC:"""