import json
import asyncio
import boto3
from typing import Dict, Any, List
from postgres_agent import PostgreSQLAgent

class AggregatorAgent:
    def __init__(self):
        # Initialize agents
        self.postgres_agent = PostgreSQLAgent()
        
        # Claude for routing decisions
        self.bedrock_runtime = boto3.client(
            'bedrock-runtime',
            region_name='ap-southeast-1'
        )
        
        # Initialize Knowledge Base agent (existing RAG)
        self.bedrock_agent = boto3.client(
            'bedrock-agent-runtime',
            region_name='ap-southeast-1'
        )
        self.knowledge_base_id = 'KJGWQPHFSM'
        
        # Routing keywords
        self.sql_keywords = [
            '‡∏Å‡∏µ‡πà‡∏Ñ‡∏ô', '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô', '‡πÄ‡∏ó‡πà‡∏≤‡πÑ‡∏´‡∏£‡πà', '‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢', '‡∏£‡∏ß‡∏°', '‡∏°‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î', '‡∏ô‡πâ‡∏≠‡∏¢‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î',
            '‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô', '‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏î‡∏∑‡∏≠‡∏ô', '‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ', '‡πÅ‡∏ú‡∏ô‡∏Å', '‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á', '‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì',
            '‡πÉ‡∏Ñ‡∏£‡∏ö‡πâ‡∏≤‡∏á', '‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠', '‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞', '‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà', '‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤', '‡πÄ‡∏ó‡∏Ñ‡πÇ‡∏ô‡πÇ‡∏•‡∏¢‡∏µ'
        ]
        
        self.knowledge_keywords = [
            '‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó', '‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à', '‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£', '‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠', '‡πÄ‡∏ß‡∏•‡∏≤', '‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏¥‡∏Å‡∏≤‡∏£', '‡∏ô‡πÇ‡∏¢‡∏ö‡∏≤‡∏¢',
            '‡∏™‡∏¢‡∏≤‡∏°‡πÄ‡∏ó‡∏Ñ', '‡∏ó‡∏≥‡∏á‡∏≤‡∏ô', '‡∏•‡∏≤‡∏á‡∏≤‡∏ô', '‡∏ß‡∏±‡∏ô‡∏´‡∏¢‡∏∏‡∏î', '‡∏ù‡∏∂‡∏Å‡∏≠‡∏ö‡∏£‡∏°', '‡∏™‡∏≥‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô'
        ]

    async def route_question(self, question: str) -> str:
        """‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à‡∏ß‡πà‡∏≤‡∏Ñ‡∏ß‡∏£‡πÉ‡∏ä‡πâ agent ‡πÑ‡∏´‡∏ô"""
        
        # Simple keyword-based routing first
        question_lower = question.lower()
        
        sql_score = sum(1 for keyword in self.sql_keywords if keyword in question_lower)
        knowledge_score = sum(1 for keyword in self.knowledge_keywords if keyword in question_lower)
        
        # If clear match, return immediately
        if sql_score > knowledge_score and sql_score > 0:
            return "postgres"
        elif knowledge_score > sql_score and knowledge_score > 0:
            return "knowledge_base"
        
        # Use Claude for ambiguous cases
        return await self.claude_route_decision(question)

    async def claude_route_decision(self, question: str) -> str:
        """‡πÉ‡∏ä‡πâ Claude ‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à routing"""
        
        prompt = f"""‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏õ‡πá‡∏ô routing agent ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à‡∏ß‡πà‡∏≤‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏ï‡πà‡∏≠‡πÑ‡∏õ‡∏ô‡∏µ‡πâ‡∏Ñ‡∏ß‡∏£‡∏™‡πà‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á agent ‡πÑ‡∏´‡∏ô

Agent ‡∏ó‡∏µ‡πà‡∏°‡∏µ:
1. "postgres" - ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡πÄ‡∏ä‡πà‡∏ô ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô, ‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏î‡∏∑‡∏≠‡∏ô, ‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ, ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏ï‡πà‡∏≤‡∏á‡πÜ
2. "knowledge_base" - ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ‡∏Ç‡∏≠‡∏á‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó ‡πÄ‡∏ä‡πà‡∏ô ‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à, ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£, ‡∏ô‡πÇ‡∏¢‡∏ö‡∏≤‡∏¢, ‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠

‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°: "{question}"

‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏≠‡∏ö‡∏î‡πâ‡∏ß‡∏¢ "postgres" ‡∏´‡∏£‡∏∑‡∏≠ "knowledge_base" ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô

‡∏ï‡∏≠‡∏ö:"""

        try:
            claude_request = {
                "anthropic_version": "bedrock-2023-05-31",
                "max_tokens": 50,
                "messages": [{"role": "user", "content": prompt}]
            }
            
            response = self.bedrock_runtime.invoke_model(
                modelId='apac.anthropic.claude-3-7-sonnet-20250219-v1:0',
                body=json.dumps(claude_request),
                contentType='application/json'
            )
            
            response_body = json.loads(response['body'].read())
            decision = response_body['content'][0]['text'].strip().lower()
            
            if "postgres" in decision:
                return "postgres"
            elif "knowledge" in decision:
                return "knowledge_base"
            else:
                # Default to knowledge_base for safety
                return "knowledge_base"
                
        except Exception as e:
            print(f"Error in Claude routing: {e}")
            return "knowledge_base"  # Default fallback

    async def query_postgres_agent(self, question: str) -> Dict[str, Any]:
        """Query PostgreSQL Agent"""
        try:
            result = self.postgres_agent.query(question)
            return {
                "success": result["success"],
                "answer": result["answer"],
                "source": "PostgreSQL Database",
                "agent": "postgres",
                "sql": result.get("sql"),
                "data": result.get("data")
            }
        except Exception as e:
            return {
                "success": False,
                "answer": f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: {str(e)}",
                "source": "PostgreSQL Database",
                "agent": "postgres",
                "sql": None,
                "data": None
            }

    async def query_knowledge_base_agent(self, question: str) -> Dict[str, Any]:
        """Query Knowledge Base Agent"""
        try:
            # Retrieve from Knowledge Base
            retrieve_response = self.bedrock_agent.retrieve(
                knowledgeBaseId=self.knowledge_base_id,
                retrievalQuery={'text': question},
                retrievalConfiguration={
                    'vectorSearchConfiguration': {
                        'numberOfResults': 10
                    }
                }
            )
            
            # Process documents
            retrieved_docs = []
            for result in retrieve_response.get('retrievalResults', []):
                content = result.get('content', {}).get('text', '')
                if content:
                    retrieved_docs.append(content)
            
            if not retrieved_docs:
                return {
                    "success": False,
                    "answer": "‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢ ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÉ‡∏ô‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£",
                    "source": "Knowledge Base",
                    "agent": "knowledge_base",
                    "documents": []
                }
            
            # Generate response
            context = "\n\n".join(retrieved_docs[:5])
            prompt = f"""‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏£‡∏¥‡∏ö‡∏ó‡∏ï‡πà‡∏≠‡πÑ‡∏õ‡∏ô‡∏µ‡πâ:

{context}

‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°: {question}

‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÇ‡∏î‡∏¢‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏£‡∏¥‡∏ö‡∏ó‡∏Ç‡πâ‡∏≤‡∏á‡∏ö‡∏ô ‡∏´‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ö‡∏≠‡∏Å‡∏ß‡πà‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠ ‡∏≠‡∏¢‡πà‡∏≤‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°"""

            claude_request = {
                "anthropic_version": "bedrock-2023-05-31",
                "max_tokens": 1000,
                "messages": [{"role": "user", "content": prompt}]
            }
            
            response = self.bedrock_runtime.invoke_model(
                modelId='apac.anthropic.claude-3-7-sonnet-20250219-v1:0',
                body=json.dumps(claude_request),
                contentType='application/json'
            )
            
            response_body = json.loads(response['body'].read())
            answer = response_body['content'][0]['text']
            
            return {
                "success": True,
                "answer": answer,
                "source": "Knowledge Base Documents",
                "agent": "knowledge_base",
                "documents": retrieved_docs[:3]
            }
            
        except Exception as e:
            return {
                "success": False,
                "answer": f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£: {str(e)}",
                "source": "Knowledge Base",
                "agent": "knowledge_base",
                "documents": []
            }

    async def process_question(self, question: str) -> Dict[str, Any]:
        """Main method - ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÅ‡∏•‡∏∞‡∏™‡πà‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á agent ‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°"""
        
        # Step 1: Route the question
        selected_agent = await self.route_question(question)
        print(f"üéØ Routing decision: {selected_agent}")
        
        # Step 2: Query the selected agent
        if selected_agent == "postgres":
            result = await self.query_postgres_agent(question)
        else:
            result = await self.query_knowledge_base_agent(question)
        
        # Step 3: Add metadata
        result["routing_decision"] = selected_agent
        result["question"] = question
        
        return result

    async def hybrid_search(self, question: str) -> Dict[str, Any]:
        """‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏à‡∏≤‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏≠‡∏á agents ‡πÅ‡∏•‡∏∞‡∏£‡∏ß‡∏°‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå"""
        
        print("üîÑ Performing hybrid search...")
        
        # Query both agents simultaneously
        postgres_task = self.query_postgres_agent(question)
        knowledge_task = self.query_knowledge_base_agent(question)
        
        postgres_result, knowledge_result = await asyncio.gather(
            postgres_task, knowledge_task, return_exceptions=True
        )
        
        # Handle exceptions
        if isinstance(postgres_result, Exception):
            postgres_result = {
                "success": False,
                "answer": f"PostgreSQL error: {str(postgres_result)}",
                "agent": "postgres"
            }
            
        if isinstance(knowledge_result, Exception):
            knowledge_result = {
                "success": False,
                "answer": f"Knowledge Base error: {str(knowledge_result)}",
                "agent": "knowledge_base"
            }
        
        # Combine results
        combined_answer = self.combine_results(postgres_result, knowledge_result, question)
        
        return {
            "success": True,
            "answer": combined_answer,
            "source": "Hybrid Search (PostgreSQL + Knowledge Base)",
            "agent": "hybrid",
            "postgres_result": postgres_result,
            "knowledge_result": knowledge_result,
            "question": question
        }

    def combine_results(self, postgres_result: Dict, knowledge_result: Dict, question: str) -> str:
        """‡∏£‡∏ß‡∏°‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏à‡∏≤‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏≠‡∏á agents"""
        
        postgres_success = postgres_result.get("success", False)
        knowledge_success = knowledge_result.get("success", False)
        
        if postgres_success and knowledge_success:
            return f"""‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:

üìä **‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:**
{postgres_result['answer']}

üìö **‡∏à‡∏≤‡∏Å‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£:**
{knowledge_result['answer']}

---
*‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å: ‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô ‡πÅ‡∏•‡∏∞‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó*"""

        elif postgres_success:
            return f"""üìä **‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:**
{postgres_result['answer']}

üìö *‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏: ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡πÉ‡∏ô‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£*"""

        elif knowledge_success:
            return f"""üìö **‡∏à‡∏≤‡∏Å‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£:**
{knowledge_result['answer']}

üìä *‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏: ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•*"""

        else:
            return "‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢ ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏±‡πâ‡∏á‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡∏∞‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£"

# Test usage
async def test_aggregator():
    agent = AggregatorAgent()
    
    test_questions = [
        "‡∏°‡∏µ‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏Å‡∏µ‡πà‡∏Ñ‡∏ô?",  # Should go to PostgreSQL
        "‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó‡∏™‡∏¢‡∏≤‡∏°‡πÄ‡∏ó‡∏Ñ‡∏ó‡∏≥‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à‡∏≠‡∏∞‡πÑ‡∏£?",  # Should go to Knowledge Base
        "‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡πÄ‡∏ó‡πà‡∏≤‡πÑ‡∏´‡∏£‡πà?",  # Should go to PostgreSQL
        "‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏Ç‡∏≠‡∏á‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó?",  # Should go to Knowledge Base
        "‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡πÅ‡∏ú‡∏ô‡∏Å IT ‡πÉ‡∏Ñ‡∏£‡∏ö‡πâ‡∏≤‡∏á?",  # Should go to PostgreSQL
    ]
    
    for question in test_questions:
        print(f"\n" + "="*60)
        print(f"‚ùì ‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°: {question}")
        
        result = await agent.process_question(question)
        
        print(f"üéØ Agent: {result['routing_decision']}")
        print(f"üìù ‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö: {result['answer']}")
        print(f"üìç Source: {result['source']}")

if __name__ == "__main__":
    asyncio.run(test_aggregator())