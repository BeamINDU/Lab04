import json
import asyncio
import boto3
import hashlib
import time
from typing import Dict, Any, List
from postgres_agent import PostgreSQLAgent

class AggregatorAgent:
    def __init__(self):
        # Initialize agents
        self.postgres_agent = PostgreSQLAgent()
        
        # Claude for routing decisions
        self.bedrock_runtime = boto3.client(
            'bedrock-runtime',
            region_name='ap-southeast-1'
        )
        
        # Initialize Knowledge Base agent (existing RAG)
        self.bedrock_agent = boto3.client(
            'bedrock-agent-runtime',
            region_name='ap-southeast-1'
        )
        self.knowledge_base_id = 'KJGWQPHFSM'
        
        # üöÄ NEW: Speed optimization features
        self.response_cache = {}
        self.quick_responses = {
            "‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ": "‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡∏£‡∏±‡∏ö! ‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡πÉ‡∏´‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£ ‡∏°‡∏µ‡∏≠‡∏∞‡πÑ‡∏£‡πÉ‡∏´‡πâ‡∏ä‡πà‡∏ß‡∏¢‡πÑ‡∏´‡∏°‡∏Ñ‡∏£‡∏±‡∏ö?",
            "‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì": "‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏Ñ‡∏£‡∏±‡∏ö! ‡∏°‡∏µ‡∏≠‡∏∞‡πÑ‡∏£‡∏≠‡∏∑‡πà‡∏ô‡πÉ‡∏´‡πâ‡∏ä‡πà‡∏ß‡∏¢‡∏≠‡∏µ‡∏Å‡πÑ‡∏´‡∏°?",
            "hello": "Hello! How can I help you today?",
            "hi": "Hi there! What can I do for you?",
            "‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£": "‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó ‡∏™‡∏¢‡∏≤‡∏°‡πÄ‡∏ó‡∏Ñ: 02 123 4567",
            "‡∏≠‡∏µ‡πÄ‡∏°‡∏•": "‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó: info@siamtech.co.th",
            "email": "Company email: info@siamtech.co.th",
            "‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà": "‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó‡∏™‡∏¢‡∏≤‡∏°‡πÄ‡∏ó‡∏Ñ ‡∏à‡∏≥‡∏Å‡∏±‡∏î ‡∏ï‡∏±‡πâ‡∏á‡∏≠‡∏¢‡∏π‡πà‡∏ó‡∏µ‡πà‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏°‡∏´‡∏≤‡∏ô‡∏Ñ‡∏£ ‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÑ‡∏ó‡∏¢",
            "‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏≥‡∏Å‡∏≤‡∏£": "‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏≥‡∏Å‡∏≤‡∏£: ‡∏à‡∏±‡∏ô‡∏ó‡∏£‡πå-‡∏®‡∏∏‡∏Å‡∏£‡πå 09:00-18:00 ‡∏ô., ‡πÄ‡∏™‡∏≤‡∏£‡πå 09:00-12:00 ‡∏ô.",
            "line": "Line ID: siamtech"
        }
        
        # Routing keywords (existing)
        self.sql_keywords = [
            '‡∏Å‡∏µ‡πà‡∏Ñ‡∏ô', '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô', '‡πÄ‡∏ó‡πà‡∏≤‡πÑ‡∏´‡∏£‡πà', '‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢', '‡∏£‡∏ß‡∏°', '‡∏°‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î', '‡∏ô‡πâ‡∏≠‡∏¢‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î',
            '‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô', '‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏î‡∏∑‡∏≠‡∏ô', '‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ', '‡πÅ‡∏ú‡∏ô‡∏Å', '‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á', '‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì',
            '‡πÉ‡∏Ñ‡∏£‡∏ö‡πâ‡∏≤‡∏á', '‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠', '‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞', '‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà', '‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤', '‡πÄ‡∏ó‡∏Ñ‡πÇ‡∏ô‡πÇ‡∏•‡∏¢‡∏µ'
        ]
        
        self.knowledge_keywords = [
            '‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó', '‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à', '‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£', '‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠', '‡πÄ‡∏ß‡∏•‡∏≤', '‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏¥‡∏Å‡∏≤‡∏£', '‡∏ô‡πÇ‡∏¢‡∏ö‡∏≤‡∏¢',
            '‡∏™‡∏¢‡∏≤‡∏°‡πÄ‡∏ó‡∏Ñ', '‡∏ó‡∏≥‡∏á‡∏≤‡∏ô', '‡∏•‡∏≤‡∏á‡∏≤‡∏ô', '‡∏ß‡∏±‡∏ô‡∏´‡∏¢‡∏∏‡∏î', '‡∏ù‡∏∂‡∏Å‡∏≠‡∏ö‡∏£‡∏°', '‡∏™‡∏≥‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô'
        ]

    # üöÄ NEW: Quick response system
    def get_quick_response(self, question: str) -> str:
        """‡∏ï‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ‡πÅ‡∏ö‡∏ö‡∏ó‡∏±‡∏ô‡∏ó‡∏µ"""
        question_clean = question.lower().strip()
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏£‡∏π‡∏õ
        for keyword, response in self.quick_responses.items():
            if keyword in question_clean:
                return response
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠
        contact_keywords = ['‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠', '‡πÇ‡∏ó‡∏£', '‡πÄ‡∏ö‡∏≠‡∏£‡πå', 'email', '‡∏≠‡∏µ‡πÄ‡∏°‡∏•', 'contact']
        if any(k in question_clean for k in contact_keywords):
            return """üìû ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó‡∏™‡∏¢‡∏≤‡∏°‡πÄ‡∏ó‡∏Ñ:
‚Ä¢ ‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå: 02 123 4567
‚Ä¢ ‡∏≠‡∏µ‡πÄ‡∏°‡∏•: info@siamtech.co.th  
‚Ä¢ Line ID: siamtech
‚Ä¢ ‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå: www.siamtech.co.th"""
        
        return None

    # üöÄ NEW: Cache system
    def get_cache_key(self, question: str) -> str:
        """‡∏™‡∏£‡πâ‡∏≤‡∏á cache key"""
        return hashlib.md5(question.encode('utf-8')).hexdigest()

    def get_cached_response(self, question: str) -> Dict[str, Any]:
        """‡∏î‡∏∂‡∏á‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏à‡∏≤‡∏Å cache"""
        cache_key = self.get_cache_key(question)
        return self.response_cache.get(cache_key)

    def cache_response(self, question: str, response: Dict[str, Any]):
        """‡πÄ‡∏Å‡πá‡∏ö‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡πÉ‡∏ô cache"""
        cache_key = self.get_cache_key(question)
        response['cached_at'] = time.time()
        self.response_cache[cache_key] = response
        
        # ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏Ç‡∏ô‡∏≤‡∏î cache (‡πÄ‡∏Å‡πá‡∏ö‡πÅ‡∏Ñ‡πà 100 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î)
        if len(self.response_cache) > 100:
            oldest_key = min(self.response_cache.keys(), 
                           key=lambda k: self.response_cache[k].get('cached_at', 0))
            del self.response_cache[oldest_key]

    # üöÄ NEW: Fast routing with fallback
    async def fast_route_question(self, question: str) -> str:
        """Routing ‡πÅ‡∏ö‡∏ö‡πÄ‡∏£‡πá‡∏ß"""
        question_lower = question.lower()
        
        # Quick scoring
        sql_score = sum(1 for keyword in self.sql_keywords if keyword in question_lower)
        knowledge_score = sum(1 for keyword in self.knowledge_keywords if keyword in question_lower)
        
        # Clear decision
        if sql_score > knowledge_score and sql_score >= 2:
            return "postgres"
        elif knowledge_score > sql_score and knowledge_score >= 2:
            return "knowledge_base"
        elif sql_score > 0:
            return "postgres"
        elif knowledge_score > 0:
            return "knowledge_base"
        
        # Default to knowledge_base for general questions
        return "knowledge_base"

    # üöÄ NEW: Ultra-fast processing
    async def ultra_fast_process(self, question: str) -> Dict[str, Any]:
        """‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÅ‡∏ö‡∏ö‡πÄ‡∏£‡πá‡∏ß‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î"""
        start_time = time.time()
        
        # 1. ‡∏•‡∏≠‡∏á quick response ‡∏Å‡πà‡∏≠‡∏ô (< 1ms)
        quick = self.get_quick_response(question)
        if quick:
            return {
                "success": True,
                "answer": quick,
                "source": "Quick Response",
                "agent": "instant",
                "response_time": time.time() - start_time,
                "method": "instant"
            }
        
        # 2. ‡∏•‡∏≠‡∏á cache (1-5ms)
        cached = self.get_cached_response(question)
        if cached and (time.time() - cached.get('cached_at', 0)) < 3600:  # 1 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á
            cached_response = cached.copy()
            cached_response["response_time"] = time.time() - start_time
            cached_response["method"] = "cache"
            return cached_response
        
        # 3. Process normally ‡πÅ‡∏ï‡πà‡πÄ‡∏£‡πá‡∏ß‡∏Ç‡∏∂‡πâ‡∏ô
        return await self.optimized_process_question(question, start_time)

    async def optimized_process_question(self, question: str, start_time: float = None) -> Dict[str, Any]:
        """‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÅ‡∏ö‡∏ö‡∏õ‡∏Å‡∏ï‡∏¥‡πÅ‡∏ï‡πà‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û"""
        if start_time is None:
            start_time = time.time()
        
        # Fast routing
        selected_agent = await self.fast_route_question(question)
        
        # Process with selected agent
        if selected_agent == "postgres":
            result = await self.query_postgres_agent(question)
        else:
            result = await self.query_knowledge_base_agent(question)
        
        # Add metadata
        result["routing_decision"] = selected_agent
        result["question"] = question
        result["response_time"] = time.time() - start_time
        result["method"] = "processed"
        
        # Cache successful responses
        if result.get("success"):
            self.cache_response(question, result)
        
        return result

    # üöÄ NEW: Parallel processing option
    async def parallel_fast_process(self, question: str) -> Dict[str, Any]:
        """‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÅ‡∏ö‡∏ö parallel ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÅ‡∏ô‡πà‡πÉ‡∏à"""
        start_time = time.time()
        
        # 1. Quick response check
        quick = self.get_quick_response(question)
        if quick:
            return {
                "success": True,
                "answer": quick,
                "source": "Quick Response",
                "agent": "instant",
                "response_time": time.time() - start_time,
                "method": "instant"
            }
        
        # 2. Check cache
        cached = self.get_cached_response(question)
        if cached and (time.time() - cached.get('cached_at', 0)) < 3600:
            cached_response = cached.copy()
            cached_response["response_time"] = time.time() - start_time
            cached_response["method"] = "cache"
            return cached_response
        
        # 3. Run both agents in parallel and take the faster one
        postgres_task = self.query_postgres_agent(question)
        knowledge_task = self.query_knowledge_base_agent(question)
        
        try:
            # Wait for first successful result
            done, pending = await asyncio.wait(
                [postgres_task, knowledge_task], 
                return_when=asyncio.FIRST_COMPLETED,
                timeout=5.0  # 5 second timeout
            )
            
            # Cancel pending tasks
            for task in pending:
                task.cancel()
            
            # Get the first successful result
            for task in done:
                try:
                    result = await task
                    if result.get("success"):
                        result["response_time"] = time.time() - start_time
                        result["method"] = "parallel"
                        
                        # Cache the result
                        if result.get("success"):
                            self.cache_response(question, result)
                        
                        return result
                except Exception as e:
                    continue
            
            # If no success, return error
            return {
                "success": False,
                "answer": "‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢ ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÑ‡∏î‡πâ‡πÉ‡∏ô‡∏Ç‡∏ì‡∏∞‡∏ô‡∏µ‡πâ",
                "response_time": time.time() - start_time,
                "method": "parallel_failed"
            }
            
        except asyncio.TimeoutError:
            return {
                "success": False,
                "answer": "‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢ ‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡∏ô‡∏≤‡∏ô‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà",
                "response_time": time.time() - start_time,
                "method": "timeout"
            }

    # üöÄ UPDATED: Main process method with speed options
    async def process_question(self, question: str, mode: str = "fast") -> Dict[str, Any]:
        """Main method with speed modes"""
        if mode == "ultra_fast":
            return await self.ultra_fast_process(question)
        elif mode == "parallel":
            return await self.parallel_fast_process(question)
        elif mode == "fast":
            return await self.optimized_process_question(question)
        else:
            # Original method
            return await self.original_process_question(question)

    async def original_process_question(self, question: str) -> Dict[str, Any]:
        """Original method (‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ß‡πâ‡πÄ‡∏õ‡πá‡∏ô fallback)"""
        selected_agent = await self.route_question(question)
        print(f"üéØ Routing decision: {selected_agent}")
        
        if selected_agent == "postgres":
            result = await self.query_postgres_agent(question)
        else:
            result = await self.query_knowledge_base_agent(question)
        
        result["routing_decision"] = selected_agent
        result["question"] = question
        
        return result

    # Existing methods remain the same...
    async def route_question(self, question: str) -> str:
        """‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à‡∏ß‡πà‡∏≤‡∏Ñ‡∏ß‡∏£‡πÉ‡∏ä‡πâ agent ‡πÑ‡∏´‡∏ô (original method)"""
        question_lower = question.lower()
        
        sql_score = sum(1 for keyword in self.sql_keywords if keyword in question_lower)
        knowledge_score = sum(1 for keyword in self.knowledge_keywords if keyword in question_lower)
        
        if sql_score > knowledge_score and sql_score > 0:
            return "postgres"
        elif knowledge_score > sql_score and knowledge_score > 0:
            return "knowledge_base"
        
        return await self.claude_route_decision(question)

    async def claude_route_decision(self, question: str) -> str:
        """‡πÉ‡∏ä‡πâ Claude ‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à routing (original method)"""
        prompt = f"""‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏õ‡πá‡∏ô routing agent ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à‡∏ß‡πà‡∏≤‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏ï‡πà‡∏≠‡πÑ‡∏õ‡∏ô‡∏µ‡πâ‡∏Ñ‡∏ß‡∏£‡∏™‡πà‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á agent ‡πÑ‡∏´‡∏ô

Agent ‡∏ó‡∏µ‡πà‡∏°‡∏µ:
1. "postgres" - ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡πÄ‡∏ä‡πà‡∏ô ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô, ‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏î‡∏∑‡∏≠‡∏ô, ‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ, ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏ï‡πà‡∏≤‡∏á‡πÜ
2. "knowledge_base" - ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ‡∏Ç‡∏≠‡∏á‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó ‡πÄ‡∏ä‡πà‡∏ô ‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à, ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£, ‡∏ô‡πÇ‡∏¢‡∏ö‡∏≤‡∏¢, ‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠

‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°: "{question}"

‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏≠‡∏ö‡∏î‡πâ‡∏ß‡∏¢ "postgres" ‡∏´‡∏£‡∏∑‡∏≠ "knowledge_base" ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô

‡∏ï‡∏≠‡∏ö:"""

        try:
            claude_request = {
                "anthropic_version": "bedrock-2023-05-31",
                "max_tokens": 50,
                "messages": [{"role": "user", "content": prompt}]
            }
            
            response = self.bedrock_runtime.invoke_model(
                modelId='apac.anthropic.claude-3-7-sonnet-20250219-v1:0',
                body=json.dumps(claude_request),
                contentType='application/json'
            )
            
            response_body = json.loads(response['body'].read())
            decision = response_body['content'][0]['text'].strip().lower()
            
            if "postgres" in decision:
                return "postgres"
            elif "knowledge" in decision:
                return "knowledge_base"
            else:
                return "knowledge_base"
                
        except Exception as e:
            print(f"Error in Claude routing: {e}")
            return "knowledge_base"

    async def query_postgres_agent(self, question: str) -> Dict[str, Any]:
        """Query PostgreSQL Agent (original method)"""
        try:
            result = self.postgres_agent.query(question)
            return {
                "success": result["success"],
                "answer": result["answer"],
                "source": "PostgreSQL Database",
                "agent": "postgres",
                "sql": result.get("sql"),
                "data": result.get("data")
            }
        except Exception as e:
            return {
                "success": False,
                "answer": f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: {str(e)}",
                "source": "PostgreSQL Database",
                "agent": "postgres",
                "sql": None,
                "data": None
            }

    async def query_knowledge_base_agent(self, question: str) -> Dict[str, Any]:
        """Query Knowledge Base Agent (original method)"""
        try:
            retrieve_response = self.bedrock_agent.retrieve(
                knowledgeBaseId=self.knowledge_base_id,
                retrievalQuery={'text': question},
                retrievalConfiguration={
                    'vectorSearchConfiguration': {
                        'numberOfResults': 10
                    }
                }
            )
            
            retrieved_docs = []
            for result in retrieve_response.get('retrievalResults', []):
                content = result.get('content', {}).get('text', '')
                if content:
                    retrieved_docs.append(content)
            
            if not retrieved_docs:
                return {
                    "success": False,
                    "answer": "‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢ ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÉ‡∏ô‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£",
                    "source": "Knowledge Base",
                    "agent": "knowledge_base",
                    "documents": []
                }
            
            context = "\n\n".join(retrieved_docs[:5])
            prompt = f"""‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏£‡∏¥‡∏ö‡∏ó‡∏ï‡πà‡∏≠‡πÑ‡∏õ‡∏ô‡∏µ‡πâ:

{context}

‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°: {question}

‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÇ‡∏î‡∏¢‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏£‡∏¥‡∏ö‡∏ó‡∏Ç‡πâ‡∏≤‡∏á‡∏ö‡∏ô ‡∏´‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ö‡∏≠‡∏Å‡∏ß‡πà‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠ ‡∏≠‡∏¢‡πà‡∏≤‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°"""

            claude_request = {
                "anthropic_version": "bedrock-2023-05-31",
                "max_tokens": 1000,
                "messages": [{"role": "user", "content": prompt}]
            }
            
            response = self.bedrock_runtime.invoke_model(
                modelId='apac.anthropic.claude-3-7-sonnet-20250219-v1:0',
                body=json.dumps(claude_request),
                contentType='application/json'
            )
            
            response_body = json.loads(response['body'].read())
            answer = response_body['content'][0]['text']
            
            return {
                "success": True,
                "answer": answer,
                "source": "Knowledge Base Documents",
                "agent": "knowledge_base",
                "documents": retrieved_docs[:3]
            }
            
        except Exception as e:
            return {
                "success": False,
                "answer": f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£: {str(e)}",
                "source": "Knowledge Base",
                "agent": "knowledge_base",
                "documents": []
            }

    async def hybrid_search(self, question: str) -> Dict[str, Any]:
        """‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏à‡∏≤‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏≠‡∏á agents ‡πÅ‡∏•‡∏∞‡∏£‡∏ß‡∏°‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå (original method)"""
        print("üîÑ Performing hybrid search...")
        
        postgres_task = self.query_postgres_agent(question)
        knowledge_task = self.query_knowledge_base_agent(question)
        
        postgres_result, knowledge_result = await asyncio.gather(
            postgres_task, knowledge_task, return_exceptions=True
        )
        
        if isinstance(postgres_result, Exception):
            postgres_result = {
                "success": False,
                "answer": f"PostgreSQL error: {str(postgres_result)}",
                "agent": "postgres"
            }
            
        if isinstance(knowledge_result, Exception):
            knowledge_result = {
                "success": False,
                "answer": f"Knowledge Base error: {str(knowledge_result)}",
                "agent": "knowledge_base"
            }
        
        combined_answer = self.combine_results(postgres_result, knowledge_result, question)
        
        return {
            "success": True,
            "answer": combined_answer,
            "source": "Hybrid Search (PostgreSQL + Knowledge Base)",
            "agent": "hybrid",
            "postgres_result": postgres_result,
            "knowledge_result": knowledge_result,
            "question": question
        }

    def combine_results(self, postgres_result: Dict, knowledge_result: Dict, question: str) -> str:
        """‡∏£‡∏ß‡∏°‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏à‡∏≤‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏≠‡∏á agents (original method)"""
        postgres_success = postgres_result.get("success", False)
        knowledge_success = knowledge_result.get("success", False)
        
        if postgres_success and knowledge_success:
            return f"""‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:

üìä **‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:**
{postgres_result['answer']}

üìö **‡∏à‡∏≤‡∏Å‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£:**
{knowledge_result['answer']}

---
*‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å: ‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô ‡πÅ‡∏•‡∏∞‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó*"""

        elif postgres_success:
            return f"""üìä **‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:**
{postgres_result['answer']}

üìö *‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏: ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡πÉ‡∏ô‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£*"""

        elif knowledge_success:
            return f"""üìö **‡∏à‡∏≤‡∏Å‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£:**
{knowledge_result['answer']}

üìä *‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏: ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•*"""

        else:
            return "‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢ ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏±‡πâ‡∏á‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡∏∞‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£"

# üöÄ NEW: Convenience function for testing
async def test_speed_comparison():
    """‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß"""
    agent = AggregatorAgent()
    
    test_questions = [
        "‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ",                    # Should be instant
        "‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡πÄ‡∏ó‡πà‡∏≤‡πÑ‡∏´‡∏£‡πà",         # Should be instant  
        "‡∏°‡∏µ‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏Å‡∏µ‡πà‡∏Ñ‡∏ô",           # Should go to postgres
        "‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó‡∏ó‡∏≥‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à‡∏≠‡∏∞‡πÑ‡∏£",       # Should go to knowledge
        "‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡∏£‡∏±‡∏ö"                # Should be instant (repeat)
    ]
    
    for question in test_questions:
        print(f"\n{'='*60}")
        print(f"‚ùì ‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°: {question}")
        
        # Test different modes
        modes = ["ultra_fast", "fast", "parallel"]
        
        for mode in modes:
            start = time.time()
            result = await agent.process_question(question, mode=mode)
            duration = time.time() - start
            
            print(f"\nüöÄ Mode: {mode}")
            print(f"‚è±Ô∏è  Time: {duration:.3f}s")
            print(f"ü§ñ Agent: {result.get('agent', 'unknown')}")
            print(f"üìù Answer: {result.get('answer', 'No answer')[:100]}...")
            print(f"üîß Method: {result.get('method', 'unknown')}")

if __name__ == "__main__":
    asyncio.run(test_speed_comparison())