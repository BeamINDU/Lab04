import time
import asyncio
import sys
import os
from typing import Dict, List, Any, Optional
from datetime import datetime
import logging

# ‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç import path ‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
project_root = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
sys.path.insert(0, project_root)

# ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞ import ‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà
try:
    # ‡∏•‡∏≠‡∏á import ‡∏à‡∏≤‡∏Å‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ï‡πà‡∏≤‡∏á‡πÜ ‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏õ‡πÑ‡∏î‡πâ
    if os.path.exists(os.path.join(project_root, 'refactored_modules')):
        from refactored_modules.enhanced_postgres_agent_unified import UnifiedEnhancedPostgresOllamaAgent
        from refactored_modules.advanced_dynamic_ai_system import EnhancedUnifiedPostgresOllamaAgent
        print("‚úÖ Import from refactored_modules successful")
    else:
        # ‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏°‡∏µ refactored_modules ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ mock agents
        print("‚ö†Ô∏è refactored_modules not found, using mock agents for demonstration")
        UnifiedEnhancedPostgresOllamaAgent = None
        EnhancedUnifiedPostgresOllamaAgent = None
        
except ImportError as e:
    print(f"‚ö†Ô∏è Import warning: {e}")
    print("üí° ‡∏à‡∏∞‡πÉ‡∏ä‡πâ Mock Agents ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö")
    UnifiedEnhancedPostgresOllamaAgent = None
    EnhancedUnifiedPostgresOllamaAgent = None

logger = logging.getLogger(__name__)

class MockAgent:
    """üé≠ Mock Agent ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏£‡∏¥‡∏á"""
    
    def __init__(self, agent_type: str):
        self.agent_type = agent_type
        self.call_count = 0
    
    async def process_enhanced_question(self, question: str, tenant_id: str) -> Dict[str, Any]:
        """Mock method ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Semi-Dynamic"""
        self.call_count += 1
        
        # ‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
        await asyncio.sleep(0.5 + (0.3 if '‡∏ã‡∏±‡∏ö‡∏ã‡πâ‡∏≠‡∏ô' in question else 0))
        
        # ‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
        is_simple = any(word in question.lower() for word in ['‡∏à‡∏≥‡∏ô‡∏ß‡∏ô', '‡∏£‡∏≤‡∏Ñ‡∏≤', '‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠'])
        success = is_simple or ('‡∏á‡πà‡∏≤‡∏¢' in question)
        
        return {
            'success': success,
            'answer': f"[MOCK {self.agent_type}] ‡∏ï‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°: {question}" if success else f"[MOCK {self.agent_type}] ‡πÑ‡∏°‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°",
            'results_count': 5 if success else 0,
            'data_source_used': f'mock_{self.agent_type}',
            'sql_query': f"SELECT * FROM mock_table WHERE question LIKE '%{question[:20]}%'" if success else None
        }
    
    async def process_any_question(self, question: str, tenant_id: str) -> Dict[str, Any]:
        """Mock method ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Fully Dynamic"""
        self.call_count += 1
        
        # ‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô (‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡∏ô‡∏≤‡∏ô‡∏Å‡∏ß‡πà‡∏≤)
        await asyncio.sleep(1.2 + (0.8 if '‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå' in question else 0))
        
        # Dynamic ‡∏°‡∏±‡∏Å‡∏ï‡∏≠‡∏ö‡πÑ‡∏î‡πâ‡∏î‡∏µ‡∏Å‡∏ß‡πà‡∏≤
        success = True  # ‡∏ï‡∏≠‡∏ö‡πÑ‡∏î‡πâ‡πÄ‡∏Å‡∏∑‡∏≠‡∏ö‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°
        
        return {
            'success': success,
            'answer': f"[MOCK {self.agent_type}] ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÅ‡∏•‡∏∞‡∏ï‡∏≠‡∏ö: {question}",
            'results_count': 8 if success else 0,
            'data_source_used': f'mock_{self.agent_type}',
            'sql_query': f"SELECT advanced_analysis FROM dynamic_table WHERE complex_query ILIKE '%{question[:30]}%'"
        }


class ComparisonSystemManager:
    """üîÑ ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö - ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö Mock ‡πÅ‡∏•‡∏∞ Real"""
    
    def __init__(self):
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏≠‡∏á‡πÅ‡∏ö‡∏ö (‡∏´‡∏£‡∏∑‡∏≠ Mock ‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏£‡∏¥‡∏á)
        if UnifiedEnhancedPostgresOllamaAgent and EnhancedUnifiedPostgresOllamaAgent:
            print("üîß Using Real Agents")
            self.semi_dynamic_agent = UnifiedEnhancedPostgresOllamaAgent()
            self.fully_dynamic_agent = EnhancedUnifiedPostgresOllamaAgent()
            self.using_mock = False
        else:
            print("üé≠ Using Mock Agents for demonstration")
            self.semi_dynamic_agent = MockAgent("Semi-Dynamic")
            self.fully_dynamic_agent = MockAgent("Fully-Dynamic")
            self.using_mock = True
        
        # ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö
        self.comparison_stats = {
            'total_tests': 0,
            'semi_dynamic_wins': 0,
            'fully_dynamic_wins': 0,
            'ties': 0,
            'detailed_results': []
        }
        
        # ‡∏ä‡∏∏‡∏î‡∏ó‡∏î‡∏™‡∏≠‡∏ö HVAC
        self.hvac_test_questions = {
            'basic_hvac': [
                "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î",
                "‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡∏õ‡∏µ 2024",
                "‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏ó‡∏µ‡∏°‡∏ä‡πà‡∏≤‡∏á",
                "‡∏£‡∏≤‡∏Ñ‡∏≤‡∏≠‡∏∞‡πÑ‡∏´‡∏•‡πà‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"
            ],
            'intermediate_hvac': [
                "‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó‡πÑ‡∏´‡∏ô‡πÉ‡∏ä‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£ PM ‡∏°‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î",
                "‡∏≠‡∏∞‡πÑ‡∏´‡∏•‡πà Hitachi ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏™‡∏π‡∏á‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î", 
                "‡∏ó‡∏µ‡∏°‡∏ä‡πà‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ô‡∏µ‡πâ",
                "‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏ö‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 50000 ‡∏ö‡∏≤‡∏ó"
            ],
            'advanced_hvac': [
                "‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢ PM ‡∏Å‡∏±‡∏ö Overhaul ‡πÉ‡∏ô‡∏õ‡∏µ 2024",
                "‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£ Hitachi ‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡πÄ‡∏Ñ‡∏¢‡∏ã‡∏∑‡πâ‡∏≠‡∏≠‡∏∞‡πÑ‡∏´‡∏•‡πà Hitachi", 
                "‡∏ó‡∏µ‡∏°‡∏ä‡πà‡∏≤‡∏á‡πÑ‡∏´‡∏ô‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û‡∏™‡∏π‡∏á‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡πÉ‡∏ô‡∏á‡∏≤‡∏ô PM",
                "‡∏≠‡∏∞‡πÑ‡∏´‡∏•‡πà‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏Ñ‡∏¢‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏á‡∏≤‡∏ô‡πÉ‡∏î"
            ]
        }
        
        logger.info("üîÑ Comparison System Manager initialized")
    
    async def run_quick_demo(self, tenant_id: str = "company-a") -> Dict[str, Any]:
        """üé™ Demo ‡πÄ‡∏£‡πá‡∏ß‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô"""
        
        print("üé™ DEMO ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö Semi-Dynamic vs Fully Dynamic")
        print("=" * 60)
        
        if self.using_mock:
            print("üé≠ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÉ‡∏ä‡πâ Mock Agents ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö")
            print("üí° ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏Å‡∏≤‡∏£‡∏à‡∏≥‡∏•‡∏≠‡∏á ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏£‡∏¥‡∏á")
            print("-" * 60)
        
        demo_questions = [
            "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î",  # ‡∏á‡πà‡∏≤‡∏¢
            "‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏°‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î 3 ‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö",  # ‡∏Å‡∏•‡∏≤‡∏á
            "‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÅ‡∏ö‡∏£‡∏ô‡∏î‡πå"  # ‡∏ã‡∏±‡∏ö‡∏ã‡πâ‡∏≠‡∏ô
        ]
        
        results = []
        
        for i, question in enumerate(demo_questions, 1):
            print(f"\nüîç ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ó‡∏µ‡πà {i}/3: {question}")
            
            result = await self._compare_single_question(question, tenant_id, f"demo_{i}")
            results.append(result)
            
            # ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
            self._display_quick_result(result)
        
        # ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏• Demo
        self._display_demo_summary(results)
        
        return {
            'demo_results': results,
            'using_mock': self.using_mock,
            'demo_completed_at': datetime.now().isoformat()
        }
    
    async def _compare_single_question(self, question: str, tenant_id: str, test_id: str) -> Dict[str, Any]:
        """üîç ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÄ‡∏î‡∏µ‡∏¢‡∏ß"""
        
        result = {
            'question': question,
            'test_id': test_id,
            'semi_dynamic_result': None,
            'fully_dynamic_result': None,
            'winner': 'tie',
            'metrics': {}
        }
        
        # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Semi-Dynamic
        try:
            start_time = time.time()
            
            if hasattr(self.semi_dynamic_agent, 'process_enhanced_question'):
                semi_result = await self.semi_dynamic_agent.process_enhanced_question(question, tenant_id)
            else:
                semi_result = await self.semi_dynamic_agent.process_enhanced_question(question, tenant_id)
            
            semi_time = time.time() - start_time
            
            result['semi_dynamic_result'] = semi_result
            result['metrics']['semi_dynamic_time'] = semi_time
            result['metrics']['semi_dynamic_success'] = semi_result.get('success', False)
            result['metrics']['semi_dynamic_results_count'] = semi_result.get('results_count', 0)
            
        except Exception as e:
            result['semi_dynamic_result'] = {'success': False, 'error': str(e), 'answer': f'Error: {str(e)}'}
            result['metrics']['semi_dynamic_time'] = 0
            result['metrics']['semi_dynamic_success'] = False
            result['metrics']['semi_dynamic_results_count'] = 0
        
        # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Fully Dynamic
        try:
            start_time = time.time()
            
            if hasattr(self.fully_dynamic_agent, 'process_any_question'):
                dynamic_result = await self.fully_dynamic_agent.process_any_question(question, tenant_id)
            else:
                dynamic_result = await self.fully_dynamic_agent.process_enhanced_question(question, tenant_id)
            
            dynamic_time = time.time() - start_time
            
            result['fully_dynamic_result'] = dynamic_result
            result['metrics']['fully_dynamic_time'] = dynamic_time
            result['metrics']['fully_dynamic_success'] = dynamic_result.get('success', False)
            result['metrics']['fully_dynamic_results_count'] = dynamic_result.get('results_count', 0)
            
        except Exception as e:
            result['fully_dynamic_result'] = {'success': False, 'error': str(e), 'answer': f'Error: {str(e)}'}
            result['metrics']['fully_dynamic_time'] = 0
            result['metrics']['fully_dynamic_success'] = False
            result['metrics']['fully_dynamic_results_count'] = 0
        
        # ‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡∏ú‡∏π‡πâ‡∏ä‡∏ô‡∏∞
        result['winner'] = self._determine_winner(result)
        
        return result
    
    def _determine_winner(self, result: Dict[str, Any]) -> str:
        """üèÜ ‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡∏ú‡∏π‡πâ‡∏ä‡∏ô‡∏∞"""
        
        semi_success = result['metrics'].get('semi_dynamic_success', False)
        dynamic_success = result['metrics'].get('fully_dynamic_success', False)
        
        if semi_success and not dynamic_success:
            return 'semi_dynamic'
        elif dynamic_success and not semi_success:
            return 'fully_dynamic'
        elif semi_success and dynamic_success:
            # ‡∏ó‡∏±‡πâ‡∏á‡∏Ñ‡∏π‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à - ‡∏î‡∏π‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
            semi_count = result['metrics'].get('semi_dynamic_results_count', 0)
            dynamic_count = result['metrics'].get('fully_dynamic_results_count', 0)
            
            if dynamic_count > semi_count:
                return 'fully_dynamic'
            elif semi_count > dynamic_count:
                return 'semi_dynamic'
            else:
                return 'tie'
        else:
            return 'tie'
    
    def _display_quick_result(self, result: Dict[str, Any]):
        """üìä ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡πÄ‡∏£‡πá‡∏ß"""
        
        metrics = result['metrics']
        winner = result['winner']
        
        # ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
        semi_status = "‚úÖ" if metrics.get('semi_dynamic_success') else "‚ùå"
        dynamic_status = "‚úÖ" if metrics.get('fully_dynamic_success') else "‚ùå"
        
        print(f"   üîπ Semi-Dynamic: {semi_status} "
              f"({metrics.get('semi_dynamic_results_count', 0)} results, "
              f"{metrics.get('semi_dynamic_time', 0):.2f}s)")
        
        print(f"   üî∏ Fully Dynamic: {dynamic_status} "
              f"({metrics.get('fully_dynamic_results_count', 0)} results, "
              f"{metrics.get('fully_dynamic_time', 0):.2f}s)")
        
        # ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏π‡πâ‡∏ä‡∏ô‡∏∞
        winner_emoji = {
            'semi_dynamic': 'ü•á Semi-Dynamic ‡∏ä‡∏ô‡∏∞!',
            'fully_dynamic': 'ü•á Fully Dynamic ‡∏ä‡∏ô‡∏∞!',
            'tie': 'ü§ù ‡πÄ‡∏™‡∏°‡∏≠'
        }
        print(f"   {winner_emoji.get(winner, '‚ùì')}")
    
    def _display_demo_summary(self, results: List[Dict[str, Any]]):
        """üìã ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏£‡∏∏‡∏õ Demo"""
        
        semi_wins = sum(1 for r in results if r['winner'] == 'semi_dynamic')
        dynamic_wins = sum(1 for r in results if r['winner'] == 'fully_dynamic')
        ties = sum(1 for r in results if r['winner'] == 'tie')
        
        print(f"\nüèÜ ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏• Demo ({len(results)} ‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°):")
        print(f"   ü•á Semi-Dynamic:  {semi_wins} ‡∏ä‡∏ô‡∏∞")
        print(f"   ü•á Fully Dynamic: {dynamic_wins} ‡∏ä‡∏ô‡∏∞")
        print(f"   ü§ù ‡πÄ‡∏™‡∏°‡∏≠:          {ties} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á")
        
        if self.using_mock:
            print(f"\nüé≠ ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏: ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏ô‡∏µ‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏≥‡∏•‡∏≠‡∏á")
            print(f"   ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏à‡∏£‡∏¥‡∏á‡∏à‡∏∞‡πÑ‡∏î‡πâ‡∏ú‡∏•‡∏ó‡∏µ‡πà‡πÅ‡∏ï‡∏Å‡∏ï‡πà‡∏≤‡∏á")
        
        # ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ï‡πà‡∏≠‡πÑ‡∏õ
        print(f"\nüí° ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ï‡πà‡∏≠‡πÑ‡∏õ:")
        print(f"   1. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏£‡∏¥‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ")
        print(f"   2. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏î‡πâ‡∏ß‡∏¢‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏£‡∏¥‡∏á‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")
        print(f"   3. ‡∏õ‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏á‡∏£‡∏∞‡∏ö‡∏ö‡∏ï‡∏≤‡∏°‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö")
    
    async def run_specific_test(self, questions: List[str], tenant_id: str = "company-a") -> Dict[str, Any]:
        """üéØ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÄ‡∏â‡∏û‡∏≤‡∏∞"""
        
        print(f"üéØ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö {len(questions)} ‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°")
        print("-" * 40)
        
        results = []
        
        for i, question in enumerate(questions, 1):
            print(f"\nüîç [{i}/{len(questions)}] {question}")
            
            result = await self._compare_single_question(question, tenant_id, f"specific_{i}")
            results.append(result)
            
            self._display_quick_result(result)
            
            # ‡∏´‡∏¢‡∏∏‡∏î‡∏û‡∏±‡∏Å‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°
            if i < len(questions):
                await asyncio.sleep(0.2)
        
        # ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏£‡∏ß‡∏°
        summary = self._calculate_summary(results)
        
        print(f"\nüìä ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö:")
        print(f"   Semi-Dynamic: {summary['semi_wins']}/{len(results)} ‡∏ä‡∏ô‡∏∞")
        print(f"   Fully Dynamic: {summary['dynamic_wins']}/{len(results)} ‡∏ä‡∏ô‡∏∞")
        print(f"   ‡πÄ‡∏™‡∏°‡∏≠: {summary['ties']}/{len(results)} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á")
        
        return {
            'results': results,
            'summary': summary,
            'using_mock': self.using_mock
        }
    
    def _calculate_summary(self, results: List[Dict[str, Any]]) -> Dict[str, Any]:
        """üìä ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏™‡∏£‡∏∏‡∏õ"""
        
        semi_wins = sum(1 for r in results if r['winner'] == 'semi_dynamic')
        dynamic_wins = sum(1 for r in results if r['winner'] == 'fully_dynamic')
        ties = sum(1 for r in results if r['winner'] == 'tie')
        
        semi_times = [r['metrics']['semi_dynamic_time'] for r in results 
                     if r['metrics'].get('semi_dynamic_time', 0) > 0]
        dynamic_times = [r['metrics']['fully_dynamic_time'] for r in results 
                        if r['metrics'].get('fully_dynamic_time', 0) > 0]
        
        return {
            'total_tests': len(results),
            'semi_wins': semi_wins,
            'dynamic_wins': dynamic_wins,
            'ties': ties,
            'overall': {
                'total_tests': len(results),
                'semi_dynamic_wins': semi_wins,
                'fully_dynamic_wins': dynamic_wins,
                'ties': ties
            },
            'performance': {
                'semi_dynamic_avg_time': sum(semi_times) / len(semi_times) if semi_times else 0,
                'fully_dynamic_avg_time': sum(dynamic_times) / len(dynamic_times) if dynamic_times else 0
            }
        }
    
    async def test_system_availability(self) -> Dict[str, bool]:
        """üîç ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏£‡∏∞‡∏ö‡∏ö‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà"""
        
        print("üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Ç‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏ö...")
        
        availability = {
            'semi_dynamic_available': False,
            'fully_dynamic_available': False,
            'database_available': False,
            'mock_mode': self.using_mock
        }
        
        # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Semi-Dynamic
        try:
            result = await self.semi_dynamic_agent.process_enhanced_question("test", "company-a")
            availability['semi_dynamic_available'] = True
            print("‚úÖ Semi-Dynamic Agent: ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô")
        except Exception as e:
            print(f"‚ùå Semi-Dynamic Agent: ‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏° ({str(e)[:50]}...)")
        
        # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Fully Dynamic
        try:
            if hasattr(self.fully_dynamic_agent, 'process_any_question'):
                result = await self.fully_dynamic_agent.process_any_question("test", "company-a")
            else:
                result = await self.fully_dynamic_agent.process_enhanced_question("test", "company-a")
            availability['fully_dynamic_available'] = True
            print("‚úÖ Fully Dynamic Agent: ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô")
        except Exception as e:
            print(f"‚ùå Fully Dynamic Agent: ‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏° ({str(e)[:50]}...)")
        
        # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà mock)
        if not self.using_mock:
            try:
                # ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ
                availability['database_available'] = True
                print("‚úÖ Database: ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô")
            except Exception as e:
                print(f"‚ùå Database: ‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏° ({str(e)[:50]}...)")
        else:
            availability['database_available'] = True  # Mock ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
            print("üé≠ Database: Mock mode")
        
        return availability


# ==========================================
# üß™ QUICK TEST SCENARIOS
# ==========================================

class QuickTestScenarios:
    """üß™ ‡∏ä‡∏∏‡∏î‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ - ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç import ‡πÅ‡∏•‡πâ‡∏ß"""
    
    def __init__(self):
        self.manager = ComparisonSystemManager()
    
    async def quick_comparison_demo(self):
        """üé™ Demo ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡πÅ‡∏ö‡∏ö‡πÄ‡∏£‡πá‡∏ß"""
        return await self.manager.run_quick_demo()
    
    async def interactive_test(self):
        """üéÆ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÅ‡∏ö‡∏ö Interactive"""
        
        print("üéÆ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÅ‡∏ö‡∏ö Interactive")
        print("=" * 40)
        print("‡∏û‡∏¥‡∏°‡∏û‡πå‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö (‡∏û‡∏¥‡∏°‡∏û‡πå 'exit' ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏≠‡∏≠‡∏Å)")
        print("‡∏û‡∏¥‡∏°‡∏û‡πå 'help' ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°")
        
        sample_questions = [
            "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î",
            "‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡∏õ‡∏µ 2024",
            "‡∏£‡∏≤‡∏Ñ‡∏≤‡∏≠‡∏∞‡πÑ‡∏´‡∏•‡πà Hitachi",
            "‡∏ó‡∏µ‡∏°‡∏ä‡πà‡∏≤‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πà‡∏á‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î",
            "‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏ô‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß"
        ]
        
        while True:
            question = input("\n‚ùì ‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°: ").strip()
            
            if question.lower() in ['exit', 'quit', '‡∏≠‡∏≠‡∏Å']:
                print("üëã ‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£!")
                break
            
            elif question.lower() == 'help':
                print("\nüí° ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏° HVAC:")
                for i, q in enumerate(sample_questions, 1):
                    print(f"   {i}. {q}")
                continue
            
            elif not question:
                continue
            
            print("üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö...")
            
            try:
                results = await self.manager.run_specific_test([question])
                
                if results and results['results']:
                    result = results['results'][0]
                    winner = result['winner']
                    metrics = result['metrics']
                    
                    print(f"üèÜ ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå: {winner.replace('_', ' ').title()} ‡∏ä‡∏ô‡∏∞!")
                    
                    # ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°
                    show_detail = input("‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î? (y/n): ").lower()
                    if show_detail in ['y', 'yes', '‡πÉ‡∏ä‡πà']:
                        print(f"\nüìä ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î:")
                        print(f"   Semi-Dynamic: {'‚úÖ' if metrics.get('semi_dynamic_success') else '‚ùå'} "
                              f"({metrics.get('semi_dynamic_time', 0):.2f}s)")
                        print(f"   Fully Dynamic: {'‚úÖ' if metrics.get('fully_dynamic_success') else '‚ùå'} "
                              f"({metrics.get('fully_dynamic_time', 0):.2f}s)")
                        
                        # ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á
                        if metrics.get('semi_dynamic_success'):
                            semi_answer = result['semi_dynamic_result']['answer'][:150]
                            print(f"\nüìù Semi Answer: {semi_answer}...")
                        
                        if metrics.get('fully_dynamic_success'):
                            dynamic_answer = result['fully_dynamic_result']['answer'][:150]
                            print(f"üìù Dynamic Answer: {dynamic_answer}...")
                
            except Exception as e:
                print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {str(e)}")
    
    async def check_system_status(self):
        """üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏£‡∏∞‡∏ö‡∏ö"""
        
        print("üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏£‡∏∞‡∏ö‡∏ö...")
        availability = await self.manager.test_system_availability()
        
        print(f"\nüìä ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏£‡∏∞‡∏ö‡∏ö:")
        for system, status in availability.items():
            status_emoji = "‚úÖ" if status else "‚ùå"
            print(f"   {status_emoji} {system}: {'‡∏û‡∏£‡πâ‡∏≠‡∏°' if status else '‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°'}")
        
        if availability['mock_mode']:
            print(f"\nüé≠ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÉ‡∏ô Mock Mode")
            print(f"üí° ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏à‡∏£‡∏¥‡∏á ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏£‡∏∞‡∏ö‡∏ö Agent ‡πÅ‡∏•‡∏∞‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")
        
        return availability


# ==========================================
# üöÄ MAIN EXECUTION
# ==========================================

async def main():
    """üöÄ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö"""
    
    print("üîÑ ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏∑‡∏≠‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏£‡∏∞‡∏ö‡∏ö AI")
    print("=" * 50)
    
    scenarios = QuickTestScenarios()
    
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡πà‡∏≠‡∏ô
    await scenarios.check_system_status()
    
    print(f"\nüéØ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö:")
    print("1. Demo ‡πÄ‡∏£‡πá‡∏ß (3 ‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°)")
    print("2. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÅ‡∏ö‡∏ö Interactive")  
    print("3. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏£‡∏∞‡∏ö‡∏ö")
    print("4. ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°")
    
    choice = input("\n‡πÄ‡∏•‡∏∑‡∏≠‡∏Å (1-4): ").strip()
    
    if choice == "1":
        await scenarios.quick_comparison_demo()
    
    elif choice == "2":
        await scenarios.interactive_test()
    
    elif choice == "3":
        await scenarios.check_system_status()
    
    elif choice == "4":
        print("üëã ‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£!")
        return
    
    else:
        print("‚ùå ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á")
        await main()  # ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏ã‡πâ‡∏≥

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\nüëã ‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏ñ‡∏π‡∏Å‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å")
    except Exception as e:
        print(f"\n‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {str(e)}")
        print("üí° ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤")