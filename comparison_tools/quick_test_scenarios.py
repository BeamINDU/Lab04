# quick_test_scenarios.py
# ЁЯзк р╕Кр╕╕р╕Фр╕Чр╕Фр╕кр╕нр╕Ър╕Юр╕гр╣Йр╕нр╕бр╣Гр╕Кр╣Йр╕кр╕│р╕лр╕гр╕▒р╕Ър╣Ар╕Ыр╕гр╕╡р╕вр╕Ър╣Ар╕Чр╕╡р╕вр╕Ър╕гр╕░р╕Ър╕Ъ

import asyncio
from comparison_system_manager import ComparisonSystemManager

class QuickTestScenarios:
    """ЁЯзк р╕Кр╕╕р╕Фр╕Чр╕Фр╕кр╕нр╕Ър╕Хр╣Ир╕▓р╕Зр╣Ж р╕кр╕│р╕лр╕гр╕▒р╕Ър╣Ар╕Ыр╕гр╕╡р╕вр╕Ър╣Ар╕Чр╕╡р╕вр╕Ър╕гр╕░р╕Ър╕Ъ"""
    
    def __init__(self):
        self.manager = ComparisonSystemManager()
        
        # р╕Кр╕╕р╕Фр╕Чр╕Фр╕кр╕нр╕Ър╕Хр╣Ир╕▓р╕Зр╣Ж
        self.test_scenarios = {
            'daily_operations': {
                'name': 'ЁЯУЛ р╕Бр╕▓р╕гр╣Гр╕Кр╣Йр╕Зр╕▓р╕Щр╕Ыр╕гр╕░р╕Ир╕│р╕зр╕▒р╕Щ',
                'questions': [
                    "р╕Ир╕│р╕Щр╕зр╕Щр╕ер╕╣р╕Бр╕Др╣Йр╕▓р╕Чр╕▒р╣Йр╕Зр╕лр╕бр╕Ф",
                    "р╕вр╕нр╕Фр╕Вр╕▓р╕вр╣Ар╕Фр╕╖р╕нр╕Щр╕Щр╕╡р╣Й",
                    "р╕гр╕▓р╕вр╕Кр╕╖р╣Ир╕нр╕Чр╕╡р╕бр╕Кр╣Ир╕▓р╕З", 
                    "р╣Бр╕Ьр╕Щр╕Зр╕▓р╕Щр╕зр╕▒р╕Щр╕Щр╕╡р╣Й",
                    "р╕нр╕░р╣Др╕лр╕ер╣Ир╕Чр╕╡р╣Ир╕лр╕бр╕Фр╕кр╕Хр╣Зр╕нр╕Б"
                ]
            },
            
            'business_intelligence': {
                'name': 'ЁЯУК р╕Бр╕▓р╕гр╕зр╕┤р╣Ар╕Др╕гр╕▓р╕░р╕лр╣Мр╕Чр╕▓р╕Зр╕Шр╕╕р╕гр╕Бр╕┤р╕И',
                'questions': [
                    "р╕ер╕╣р╕Бр╕Др╣Йр╕▓р╕Чр╕╡р╣Ир╣Гр╕Кр╣Йр╕Ър╕гр╕┤р╕Бр╕▓р╕гр╕бр╕▓р╕Бр╕Чр╕╡р╣Ир╕кр╕╕р╕Ф 5 р╕нр╕▒р╕Щр╕Фр╕▒р╕Ъ",
                    "р╣Ар╕Ыр╕гр╕╡р╕вр╕Ър╣Ар╕Чр╕╡р╕вр╕Ър╕вр╕нр╕Фр╕Вр╕▓р╕в PM р╕Бр╕▒р╕Ъ Overhaul",
                    "р╕Чр╕╡р╕бр╕Кр╣Ир╕▓р╕Зр╣Др╕лр╕Щр╕бр╕╡р╕Ыр╕гр╕░р╕кр╕┤р╕Чр╕Шр╕┤р╕ар╕▓р╕Юр╕кр╕╣р╕Зр╕кр╕╕р╕Ф",
                    "р╣Бр╕Щр╕зр╣Вр╕Щр╣Йр╕бр╕Бр╕▓р╕гр╕Вр╕▓р╕вр╣Гр╕Щр╣Бр╕Хр╣Ир╕ер╕░р╣Ар╕Фр╕╖р╕нр╕Щ",
                    "р╕нр╕▒р╕Хр╕гр╕▓р╕Бр╕▓р╕гр╕Бр╕ер╕▒р╕Ър╕бр╕▓р╣Гр╕Кр╣Йр╕Ър╕гр╕┤р╕Бр╕▓р╕гр╕Вр╕нр╕Зр╕ер╕╣р╕Бр╕Др╣Йр╕▓"
                ]
            },
            
            'inventory_management': {
                'name': 'ЁЯУж р╕Бр╕▓р╕гр╕Ир╕▒р╕Фр╕Бр╕▓р╕гр╕кр╕┤р╕Щр╕Др╣Йр╕▓р╕Др╕Зр╕Др╕ер╕▒р╕З',
                'questions': [
                    "р╕нр╕░р╣Др╕лр╕ер╣Ир╕Чр╕╡р╣Ир╕гр╕▓р╕Др╕▓р╕кр╕╣р╕Зр╕Чр╕╡р╣Ир╕кр╕╕р╕Ф 10 р╕нр╕▒р╕Щр╕Фр╕▒р╕Ъ",
                    "р╕нр╕░р╣Др╕лр╕ер╣И Hitachi р╕Чр╕▒р╣Йр╕Зр╕лр╕бр╕Ф",
                    "р╕кр╕Хр╣Зр╕нр╕Бр╕Чр╕╡р╣Ир╕Хр╣Ир╕│р╕Бр╕зр╣Ир╕▓ 5 р╕Кр╕┤р╣Йр╕Щ",
                    "р╕нр╕░р╣Др╕лр╕ер╣Ир╕Чр╕╡р╣Ир╣Др╕бр╣Ир╣Ар╕Др╕вр╣Гр╕Кр╣Йр╕бр╕▓р╕Бр╕Бр╕зр╣Ир╕▓ 6 р╣Ар╕Фр╕╖р╕нр╕Щ",
                    "р╕бр╕╣р╕ер╕Др╣Ир╕▓р╕кр╕┤р╕Щр╕Др╣Йр╕▓р╕Др╕Зр╕Др╕ер╕▒р╕Зр╕Чр╕▒р╣Йр╕Зр╕лр╕бр╕Ф"
                ]
            },
            
            'customer_relationship': {
                'name': 'ЁЯСе р╕Бр╕▓р╕гр╕Ир╕▒р╕Фр╕Бр╕▓р╕гр╕ер╕╣р╕Бр╕Др╣Йр╕▓р╕кр╕▒р╕бр╕Юр╕▒р╕Щр╕Шр╣М',
                'questions': [
                    "р╕ер╕╣р╕Бр╕Др╣Йр╕▓р╣Гр╕лр╕бр╣Ир╣Гр╕Щр╣Ар╕Фр╕╖р╕нр╕Щр╕Щр╕╡р╣Й",
                    "р╕ер╕╣р╕Бр╕Др╣Йр╕▓р╕Чр╕╡р╣Ир╣Др╕бр╣Ир╣Др╕Фр╣Йр╣Гр╕Кр╣Йр╕Ър╕гр╕┤р╕Бр╕▓р╕гр╕бр╕▓р╕Бр╕Бр╕зр╣Ир╕▓ 3 р╣Ар╕Фр╕╖р╕нр╕Щ",
                    "р╕ер╕╣р╕Бр╕Др╣Йр╕▓р╕Чр╕╡р╣Ир╕бр╕╡р╕Др╣Ир╕▓р╣Гр╕Кр╣Йр╕Ир╣Ир╕▓р╕вр╕кр╕╣р╕Зр╕Чр╕╡р╣Ир╕кр╕╕р╕Ф",
                    "р╕Ыр╕гр╕░р╕зр╕▒р╕Хр╕┤р╕Бр╕▓р╕гр╣Гр╕Кр╣Йр╕Ър╕гр╕┤р╕Бр╕▓р╕гр╕Вр╕нр╕З р╕Ър╕гр╕┤р╕йр╕▒р╕Ч ABC",
                    "р╕ер╕╣р╕Бр╕Др╣Йр╕▓р╕Чр╕╡р╣Ир╕бр╕╡р╕ир╕▒р╕Бр╕вр╕ар╕▓р╕Юр╕кр╕╣р╕З"
                ]
            },
            
            'complex_queries': {
                'name': 'ЁЯзй р╕Др╕│р╕Цр╕▓р╕бр╕Лр╕▒р╕Ър╕Лр╣Йр╕нр╕Щ',
                'questions': [
                    "р╕ер╕╣р╕Бр╕Др╣Йр╕▓р╕Чр╕╡р╣Ир╣Гр╕Кр╣Йр╕Ър╕гр╕┤р╕Бр╕▓р╕г Hitachi р╣Бр╕Хр╣Ир╣Др╕бр╣Ир╣Ар╕Др╕вр╕Лр╕╖р╣Йр╕нр╕нр╕░р╣Др╕лр╕ер╣И Hitachi",
                    "р╕Др╕зр╕▓р╕бр╕кр╕▒р╕бр╕Юр╕▒р╕Щр╕Шр╣Мр╕гр╕░р╕лр╕зр╣Ир╕▓р╕Зр╕гр╕▓р╕Др╕▓р╕Ър╕гр╕┤р╕Бр╕▓р╕гр╕Бр╕▒р╕Ър╕Др╕зр╕▓р╕бр╕Юр╕╢р╕Зр╕Юр╕нр╣Гр╕Ир╕Вр╕нр╕Зр╕ер╕╣р╕Бр╕Др╣Йр╕▓",
                    "р╕Др╕▓р╕Фр╕Бр╕▓р╕гр╕Ур╣Мр╕Др╕зр╕▓р╕бр╕Хр╣Йр╕нр╕Зр╕Бр╕▓р╕гр╕нр╕░р╣Др╕лр╕ер╣Ир╣Гр╕Щ 3 р╣Ар╕Фр╕╖р╕нр╕Щр╕Вр╣Йр╕▓р╕Зр╕лр╕Щр╣Йр╕▓",
                    "ROI р╕Вр╕нр╕Зр╕Бр╕▓р╕гр╕ер╕Зр╕Чр╕╕р╕Щр╣Гр╕Щр╣Бр╕Хр╣Ир╕ер╕░р╕Ыр╕гр╕░р╣Ар╕ар╕Чр╕Ър╕гр╕┤р╕Бр╕▓р╕г",
                    "р╣Ар╕лр╕Хр╕╕р╕Ьр╕ер╕Чр╕╡р╣Ир╕ер╕╣р╕Бр╕Др╣Йр╕▓р╕Ър╕▓р╕Зр╕гр╕▓р╕вр╕лр╕вр╕╕р╕Фр╣Гр╕Кр╣Йр╕Ър╕гр╕┤р╕Бр╕▓р╕г"
                ]
            },
            
            'edge_cases': {
                'name': 'ЁЯФН р╕Бр╕гр╕Ур╕╡р╕Юр╕┤р╣Ар╕ир╕й',
                'questions': [
                    "р╕ер╕╣р╕Бр╕Др╣Йр╕▓р╕Чр╕╡р╣Ир╕Кр╕╖р╣Ир╕нр╣Ар╕лр╕бр╕╖р╕нр╕Щр╕Бр╕▒р╕Ър╕Кр╕╖р╣Ир╕нр╣Бр╕Ър╕гр╕Щр╕Фр╣М",
                    "р╕Зр╕▓р╕Щр╕Чр╕╡р╣Ир╣Гр╕Кр╣Йр╣Ар╕зр╕ер╕▓р╕Щр╕▓р╕Щр╕Чр╕╡р╣Ир╕кр╕╕р╕Ф",
                    "р╕нр╕░р╣Др╕лр╕ер╣Ир╕Чр╕╡р╣Ир╕Кр╕╖р╣Ир╕нр╕бр╕╡р╕Хр╕▒р╕зр╣Ар╕ер╕В",
                    "р╕Чр╕╡р╕бр╕Кр╣Ир╕▓р╕Зр╕Чр╕╡р╣Ир╕Чр╕│р╕Зр╕▓р╕Щр╣Гр╕Щр╕зр╕▒р╕Щр╕лр╕вр╕╕р╕Ф",
                    "р╕Др╕зр╕▓р╕бр╕Ьр╕┤р╕Фр╕Юр╕ер╕▓р╕Фр╕Чр╕╡р╣Ир╣Ар╕Бр╕┤р╕Фр╕Вр╕╢р╣Йр╕Щр╕Ър╣Ир╕нр╕вр╕Чр╕╡р╣Ир╕кр╕╕р╕Ф"
                ]
            },
            
            'performance_stress': {
                'name': 'тЪб р╕Чр╕Фр╕кр╕нр╕Ър╕Др╕зр╕▓р╕бр╣Ар╕гр╣Зр╕з',
                'questions': [
                    "SELECT * FROM sales2024 LIMIT 1",
                    "COUNT(*) р╕Ир╕▓р╕Бр╕Чр╕╕р╕Бр╕Хр╕▓р╕гр╕▓р╕З",
                    "р╕Вр╣Йр╕нр╕бр╕╣р╕ер╕Хр╕▒р╕зр╕нр╕вр╣Ир╕▓р╕Зр╕Ир╕▓р╕Бр╕Чр╕╕р╕Бр╕Хр╕▓р╕гр╕▓р╕З",
                    "р╕кр╕Цр╕┤р╕Хр╕┤р╕Юр╕╖р╣Йр╕Щр╕Рр╕▓р╕Щр╕Чр╕▒р╣Йр╕Зр╕лр╕бр╕Ф",
                    "р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ър╕Бр╕▓р╕гр╣Ар╕Кр╕╖р╣Ир╕нр╕бр╕Хр╣Ир╕нр╕Рр╕▓р╕Щр╕Вр╣Йр╕нр╕бр╕╣р╕е"
                ]
            }
        }
    
    async def run_scenario(self, scenario_name: str, tenant_id: str = "company-a"):
        """ЁЯОп р╕гр╕▒р╕Щр╕Чр╕Фр╕кр╕нр╕Ър╣Бр╕Ър╕Ъ scenario р╣Ар╕Йр╕Юр╕▓р╕░"""
        
        if scenario_name not in self.test_scenarios:
            print(f"тЭМ р╣Др╕бр╣Ир╕Юр╕Ъ scenario: {scenario_name}")
            return
        
        scenario = self.test_scenarios[scenario_name]
        print(f"ЁЯЪА р╣Ар╕гр╕┤р╣Ир╕бр╕Чр╕Фр╕кр╕нр╕Ъ: {scenario['name']}")
        print("=" * 60)
        
        results = await self.manager.run_specific_test(scenario['questions'], tenant_id)
        
        print(f"\nтЬЕ р╣Ар╕кр╕гр╣Зр╕Ир╕кр╕┤р╣Йр╕Щр╕Бр╕▓р╕гр╕Чр╕Фр╕кр╕нр╕Ъ: {scenario['name']}")
        return results
    
    async def run_all_scenarios(self, tenant_id: str = "company-a"):
        """ЁЯПБ р╕гр╕▒р╕Щр╕Чр╕Фр╕кр╕нр╕Ър╕Чр╕╕р╕Б scenario"""
        
        print("ЁЯЪА р╣Ар╕гр╕┤р╣Ир╕бр╕Чр╕Фр╕кр╕нр╕Ър╕Чр╕╕р╕Б Scenario")
        print("=" * 80)
        
        all_results = {}
        
        for scenario_name, scenario in self.test_scenarios.items():
            print(f"\nЁЯУН р╕Бр╕│р╕ер╕▒р╕Зр╕Чр╕Фр╕кр╕нр╕Ъ: {scenario['name']}")
            print("-" * 40)
            
            try:
                results = await self.run_scenario(scenario_name, tenant_id)
                all_results[scenario_name] = results
                
                # р╕кр╕гр╕╕р╕Ыр╕Ьр╕ер╣Бр╕Хр╣Ир╕ер╕░ scenario
                summary = results['summary']['overall']
                print(f"   ЁЯУК р╕кр╕гр╕╕р╕Ы: Semi({summary['semi_dynamic_wins']}) vs Dynamic({summary['fully_dynamic_wins']}) vs Tie({summary['ties']})")
                
            except Exception as e:
                print(f"   тЭМ р╕Ьр╕┤р╕Фр╕Юр╕ер╕▓р╕Ф: {str(e)}")
                all_results[scenario_name] = {'error': str(e)}
            
            await asyncio.sleep(1)  # р╕лр╕вр╕╕р╕Фр╕Юр╕▒р╕Бр╕гр╕░р╕лр╕зр╣Ир╕▓р╕З scenario
        
        # р╕кр╕гр╕╕р╕Ыр╕Ьр╕ер╕гр╕зр╕бр╕Чр╕▒р╣Йр╕Зр╕лр╕бр╕Ф
        self._display_overall_summary(all_results)
        
        return all_results
    
    def _display_overall_summary(self, all_results: dict):
        """ЁЯУК р╣Бр╕кр╕Фр╕Зр╕кр╕гр╕╕р╕Ыр╕Ьр╕ер╕гр╕зр╕бр╕Чр╕▒р╣Йр╕Зр╕лр╕бр╕Ф"""
        
        print("\n" + "=" * 80)
        print("ЁЯПЖ р╕кр╕гр╕╕р╕Ыр╕Ьр╕ер╕гр╕зр╕бр╕Чр╕╕р╕Б Scenario")
        print("=" * 80)
        
        total_semi_wins = 0
        total_dynamic_wins = 0
        total_ties = 0
        total_tests = 0
        
        scenario_results = []
        
        for scenario_name, result in all_results.items():
            if 'error' in result:
                continue
                
            scenario_info = self.test_scenarios[scenario_name]
            summary = result['summary']['overall']
            
            scenario_results.append({
                'name': scenario_info['name'],
                'semi_wins': summary['semi_dynamic_wins'],
                'dynamic_wins': summary['fully_dynamic_wins'], 
                'ties': summary['ties'],
                'total': summary['total_tests']
            })
            
            total_semi_wins += summary['semi_dynamic_wins']
            total_dynamic_wins += summary['fully_dynamic_wins']
            total_ties += summary['ties']
            total_tests += summary['total_tests']
        
        # р╣Бр╕кр╕Фр╕Зр╕Ьр╕ер╣Бр╕Хр╣Ир╕ер╕░ scenario
        print(f"\nЁЯУЛ р╕Ьр╕ер╕Хр╕▓р╕б Scenario:")
        for result in scenario_results:
            print(f"   {result['name']}")
            print(f"     Semi: {result['semi_wins']}/{result['total']} "
                  f"Dynamic: {result['dynamic_wins']}/{result['total']} "
                  f"Tie: {result['ties']}/{result['total']}")
        
        # р╕кр╕гр╕╕р╕Ыр╕гр╕зр╕б
        print(f"\nЁЯПЖ р╕кр╕гр╕╕р╕Ыр╕гр╕зр╕бр╕Чр╕▒р╣Йр╕Зр╕лр╕бр╕Ф ({total_tests} р╕Др╕│р╕Цр╕▓р╕б):")
        print(f"   ЁЯеЗ Semi-Dynamic:   {total_semi_wins} р╕Кр╕Щр╕░ ({total_semi_wins/total_tests:.1%})")
        print(f"   ЁЯеЗ Fully Dynamic:  {total_dynamic_wins} р╕Кр╕Щр╕░ ({total_dynamic_wins/total_tests:.1%})")
        print(f"   ЁЯдЭ р╣Ар╕кр╕бр╕н:           {total_ties} р╕Др╕гр╕▒р╣Йр╕З ({total_ties/total_tests:.1%})")
        
        # р╣Бр╕Щр╕░р╕Щр╕│р╕Бр╕▓р╕гр╣Гр╕Кр╣Йр╕Зр╕▓р╕Щ
        print(f"\nЁЯТб р╕Др╕│р╣Бр╕Щр╕░р╕Щр╕│р╕Бр╕▓р╕гр╣Гр╕Кр╣Йр╕Зр╕▓р╕Щ:")
        
        if total_dynamic_wins > total_semi_wins * 1.5:
            print("   тЬЕ р╣Бр╕Щр╕░р╕Щр╕│р╣Гр╕Кр╣Й Fully Dynamic р╣Ар╕Ыр╣Зр╕Щр╕лр╕ер╕▒р╕Б")
            print("   ЁЯУЭ р╣Ар╕лр╕Хр╕╕р╕Ьр╕е: р╕Хр╕нр╕Ър╕Др╕│р╕Цр╕▓р╕бр╣Др╕Фр╣Йр╕лр╕ер╕▓р╕Бр╕лр╕ер╕▓р╕вр╣Бр╕ер╕░р╕Лр╕▒р╕Ър╕Лр╣Йр╕нр╕Щр╕Бр╕зр╣Ир╕▓")
        elif total_semi_wins > total_dynamic_wins * 1.2:
            print("   тЬЕ р╣Бр╕Щр╕░р╕Щр╕│р╣Гр╕Кр╣Й Semi-Dynamic р╣Ар╕Ыр╣Зр╕Щр╕лр╕ер╕▒р╕Б") 
            print("   ЁЯУЭ р╣Ар╕лр╕Хр╕╕р╕Ьр╕е: р╣Ар╕гр╣Зр╕зр╣Бр╕ер╕░р╣Ар╕кр╕Цр╕╡р╕вр╕гр╕Бр╕зр╣Ир╕▓р╕кр╕│р╕лр╕гр╕▒р╕Ър╕Зр╕▓р╕Щр╕Ыр╕гр╕░р╕Ир╕│")
        else:
            print("   тЬЕ р╣Бр╕Щр╕░р╕Щр╕│р╣Гр╕Кр╣Йр╣Бр╕Ър╕Ъ Hybrid")
            print("   ЁЯУЭ р╣Ар╕лр╕Хр╕╕р╕Ьр╕е: Semi-Dynamic р╕кр╕│р╕лр╕гр╕▒р╕Ър╕Зр╕▓р╕Щр╕Ыр╕гр╕░р╕Ир╕│, Fully Dynamic р╕кр╕│р╕лр╕гр╕▒р╕Ър╕зр╕┤р╣Ар╕Др╕гр╕▓р╕░р╕лр╣М")
        
        print("=" * 80)
    
    async def quick_comparison_demo(self):
        """ЁЯОк Demo р╕Бр╕▓р╕гр╣Ар╕Ыр╕гр╕╡р╕вр╕Ър╣Ар╕Чр╕╡р╕вр╕Ър╣Бр╕Ър╕Ър╣Ар╕гр╣Зр╕з"""
        
        print("ЁЯОк DEMO р╣Ар╕Ыр╕гр╕╡р╕вр╕Ър╣Ар╕Чр╕╡р╕вр╕Ъ Semi-Dynamic vs Fully Dynamic")
        print("=" * 60)
        
        demo_questions = [
            "р╕Ир╕│р╕Щр╕зр╕Щр╕ер╕╣р╕Бр╕Др╣Йр╕▓р╕Чр╕▒р╣Йр╕Зр╕лр╕бр╕Ф",  # р╕Др╕│р╕Цр╕▓р╕бр╕Зр╣Ир╕▓р╕в
            "р╕ер╕╣р╕Бр╕Др╣Йр╕▓р╕Чр╕╡р╣Ир╣Гр╕Кр╣Йр╕Ър╕гр╕┤р╕Бр╕▓р╕гр╕бр╕▓р╕Бр╕Чр╕╡р╣Ир╕кр╕╕р╕Ф 3 р╕нр╕▒р╕Щр╕Фр╕▒р╕Ъ",  # р╕Др╕│р╕Цр╕▓р╕бр╕Бр╕ер╕▓р╕З
            "р╕ер╕╣р╕Бр╕Др╣Йр╕▓р╕Чр╕╡р╣Ир╣Гр╕Кр╣Йр╕Ър╕гр╕┤р╕Бр╕▓р╕г Hitachi р╣Бр╕Хр╣Ир╣Др╕бр╣Ир╣Ар╕Др╕вр╕Лр╕╖р╣Йр╕нр╕нр╕░р╣Др╕лр╕ер╣И Hitachi"  # р╕Др╕│р╕Цр╕▓р╕бр╕вр╕▓р╕Б
        ]
        
        print("ЁЯОп р╕Чр╕Фр╕кр╕нр╕Ър╕Фр╣Йр╕зр╕в 3 р╕Др╕│р╕Цр╕▓р╕бр╕Хр╕▒р╕зр╕нр╕вр╣Ир╕▓р╕З:")
        for i, q in enumerate(demo_questions, 1):
            print(f"   {i}. {q}")
        
        print("\nЁЯЪА р╣Ар╕гр╕┤р╣Ир╕бр╕Чр╕Фр╕кр╕нр╕Ъ...")
        
        results = await self.manager.run_specific_test(demo_questions)
        
        # р╣Бр╕кр╕Фр╕Зр╕Вр╣Йр╕нр╕кр╕гр╕╕р╕Ы
        summary = results['summary']
        overall = summary['overall']
        
        print(f"\nЁЯПБ р╕Ьр╕ер╕ер╕▒р╕Юр╕Шр╣М Demo:")
        print(f"   Semi-Dynamic: {overall['semi_dynamic_wins']}/{overall['total_tests']} р╕Кр╕Щр╕░")
        print(f"   Fully Dynamic: {overall['fully_dynamic_wins']}/{overall['total_tests']} р╕Кр╕Щр╕░")
        
        winner = "Semi-Dynamic" if overall['semi_dynamic_wins'] > overall['fully_dynamic_wins'] else \
                "Fully Dynamic" if overall['fully_dynamic_wins'] > overall['semi_dynamic_wins'] else "р╣Ар╕кр╕бр╕н"
        
        print(f"   ЁЯПЖ р╕Ьр╕╣р╣Йр╕Кр╕Щр╕░: {winner}")
        
        return results
    
    async def interactive_test(self):
        """ЁЯОо р╕Чр╕Фр╕кр╕нр╕Ър╣Бр╕Ър╕Ъ Interactive"""
        
        print("ЁЯОо р╕Чр╕Фр╕к┘Ир╕Ър╣Бр╕Ър╕Ъ Interactive")
        print("=" * 40)
        print("р╕Юр╕┤р╕бр╕Юр╣Мр╕Др╕│р╕Цр╕▓р╕бр╣Ар╕Юр╕╖р╣Ир╕нр╣Ар╕Ыр╕гр╕╡р╕вр╕Ър╣Ар╕Чр╕╡р╕вр╕Ъ (р╕Юр╕┤р╕бр╕Юр╣М 'exit' р╣Ар╕Юр╕╖р╣Ир╕нр╕нр╕нр╕Б)")
        
        while True:
            question = input("\nтЭУ р╕Др╕│р╕Цр╕▓р╕б: ").strip()
            
            if question.lower() in ['exit', 'quit', 'р╕нр╕нр╕Б']:
                print("ЁЯСЛ р╕Вр╕нр╕Ър╕Др╕╕р╕Ур╕Чр╕╡р╣Ир╣Гр╕Кр╣Йр╕Ър╕гр╕┤р╕Бр╕▓р╕г!")
                break
            
            if not question:
                continue
            
            print("ЁЯФД р╕Бр╕│р╕ер╕▒р╕Зр╣Ар╕Ыр╕гр╕╡р╕вр╕Ър╣Ар╕Чр╕╡р╕вр╕Ъ...")
            
            try:
                results = await self.manager.run_specific_test([question])
                
                # р╣Бр╕кр╕Фр╕Зр╕Ьр╕ер╕кр╕гр╕╕р╕Ы
                result = results['results'][0]
                winner = result['winner']
                
                print(f"ЁЯПЖ р╕Ьр╕ер╕ер╕▒р╕Юр╕Шр╣М: {winner.replace('_', ' ').title()} р╕Кр╕Щр╕░!")
                
                # р╣Бр╕кр╕Фр╕Зр╕Вр╣Йр╕нр╕бр╕╣р╕ер╣Ар╕Юр╕┤р╣Ир╕бр╣Ар╕Хр╕┤р╕бр╕лр╕▓р╕Бр╕Хр╣Йр╕нр╕Зр╕Бр╕▓р╕г
                show_detail = input("р╕Хр╣Йр╕нр╕Зр╕Бр╕▓р╕гр╕Фр╕╣р╕гр╕▓р╕вр╕ер╕░р╣Ар╕нр╕╡р╕вр╕Ф? (y/n): ").lower()
                if show_detail in ['y', 'yes', 'р╣Гр╕Кр╣И']:
                    semi = result['metrics']
                    print(f"\nЁЯУК р╕гр╕▓р╕вр╕ер╕░р╣Ар╕нр╕╡р╕вр╕Ф:")
                    print(f"   Semi-Dynamic: {'тЬЕ' if semi.get('semi_dynamic_success') else 'тЭМ'} "
                          f"({semi.get('semi_dynamic_time', 0):.2f}s)")
                    print(f"   Fully Dynamic: {'тЬЕ' if semi.get('fully_dynamic_success') else 'тЭМ'} "
                          f"({semi.get('fully_dynamic_time', 0):.2f}s)")
                
            except Exception as e:
                print(f"тЭМ р╣Ар╕Бр╕┤р╕Фр╕Вр╣Йр╕нр╕Ьр╕┤р╕Фр╕Юр╕ер╕▓р╕Ф: {str(e)}")
    
    def list_available_scenarios(self):
        """ЁЯУЛ р╣Бр╕кр╕Фр╕Зр╕гр╕▓р╕вр╕Бр╕▓р╕г scenario р╕Чр╕╡р╣Ир╕бр╕╡"""
        
        print("ЁЯУЛ Scenario р╕Чр╕╡р╣Ир╕бр╕╡р╣Гр╕лр╣Йр╕Чр╕Фр╕кр╕нр╕Ъ:")
        print("-" * 40)
        
        for i, (key, scenario) in enumerate(self.test_scenarios.items(), 1):
            print(f"{i}. {scenario['name']} ({len(scenario['questions'])} р╕Др╕│р╕Цр╕▓р╕б)")
            print(f"   Key: '{key}'")
        
        print("\nЁЯТб р╕зр╕┤р╕Шр╕╡р╣Гр╕Кр╣Й:")
        print("   await scenarios.run_scenario('daily_operations')")
        print("   await scenarios.run_all_scenarios()")


# ==========================================
# ЁЯОп EXECUTION EXAMPLES
# ==========================================

async def demo_quick_tests():
    """ЁЯОк р╕Хр╕▒р╕зр╕нр╕вр╣Ир╕▓р╕Зр╕Бр╕▓р╕гр╣Гр╕Кр╣Йр╕Зр╕▓р╕Щ"""
    
    scenarios = QuickTestScenarios()
    
    print("ЁЯОп р╣Ар╕ер╕╖р╕нр╕Бр╕Бр╕▓р╕гр╕Чр╕Фр╕кр╕нр╕Ъ:")
    print("1. Demo р╣Ар╕гр╣Зр╕з (3 р╕Др╕│р╕Цр╕▓р╕б)")
    print("2. р╕Чр╕Фр╕кр╕нр╕Ъ Scenario р╣Ар╕Йр╕Юр╕▓р╕░")
    print("3. р╕Чр╕Фр╕кр╕нр╕Ър╕Чр╕╕р╕Б Scenario")
    print("4. р╕Чр╕Фр╕кр╕нр╕Ър╣Бр╕Ър╕Ъ Interactive")
    print("5. р╕Фр╕╣р╕гр╕▓р╕вр╕Бр╕▓р╕г Scenario")
    
    choice = input("\nр╣Ар╕ер╕╖р╕нр╕Б (1-5): ").strip()
    
    if choice == "1":
        await scenarios.quick_comparison_demo()
    
    elif choice == "2":
        scenarios.list_available_scenarios()
        scenario_key = input("\nр╣Гр╕кр╣И key р╕Вр╕нр╕З scenario: ").strip()
        await scenarios.run_scenario(scenario_key)
    
    elif choice == "3":
        confirm = input("р╕Чр╕Фр╕кр╕нр╕Ър╕Чр╕╕р╕Б scenario р╕Ир╕░р╣Гр╕Кр╣Йр╣Ар╕зр╕ер╕▓р╕Щр╕▓р╕Щ р╕Хр╣Йр╕нр╕Зр╕Бр╕▓р╕гр╕Фр╕│р╣Ар╕Щр╕┤р╕Щр╕Хр╣Ир╕н? (y/n): ")
        if confirm.lower() in ['y', 'yes', 'р╣Гр╕Кр╣И']:
            await scenarios.run_all_scenarios()
    
    elif choice == "4":
        await scenarios.interactive_test()
    
    elif choice == "5":
        scenarios.list_available_scenarios()
    
    else:
        print("тЭМ р╕Хр╕▒р╕зр╣Ар╕ер╕╖р╕нр╕Бр╣Др╕бр╣Ир╕Цр╕╣р╕Бр╕Хр╣Йр╕нр╕З")


# ==========================================
# ЁЯЪА MAIN EXECUTION
# ==========================================

if __name__ == "__main__":
    asyncio.run(demo_quick_tests())