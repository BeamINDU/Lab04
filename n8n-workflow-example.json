{
  "name": "test3",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "company-a-chat",
        "responseMode": "responseNode",
        "options": {}
      },
      "id": "f5bc79f8-3229-433c-b9ed-267195180260",
      "name": "Webhook Company A",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [
        80,
        -40
      ],
      "webhookId": "company-a-chat"
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "company-b-chat",
        "responseMode": "responseNode",
        "options": {}
      },
      "id": "8216dc87-4182-4dc8-9627-e12f4e7f656e",
      "name": "Webhook Company B",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [
        80,
        160
      ],
      "webhookId": "company-b-chat"
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "company-c-chat",
        "responseMode": "responseNode",
        "options": {}
      },
      "id": "94ed59bb-d773-465e-8f74-01cc443c7a47",
      "name": "Webhook Company C",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [
        80,
        360
      ],
      "webhookId": "company-c-chat"
    },
    {
      "parameters": {
        "jsCode": "// Extract tenant information from webhook execution\nconst inputData = $input.first().json;\n\n// Get webhook URL to determine tenant\nconst webhookUrl = inputData.webhookUrl || '';\nlet tenantId = 'company-a'; // default\n\n// Determine tenant from webhook URL\nif (webhookUrl.includes('company-a-chat')) {\n    tenantId = 'company-a';\n} else if (webhookUrl.includes('company-b-chat')) {\n    tenantId = 'company-b';\n} else if (webhookUrl.includes('company-c-chat')) {\n    tenantId = 'company-c';\n}\n\n// Also check from request body if provided\nif (inputData.body?.tenant_id) {\n    tenantId = inputData.body.tenant_id;\n}\n\n// Get message from request\nconst message = inputData.body?.message || inputData.query || 'Hello';\nconst agentType = inputData.body?.agent_type || 'auto';\n\n// Tenant configurations\nconst tenantConfigs = {\n    'company-a': {\n        name: 'SiamTech Main Office',\n        location: 'Bangkok',\n        language: 'th',\n        specialization: 'Enterprise solutions, Large projects'\n    },\n    'company-b': {\n        name: 'SiamTech Regional Office',\n        location: 'Chiang Mai',\n        language: 'th',\n        specialization: 'Tourism, Regional projects'\n    },\n    'company-c': {\n        name: 'SiamTech International',\n        location: 'Bangkok (Global)',\n        language: 'en',\n        specialization: 'International clients, Global projects'\n    }\n};\n\nconst tenantConfig = tenantConfigs[tenantId] || tenantConfigs['company-a'];\n\n// Log for debugging\nconsole.log(`üéØ Detected tenant: ${tenantId} from URL: ${webhookUrl}`);\nconsole.log(`üìù Message: ${message}`);\n\nreturn {\n    tenant_id: tenantId,\n    tenant_name: tenantConfig.name,\n    tenant_location: tenantConfig.location,\n    tenant_language: tenantConfig.language,\n    tenant_specialization: tenantConfig.specialization,\n    message: message,\n    agent_type: agentType,\n    original_body: inputData.body,\n    conversation_history: inputData.body?.conversation_history || [],\n    timestamp: new Date().toISOString(),\n    webhook_url: webhookUrl\n};"
      },
      "id": "21865c7a-fed8-4e20-8a35-a16f1627b604",
      "name": "Tenant Detector",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        380,
        160
      ]
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{ $json.message }}",
              "operation": "contains",
              "value2": "‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô"
            },
            {
              "value1": "={{ $json.message }}",
              "operation": "contains",
              "value2": "employee"
            },
            {
              "value1": "={{ $json.message }}",
              "operation": "contains",
              "value2": "‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏î‡∏∑‡∏≠‡∏ô"
            },
            {
              "value1": "={{ $json.message }}",
              "operation": "contains",
              "value2": "salary"
            },
            {
              "value1": "={{ $json.message }}",
              "operation": "contains",
              "value2": "‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ"
            },
            {
              "value1": "={{ $json.message }}",
              "operation": "contains",
              "value2": "project"
            },
            {
              "value1": "={{ $json.message }}",
              "operation": "contains",
              "value2": "‡∏Å‡∏µ‡πà‡∏Ñ‡∏ô"
            },
            {
              "value1": "={{ $json.message }}",
              "operation": "contains",
              "value2": "how many"
            },
            {
              "value1": "={{ $json.message }}",
              "operation": "contains",
              "value2": "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô"
            },
            {
              "value1": "={{ $json.agent_type }}",
              "value2": "postgres"
            }
          ]
        },
        "combineOperation": "any"
      },
      "id": "245b282a-6798-4076-bf11-59da9d11300b",
      "name": "Route Decision",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        580,
        160
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://rag-service:5000/rag-query",
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "query",
              "value": "={{ $json.message }}"
            },
            {
              "name": "agent_type",
              "value": "postgres"
            },
            {
              "name": "tenant_id",
              "value": "={{ $json.tenant_id }}"
            }
          ]
        },
        "options": {
          "timeout": 30000
        }
      },
      "id": "b887fc53-14a8-4194-9467-d3ab59f64ef5",
      "name": "PostgreSQL Agent",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [
        840,
        60
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://rag-service:5000/rag-query",
        "sendHeaders": {
          "headers": [
            {
              "name": "X-Tenant-ID",
              "value": "={{ $json.tenant_id }}"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "query",
              "value": "={{ $json.message }}"
            },
            {
              "name": "agent_type",
              "value": "knowledge_base"
            },
            {
              "name": "tenant_id",
              "value": "={{ $json.tenant_id }}"
            }
          ]
        },
        "options": {
          "timeout": 30000
        }
      },
      "id": "f568975d-4068-4ab8-9ffb-ba984e398230",
      "name": "Knowledge Base Agent",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [
        840,
        260
      ]
    },
    {
      "parameters": {
        "jsCode": "// Get the response from either PostgreSQL or Knowledge Base agent\nconst inputData = $input.first().json;\nconst tenantData = $node[\"Tenant Detector\"].json;\n\n// Determine which agent was used\nlet agentUsed = 'unknown';\nlet response = null;\n\n// Check if this came from PostgreSQL agent\nif ($node[\"PostgreSQL Agent\"].data) {\n  agentUsed = 'postgres';\n  response = inputData;\n} else if ($node[\"Knowledge Base Agent\"].data) {\n  agentUsed = 'knowledge_base';\n  response = inputData;\n}\n\n// Extract answer from response\nlet answer = response?.answer || response?.response || '‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢ ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÑ‡∏î‡πâ';\nlet success = response?.success !== false;\n\n// Add tenant context to answer\nif (success && tenantData) {\n  const tenantName = tenantData.tenant_name;\n  const tenantLocation = tenantData.tenant_location;\n  \n  // Add footer based on language\n  if (tenantData.tenant_language === 'en') {\n    answer += `\\n\\n---\\n*Data from: ${tenantName} (${tenantLocation})*`;\n  } else {\n    answer += `\\n\\n---\\n*‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å: ${tenantName} (${tenantLocation})*`;\n  }\n}\n\n// Handle errors gracefully\nif (!success) {\n  if (tenantData?.tenant_language === 'en') {\n    answer = `Sorry, I couldn't process your request for ${tenantData.tenant_name}. Please try again.`;\n  } else {\n    answer = `‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢ ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö ${tenantData.tenant_name} ‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á`;\n  }\n}\n\n// Return formatted response\nreturn {\n  answer: answer,\n  agent: agentUsed,\n  success: success,\n  tenant_id: tenantData?.tenant_id || 'unknown',\n  tenant_name: tenantData?.tenant_name || 'Unknown',\n  tenant_location: tenantData?.tenant_location || 'Unknown',\n  source: response?.source || 'n8n workflow',\n  routing_decision: agentUsed,\n  timestamp: new Date().toISOString(),\n  original_response: response,\n  metadata: {\n    workflow: 'siamtech-multitenant',\n    version: '1.0',\n    language: tenantData?.tenant_language || 'th'\n  }\n};"
      },
      "id": "a31584c8-508c-4b89-aed2-596fca865a9a",
      "name": "Response Formatter",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1080,
        160
      ]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ $json }}",
        "options": {}
      },
      "id": "15404edd-3faf-44e4-acd6-ac191b75edaa",
      "name": "Webhook Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [
        1340,
        160
      ]
    }
  ],
  "pinData": {},
  "connections": {
    "Webhook Company A": {
      "main": [
        [
          {
            "node": "Tenant Detector",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Webhook Company B": {
      "main": [
        [
          {
            "node": "Tenant Detector",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Webhook Company C": {
      "main": [
        [
          {
            "node": "Tenant Detector",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Tenant Detector": {
      "main": [
        [
          {
            "node": "Route Decision",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Route Decision": {
      "main": [
        [
          {
            "node": "PostgreSQL Agent",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Knowledge Base Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "PostgreSQL Agent": {
      "main": [
        [
          {
            "node": "Response Formatter",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Knowledge Base Agent": {
      "main": [
        [
          {
            "node": "Response Formatter",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Response Formatter": {
      "main": [
        [
          {
            "node": "Webhook Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "4a07481f-6922-4b37-82d2-8019c72fd3b6",
  "meta": {
    "instanceId": "4c2a0d135d5b913e469fda03f0706621be5ea954f41e177ce9579c2e37657e9b"
  },
  "id": "reHaeA6uspgL2tP7",
  "tags": [
    {
      "createdAt": "2025-07-11T16:38:15.971Z",
      "updatedAt": "2025-07-11T16:38:15.971Z",
      "id": "T4qwJvPP4ksImmBE",
      "name": "SiamTech"
    },
    {
      "createdAt": "2025-07-11T16:38:15.957Z",
      "updatedAt": "2025-07-11T16:38:15.957Z",
      "id": "U0FUi6MhRWjP49M3",
      "name": "Multi-Tenant"
    }
  ]
}