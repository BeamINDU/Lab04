{
  "name": "My workflow",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "company-a-chat",
        "responseMode": "responseNode",
        "options": {}
      },
      "id": "d1c86add-cc82-44ad-a844-123e6ff8794b",
      "name": "Webhook Company A",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [
        272,
        -16
      ],
      "webhookId": "company-a-chat"
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "company-b-chat",
        "responseMode": "responseNode",
        "options": {}
      },
      "id": "ac319a5d-d8ba-48de-b56c-307b80ebf137",
      "name": "Webhook Company B",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [
        272,
        192
      ],
      "webhookId": "company-b-chat"
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "company-c-chat",
        "responseMode": "responseNode",
        "options": {}
      },
      "id": "bc605ec6-ef46-422b-a713-f63f1340e673",
      "name": "Webhook Company C",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [
        272,
        384
      ],
      "webhookId": "company-c-chat"
    },
    {
      "parameters": {
        "jsCode": "// Extract tenant information from webhook execution\nconst inputData = $input.first().json;\n\n// Get webhook URL to determine tenant\nconst webhookUrl = inputData.webhookUrl || '';\nlet tenantId = 'company-a'; // default\n\n// Determine tenant from webhook URL\nif (webhookUrl.includes('company-a-chat')) {\n    tenantId = 'company-a';\n} else if (webhookUrl.includes('company-b-chat')) {\n    tenantId = 'company-b';\n} else if (webhookUrl.includes('company-c-chat')) {\n    tenantId = 'company-c';\n}\n\n// Also check from request body if provided\nif (inputData.body?.tenant_id) {\n    tenantId = inputData.body.tenant_id;\n}\n\n// Get message from request\nconst message = inputData.body?.message || inputData.query || 'Hello';\nconst agentType = inputData.body?.agent_type || 'auto';\n\n// ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á max_tokens ‡πÅ‡∏•‡∏∞ settings ‡∏≠‡∏∑‡πà‡∏ô‡πÜ\nconst maxTokens = inputData.body?.max_tokens || inputData.body?.settings?.max_tokens || 1000;\nconst temperature = inputData.body?.temperature || inputData.body?.settings?.temperature || 0.7;\nconst settings = inputData.body?.settings || {};\n\n// Tenant configurations\nconst tenantConfigs = {\n    'company-a': {\n        name: 'SiamTech Main Office',\n        location: 'Bangkok', \n        language: 'th',\n        specialization: 'Enterprise solutions, Large projects'\n    },\n    'company-b': {\n        name: 'SiamTech Regional Office',\n        location: 'Chiang Mai',\n        language: 'th', \n        specialization: 'Tourism, Regional projects'\n    },\n    'company-c': {\n        name: 'SiamTech International',\n        location: 'Bangkok (Global)',\n        language: 'en',\n        specialization: 'International clients, Global projects'\n    }\n};\n\nconst tenantConfig = tenantConfigs[tenantId] || tenantConfigs['company-a'];\n\n// Log for debugging\nconsole.log(`üéØ Detected tenant: ${tenantId} from URL: ${webhookUrl}`);\nconsole.log(`üìù Message: ${message}`);\nconsole.log(`üî¢ Max tokens: ${maxTokens}`); // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° log\n\nreturn {\n    tenant_id: tenantId,\n    tenant_name: tenantConfig.name,\n    tenant_location: tenantConfig.location,\n    tenant_language: tenantConfig.language,\n    tenant_specialization: tenantConfig.specialization,\n    message: message,\n    agent_type: agentType,\n    max_tokens: maxTokens,           // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ô‡∏µ‡πâ\n    temperature: temperature,        // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ô‡∏µ‡πâ  \n    settings: settings,              // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ô‡∏µ‡πâ\n    original_body: inputData.body,\n    conversation_history: inputData.body?.conversation_history || [],\n    timestamp: new Date().toISOString(),\n    webhook_url: webhookUrl\n};"
      },
      "id": "932cb571-4921-4358-bed4-3692facc1994",
      "name": "Tenant Detector",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        576,
        192
      ]
    },
    {
      "parameters": {
        "jsCode": "// Response Formatter - Fixed version\nconst inputData = $input.first().json;\n\n// Safely get data from different sources\nlet response = null;\nlet agentUsed = 'unknown';\nlet tenantData = null;\n\n// Try to get tenant data from previous nodes\ntry {\n    if ($node[\"Tenant Detector\"] && $node[\"Tenant Detector\"].json) {\n        tenantData = $node[\"Tenant Detector\"].json;\n    }\n} catch (error) {\n    console.log('‚ö†Ô∏è Tenant Detector data not available');\n}\n\n// Try to get response data\ntry {\n    // Check if Auto Agent was executed\n    if ($node[\"Auto Agent\"] && $node[\"Auto Agent\"].data) {\n        agentUsed = 'auto';\n        response = inputData; // From Auto Agent\n    }\n    // Check if PostgreSQL Agent was executed  \n    else if ($node[\"PostgreSQL Agent\"] && $node[\"PostgreSQL Agent\"].data) {\n        agentUsed = 'postgres';\n        response = inputData; // From PostgreSQL Agent\n    }\n    // Check if Knowledge Base Agent was executed\n    else if ($node[\"Knowledge Base Agent\"] && $node[\"Knowledge Base Agent\"].data) {\n        agentUsed = 'knowledge_base';\n        response = inputData; // From Knowledge Base Agent\n    }\n    else {\n        // Use current input data as fallback\n        response = inputData;\n        agentUsed = 'fallback';\n    }\n} catch (error) {\n    console.log('‚ö†Ô∏è Error getting agent response:', error.message);\n    response = inputData;\n    agentUsed = 'error';\n}\n\n// Extract answer safely\nlet answer = response?.answer || response?.response || response?.content || '‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢ ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÑ‡∏î‡πâ';\nlet success = response?.success !== false;\n\n// Add tenant context if available\nif (success && tenantData) {\n    const tenantName = tenantData.tenant_name || 'Unknown Company';\n    const tenantLocation = tenantData.tenant_location || 'Unknown Location';\n    const language = tenantData.tenant_language || 'th';\n    \n    // Add footer based on language\n    if (language === 'en') {\n        answer += `\\n\\n---\\n*Data from: ${tenantName} (${tenantLocation})*`;\n    } else {\n        answer += `\\n\\n---\\n*‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å: ${tenantName} (${tenantLocation})*`;\n    }\n}\n\n// Handle errors gracefully\nif (!success) {\n    const language = tenantData?.tenant_language || 'th';\n    const tenantName = tenantData?.tenant_name || 'Unknown Company';\n    \n    if (language === 'en') {\n        answer = `Sorry, I couldn't process your request for ${tenantName}. Please try again.`;\n    } else {\n        answer = `‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢ ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö ${tenantName} ‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á`;\n    }\n}\n\n// Return formatted response\nreturn {\n    answer: answer,\n    agent: agentUsed,\n    success: success,\n    tenant_id: tenantData?.tenant_id || 'unknown',\n    tenant_name: tenantData?.tenant_name || 'Unknown',\n    tenant_location: tenantData?.tenant_location || 'Unknown',\n    source: `${agentUsed} agent`,\n    routing_decision: agentUsed,\n    timestamp: new Date().toISOString(),\n    original_response: response,\n    metadata: {\n        workflow: 'siamtech-multitenant',\n        version: '2.0',\n        language: tenantData?.tenant_language || 'th',\n        extraction_method: 'safe'\n    }\n};"
      },
      "id": "e8ab9715-c15d-43b0-9e55-b6edd65bb902",
      "name": "Response Formatter",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1280,
        192
      ]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ $json }}",
        "options": {}
      },
      "id": "c07446ec-b98a-4513-9328-c227340ccf77",
      "name": "Webhook Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [
        1536,
        192
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://rag-service:5000/rag-query",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "=application/json"
            },
            {
              "name": "X-Tenant-ID",
              "value": "={{ $json.tenant_id }}"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "query",
              "value": "={{ $json.message }}"
            },
            {
              "name": "tenant_id",
              "value": "={{ $json.tenant_id }}"
            },
            {
              "name": "max_tokens",
              "value": "={{ $json.max_tokens }} "
            },
            {
              "name": "agent_type",
              "value": "={{ $json.agent_type }}"
            },
            {
              "name": "settings",
              "value": "={{ $json.settings }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        944,
        192
      ],
      "id": "bbe473fc-d638-4091-a30a-b72b4fede739",
      "name": "Auto Agent"
    }
  ],
  "pinData": {},
  "connections": {
    "Webhook Company A": {
      "main": [
        [
          {
            "node": "Tenant Detector",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Webhook Company B": {
      "main": [
        [
          {
            "node": "Tenant Detector",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Webhook Company C": {
      "main": [
        [
          {
            "node": "Tenant Detector",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Tenant Detector": {
      "main": [
        [
          {
            "node": "Auto Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Response Formatter": {
      "main": [
        [
          {
            "node": "Webhook Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Auto Agent": {
      "main": [
        [
          {
            "node": "Response Formatter",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "7b16179a-dcdb-4cda-a575-c0f213e4f48b",
  "meta": {
    "instanceId": "21842a222510e8a21dc96a5d89abf83fc691c8c18cafaa26d5a19b4c63b86acc"
  },
  "id": "MmExfQC8j6V1EwbF",
  "tags": [
    {
      "createdAt": "2025-07-17T07:49:45.353Z",
      "updatedAt": "2025-07-17T07:49:45.353Z",
      "id": "hXgKKcuOoZccpNrU",
      "name": "SiamTech"
    },
    {
      "createdAt": "2025-07-17T07:49:45.384Z",
      "updatedAt": "2025-07-17T07:49:45.384Z",
      "id": "iLgG6E29ch3SQJgv",
      "name": "Multi-Tenant"
    }
  ]
}