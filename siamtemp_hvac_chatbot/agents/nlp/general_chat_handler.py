# agents/nlp/general_chat_handler.py
"""
General Chat Handler - ‡πÅ‡∏¢‡∏Å‡∏≠‡∏≠‡∏Å‡∏°‡∏≤‡∏à‡∏≤‡∏Å intent detection
‡∏á‡πà‡∏≤‡∏¢‡∏ï‡πà‡∏≠‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏Å‡πâ‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏î‡∏¥‡∏°‡πÄ‡∏¢‡∏≠‡∏∞
"""

import re
import random
from datetime import datetime
from typing import Dict, Optional, Tuple

class GeneralChatHandler:
    """
    Handle greetings and general questions
    ‡πÅ‡∏¢‡∏Å‡∏≠‡∏≠‡∏Å‡∏°‡∏≤‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ intent_detector.py ‡∏ã‡∏±‡∏ö‡∏ã‡πâ‡∏≠‡∏ô‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ
    """
    
    def __init__(self):
        # Simple greeting patterns
        self.greeting_patterns = [
            r'^(‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ|‡∏´‡∏ß‡∏±‡∏î‡∏î‡∏µ|hello|hi|hey)',
            r'^(‡∏≠‡∏£‡∏∏‡∏ì‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏¥‡πå|good\s*morning)',
            r'^(‡∏£‡∏≤‡∏ï‡∏£‡∏µ‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏¥‡πå|good\s*evening)',
            r'^(‡∏î‡∏µ‡∏Ñ‡∏£‡∏±‡∏ö|‡∏î‡∏µ‡∏Ñ‡πà‡∏∞|‡∏î‡∏µ‡∏à‡πâ‡∏≤)'
        ]
        
        # Help patterns
        self.help_patterns = [
            r'(‡∏ä‡πà‡∏ß‡∏¢|help|‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô)',
            r'‡∏ó‡∏≥‡∏≠‡∏∞‡πÑ‡∏£.*‡πÑ‡∏î‡πâ.*‡∏ö‡πâ‡∏≤‡∏á',
            r'‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ.*‡∏≠‡∏∞‡πÑ‡∏£',
            r'‡∏ß‡∏¥‡∏ò‡∏µ‡πÉ‡∏ä‡πâ',
            r'‡∏Ñ‡∏π‡πà‡∏°‡∏∑‡∏≠'
        ]
        
        # Thanks patterns
        self.thanks_patterns = [
            r'(‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì|‡∏Ç‡∏≠‡∏ö‡πÉ‡∏à|thank|thx)',
            r'^(‡πÑ‡∏î‡πâ|‡πÇ‡∏≠‡πÄ‡∏Ñ|ok|okay)',
            r'(‡πÄ‡∏¢‡∏µ‡πà‡∏¢‡∏°|‡∏î‡∏µ‡∏°‡∏≤‡∏Å|excellent|great)'
        ]
        
        # Goodbye patterns
        self.goodbye_patterns = [
            r'(‡∏•‡∏≤‡∏Å‡πà‡∏≠‡∏ô|‡∏ö‡∏≤‡∏¢|bye|goodbye)',
            r'(‡πÄ‡∏à‡∏≠‡∏Å‡∏±‡∏ô|‡∏û‡∏ö‡∏Å‡∏±‡∏ô.*‡πÉ‡∏´‡∏°‡πà)',
            r'(‡πÑ‡∏ß‡πâ‡∏Ñ‡∏∏‡∏¢.*‡πÉ‡∏´‡∏°‡πà)'
        ]
        
        # HVAC general questions
        self.hvac_patterns = [
            r'(‡πÅ‡∏≠‡∏£‡πå|‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏õ‡∏£‡∏±‡∏ö‡∏≠‡∏≤‡∏Å‡∏≤‡∏®).*‡∏Ñ‡∏∑‡∏≠‡∏≠‡∏∞‡πÑ‡∏£',
            r'‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢.*(‡∏£‡∏∞‡∏ö‡∏ö‡∏õ‡∏£‡∏±‡∏ö‡∏≠‡∏≤‡∏Å‡∏≤‡∏®)',
            r'(chiller|‡∏ä‡∏¥‡∏•‡πÄ‡∏•‡∏≠‡∏£‡πå).*‡∏ó‡∏≥‡∏á‡∏≤‡∏ô',
            r'‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏ï‡∏Å‡∏ï‡πà‡∏≤‡∏á.*(split|vrv|vrf)'
        ]
    
    def is_general_chat(self, text: str) -> Tuple[bool, Optional[str]]:
        """
        Check if this is general chat (not database query)
        Returns: (is_general, chat_type)
        FIXED: Prioritizes business context detection to prevent false positives
        """
        text_lower = text.lower().strip()
        
        # ============================================
        # PHASE 1: BUSINESS CONTEXT CHECK (HIGHEST PRIORITY)
        # ============================================
        
        # Business indicators that should NEVER be treated as general chat
        business_indicators = [
            # Company/Customer related
            '‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó', '‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤', '‡∏Ñ‡∏•‡∏µ‡∏ô‡∏¥‡∏Ñ', '‡πÇ‡∏£‡∏á‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•', '‡∏£‡∏û.',
            
            # Service/Repair related
            '‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥', '‡∏ã‡πà‡∏≠‡∏°', '‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£', 'service', 'repair', 'maintenance',
            '‡πÇ‡∏≠‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏Æ‡∏≠‡∏•', 'overhaul', 'replacement', '‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô', 'pm',
            
            # Financial/Sales related
            '‡∏£‡∏≤‡∏Ñ‡∏≤', '‡∏¢‡∏≠‡∏î', '‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ', 'revenue', 'sales', 'income',
            '‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤', 'value', 'cost', 'price', '‡πÄ‡∏á‡∏¥‡∏ô', '‡∏ö‡∏≤‡∏ó',
            
            # Work/Job related
            '‡∏á‡∏≤‡∏ô', 'work', 'job', '‡πÅ‡∏ú‡∏ô‡∏á‡∏≤‡∏ô', 'planned', '‡∏ß‡∏≤‡∏á‡πÅ‡∏ú‡∏ô',
            '‡∏ó‡∏µ‡∏°', 'team', '‡∏ä‡πà‡∏≤‡∏á', '‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô', 'employee',
            
            # Parts/Inventory related
            '‡∏≠‡∏∞‡πÑ‡∏´‡∏•‡πà', 'parts', 'spare', '‡∏Ñ‡∏•‡∏±‡∏á', 'stock', 'inventory',
            'warehouse', '‡∏™‡∏ï‡πá‡∏≠‡∏Å', '‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤',
            
            # Technical/Equipment related
            'chiller', '‡∏ä‡∏¥‡∏•‡πÄ‡∏•‡∏≠‡∏£‡πå', 'compressor', '‡∏Ñ‡∏≠‡∏°‡πÄ‡∏û‡∏£‡∏™‡πÄ‡∏ã‡∏≠‡∏£‡πå',
            '‡πÅ‡∏≠‡∏£‡πå', '‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏õ‡∏£‡∏±‡∏ö‡∏≠‡∏≤‡∏Å‡∏≤‡∏®', 'hvac', 'vrv', 'vrf',
            
            # Analysis/Reporting related
            '‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå', 'analysis', '‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô', 'report', '‡∏™‡∏£‡∏∏‡∏õ',
            'summary', '‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö', 'compare', 'top', '‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î',
            
            # Time/Date related (in business context)
            '‡∏õ‡∏µ', 'year', '‡πÄ‡∏î‡∏∑‡∏≠‡∏ô', 'month', '‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà', 'date',
            '‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á', 'history', '‡πÄ‡∏Ñ‡∏¢', '‡∏°‡∏≤‡πÅ‡∏•‡πâ‡∏ß',
            
            # Quantity/Count related
            '‡∏Å‡∏µ‡πà', '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô', 'count', 'total', '‡∏£‡∏ß‡∏°', '‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î',
            '‡∏°‡∏≤‡∏Å', '‡∏ô‡πâ‡∏≠‡∏¢', '‡∏™‡∏π‡∏á', '‡∏ï‡πà‡∏≥', 'max', 'min'
        ]
        
        # If any business indicator is found, this is NOT general chat
        if any(indicator in text_lower for indicator in business_indicators):
            return False, None  # Let intent detection handle this
        
        # ============================================
        # PHASE 2: GENERAL CHAT PATTERN CHECKS
        # ============================================
        
        # Check greeting patterns
        for pattern in self.greeting_patterns:
            if re.search(pattern, text_lower):
                return True, 'greeting'
        
        # Check help patterns
        for pattern in self.help_patterns:
            if re.search(pattern, text_lower):
                return True, 'help'
        
        # Check thanks patterns
        for pattern in self.thanks_patterns:
            if re.search(pattern, text_lower):
                return True, 'thanks'
        
        # Check goodbye patterns
        for pattern in self.goodbye_patterns:
            if re.search(pattern, text_lower):
                return True, 'goodbye'
        
        # Check HVAC general knowledge patterns
        for pattern in self.hvac_patterns:
            if re.search(pattern, text_lower):
                return True, 'hvac_general'
        
        # ============================================
        # PHASE 3: CASUAL CHAT DETECTION
        # ============================================
        
        # Very short messages without business context
        if len(text_lower.split()) <= 2:
            # Common casual expressions
            casual_short_phrases = [
                '‡∏≠‡∏∞‡πÑ‡∏£', '‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏á', '‡∏¢‡∏±‡∏á‡πÑ‡∏á', '‡∏Ñ‡∏£‡∏±‡∏ö', '‡∏Ñ‡πà‡∏∞', '‡∏à‡πâ‡∏≤',
                'ok', 'okay', 'yes', 'no', '‡πÉ‡∏ä‡πà', '‡πÑ‡∏°‡πà', '‡∏≠‡∏∑‡∏°',
                'wow', '‡πÇ‡∏≠‡πâ', '‡πÄ‡∏≠‡πã', '‡∏´‡∏∑‡∏≠', '‡∏≠‡πà‡∏≠', '555', 'lol'
            ]
            
            if any(phrase in text_lower for phrase in casual_short_phrases):
                return True, 'casual'
            
            # Very short without clear business intent
            return True, 'casual'
        
        # Medium length casual patterns
        casual_patterns = [
            r'^(‡∏≠‡∏∞‡πÑ‡∏£|‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏á|‡∏¢‡∏±‡∏á‡πÑ‡∏á).*‡∏ô‡∏∞?$',
            r'^(‡πÇ‡∏≠‡πÄ‡∏Ñ|ok|‡πÑ‡∏î‡πâ|good).*$',
            r'^\w{1,3}$',  # Very short single words
            r'^(‡∏≠‡∏¥‡∏≠‡∏¥|‡πÄ‡∏Æ‡πà|‡∏Æ‡πà‡∏≤|555+).*',  # Laughing/expressions
        ]
        
        for pattern in casual_patterns:
            if re.search(pattern, text_lower):
                return True, 'casual'
        
        # ============================================
        # PHASE 4: DEFAULT - NOT GENERAL CHAT
        # ============================================
        
        # If we reach here, assume it's a business query that should go to intent detection
        return False, None

    def get_response(self, chat_type: str, original_text: str = "") -> str:
        """Get appropriate response based on chat type"""
        
        if chat_type == 'greeting':
            return self._get_greeting_response()
        elif chat_type == 'help':
            return self._get_help_response()
        elif chat_type == 'thanks':
            return self._get_thanks_response()
        elif chat_type == 'goodbye':
            return self._get_goodbye_response()
        elif chat_type == 'hvac_general':
            return self._get_hvac_info(original_text)
        elif chat_type == 'casual':
            return self._get_casual_response()
        else:
            return "‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢ ‡πÑ‡∏°‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏° ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á"
    
    def _get_greeting_response(self) -> str:
        """Generate greeting based on time of day"""
        hour = datetime.now().hour
        
        if 5 <= hour < 12:
            greetings = [
                "‡∏≠‡∏£‡∏∏‡∏ì‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏¥‡πå‡∏Ñ‡∏£‡∏±‡∏ö! üåÖ ‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏≠‡∏∞‡πÑ‡∏£‡πÉ‡∏´‡πâ‡∏ä‡πà‡∏ß‡∏¢ ‡πÑ‡∏´‡∏°‡∏Ñ‡∏£‡∏±‡∏ö?",
                "‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏ï‡∏≠‡∏ô‡πÄ‡∏ä‡πâ‡∏≤‡∏Ñ‡∏£‡∏±‡∏ö! ‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡πÉ‡∏´‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Siamtemp ‡∏Ñ‡∏£‡∏±‡∏ö"
            ]
        elif 12 <= hour < 17:
            greetings = [
                "‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡∏£‡∏±‡∏ö! ‚òÄÔ∏è ‡∏°‡∏µ‡∏≠‡∏∞‡πÑ‡∏£‡πÉ‡∏´‡πâ‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏ö‡∏õ‡∏£‡∏±‡∏ö‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡πÑ‡∏´‡∏°‡∏Ñ‡∏£‡∏±‡∏ö?",
                "‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏ï‡∏≠‡∏ô‡∏ö‡πà‡∏≤‡∏¢‡∏Ñ‡∏£‡∏±‡∏ö! ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏´‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏£‡∏±‡∏ö"
            ]
        elif 17 <= hour < 20:
            greetings = [
                "‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏ï‡∏≠‡∏ô‡πÄ‡∏¢‡πá‡∏ô‡∏Ñ‡∏£‡∏±‡∏ö! üåÜ ‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏∞‡πÑ‡∏£‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏≠‡∏ö‡∏ñ‡∏≤‡∏°‡πÑ‡∏´‡∏°‡∏Ñ‡∏£‡∏±‡∏ö?",
                "‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡∏£‡∏±‡∏ö! ‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡πÉ‡∏´‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à‡∏Ñ‡∏£‡∏±‡∏ö"
            ]
        else:
            greetings = [
                "‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡∏£‡∏±‡∏ö! üåô ‡∏¢‡∏±‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà‡πÄ‡∏•‡∏¢‡∏ô‡∏∞‡∏Ñ‡∏£‡∏±‡∏ö ‡∏°‡∏µ‡∏≠‡∏∞‡πÑ‡∏£‡πÉ‡∏´‡πâ‡∏ä‡πà‡∏ß‡∏¢‡πÑ‡∏´‡∏°‡∏Ñ‡∏£‡∏±‡∏ö?",
                "‡∏£‡∏≤‡∏ï‡∏£‡∏µ‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏¥‡πå‡∏Ñ‡∏£‡∏±‡∏ö! ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏´‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏£‡∏±‡∏ö"
            ]
        
        return random.choice(greetings)
    
    def _get_help_response(self) -> str:
        """Return help message"""
        return """üìö **‡∏Ñ‡∏π‡πà‡∏°‡∏∑‡∏≠‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô Siamtemp AI**

üîç **‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ñ‡∏≤‡∏°‡πÑ‡∏î‡πâ:**

**1. ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢** üí∞
   ‚Ä¢ "‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏õ‡∏µ 2024"
   ‚Ä¢ "‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢ overhaul ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ô‡∏µ‡πâ"  
   ‚Ä¢ "Top 10 ‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤"
   ‚Ä¢ "‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏õ‡∏µ 2023-2024"

**2. ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏∞‡πÑ‡∏´‡∏•‡πà** üîß
   ‚Ä¢ "‡∏£‡∏≤‡∏Ñ‡∏≤‡∏≠‡∏∞‡πÑ‡∏´‡∏•‡πà EKAC460"
   ‚Ä¢ "‡∏≠‡∏∞‡πÑ‡∏´‡∏•‡πà‡∏ó‡∏µ‡πà‡πÉ‡∏Å‡∏•‡πâ‡∏´‡∏°‡∏î"
   ‚Ä¢ "‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏Ñ‡∏á‡∏Ñ‡∏•‡∏±‡∏á"
   ‚Ä¢ "stock ‡∏Ñ‡∏•‡∏±‡∏á A"

**3. ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏á‡∏≤‡∏ô‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£** üë∑
   ‚Ä¢ "‡∏á‡∏≤‡∏ô PM ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏Å‡∏±‡∏ô‡∏¢‡∏≤‡∏¢‡∏ô"
   ‚Ä¢ "‡πÅ‡∏ú‡∏ô‡∏á‡∏≤‡∏ô‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà 15"
   ‚Ä¢ "‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏ó‡∏µ‡∏° A"
   ‚Ä¢ "‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à"

**4. ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤** üè¢
   ‚Ä¢ "‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥ CLARION"
   ‚Ä¢ "‡∏á‡∏≤‡∏ô‡∏ã‡πà‡∏≠‡∏°‡∏Ç‡∏≠‡∏á Stanley"
   ‚Ä¢ "‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏¢‡∏≠‡∏î‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î"

üí° **‡πÄ‡∏Ñ‡∏•‡πá‡∏î‡∏•‡∏±‡∏ö:** ‡∏£‡∏∞‡∏ö‡∏∏‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÅ‡∏•‡∏∞‡∏ä‡∏∑‡πà‡∏≠‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÉ‡∏´‡πâ‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô‡∏à‡∏∞‡πÑ‡∏î‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥‡∏Ñ‡∏£‡∏±‡∏ö"""
    
    def _get_thanks_response(self) -> str:
        """Return thanks response"""
        responses = [
            "‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏Ñ‡∏£‡∏±‡∏ö! üòä ‡∏°‡∏µ‡∏≠‡∏∞‡πÑ‡∏£‡πÉ‡∏´‡πâ‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡∏ö‡∏≠‡∏Å‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢‡∏Ñ‡∏£‡∏±‡∏ö",
            "‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏Ñ‡∏£‡∏±‡∏ö! ‡∏´‡∏≤‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡∏ñ‡∏≤‡∏°‡∏°‡∏≤‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢‡∏Ñ‡∏£‡∏±‡∏ö",
            "‡πÑ‡∏°‡πà‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏£‡∏Ñ‡∏£‡∏±‡∏ö ‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡πÉ‡∏´‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏Ñ‡∏£‡∏±‡∏ö üôè",
            "‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£ Siamtemp AI ‡∏Ñ‡∏£‡∏±‡∏ö"
        ]
        return random.choice(responses)
    
    def _get_goodbye_response(self) -> str:
        """Return goodbye response"""
        hour = datetime.now().hour
        
        if 17 <= hour <= 23:
            farewells = [
                "‡∏Ç‡∏≠‡πÉ‡∏´‡πâ‡∏°‡∏µ‡∏Ñ‡πà‡∏≥‡∏Ñ‡∏∑‡∏ô‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏Ñ‡∏£‡∏±‡∏ö! üåô ‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡πÉ‡∏´‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡πÄ‡∏™‡∏°‡∏≠‡∏Ñ‡∏£‡∏±‡∏ö",
                "‡∏£‡∏≤‡∏ï‡∏£‡∏µ‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏¥‡πå‡∏Ñ‡∏£‡∏±‡∏ö! ‡∏û‡∏ö‡∏Å‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà‡∏Ñ‡∏£‡∏±‡∏ö"
            ]
        else:
            farewells = [
                "‡∏Ç‡∏≠‡πÉ‡∏´‡πâ‡∏°‡∏µ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏Ñ‡∏£‡∏±‡∏ö! ‚òÄÔ∏è ‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡πÉ‡∏´‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡πÄ‡∏™‡∏°‡∏≠‡∏Ñ‡∏£‡∏±‡∏ö",
                "‡∏•‡∏≤‡∏Å‡πà‡∏≠‡∏ô‡∏Ñ‡∏£‡∏±‡∏ö! ‡∏´‡∏ß‡∏±‡∏á‡∏ß‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏ä‡∏ô‡πå‡∏ô‡∏∞‡∏Ñ‡∏£‡∏±‡∏ö"
            ]
        
        return random.choice(farewells)
    
    def _get_casual_response(self) -> str:
        """Return response for casual/unclear input"""
        return """‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢‡∏Ñ‡∏£‡∏±‡∏ö ‡πÑ‡∏°‡πà‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏ß‡πà‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏∞‡πÑ‡∏£ ü§î

üí° ‡∏•‡∏≠‡∏á‡∏ñ‡∏≤‡∏°‡πÅ‡∏ö‡∏ö‡∏ô‡∏µ‡πâ‡∏î‡∏π‡∏Ñ‡∏£‡∏±‡∏ö:
‚Ä¢ "‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏õ‡∏µ 2024"
‚Ä¢ "‡∏£‡∏≤‡∏Ñ‡∏≤‡∏≠‡∏∞‡πÑ‡∏´‡∏•‡πà [‡∏£‡∏´‡∏±‡∏™‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤]"
‚Ä¢ "‡∏á‡∏≤‡∏ô PM ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ô‡∏µ‡πâ"

‡∏´‡∏£‡∏∑‡∏≠‡∏û‡∏¥‡∏°‡∏û‡πå "‡∏ä‡πà‡∏ß‡∏¢" ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Ñ‡∏£‡∏±‡∏ö"""
    
    def _get_hvac_info(self, question: str) -> str:
        """Return HVAC general information"""
        question_lower = question.lower()
        
        if 'hvac' in question_lower and '‡∏Ñ‡∏∑‡∏≠‡∏≠‡∏∞‡πÑ‡∏£' in question_lower:
            return """**HVAC (Heating, Ventilation, and Air Conditioning)** 
‡∏Ñ‡∏∑‡∏≠‡∏£‡∏∞‡∏ö‡∏ö‡∏õ‡∏£‡∏±‡∏ö‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡πÅ‡∏•‡∏∞‡∏£‡∏∞‡∏ö‡∏≤‡∏¢‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡πÉ‡∏ô‡∏≠‡∏≤‡∏Ñ‡∏≤‡∏£ ‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö‡∏î‡πâ‡∏ß‡∏¢:

üî• **Heating** - ‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡πâ‡∏≠‡∏ô
‚ùÑÔ∏è **Ventilation** - ‡∏£‡∏∞‡∏ö‡∏ö‡∏£‡∏∞‡∏ö‡∏≤‡∏¢‡∏≠‡∏≤‡∏Å‡∏≤‡∏®  
üå°Ô∏è **Air Conditioning** - ‡∏£‡∏∞‡∏ö‡∏ö‡∏õ‡∏£‡∏±‡∏ö‡∏≠‡∏≤‡∏Å‡∏≤‡∏®

Siamtemp ‡πÄ‡∏ä‡∏µ‡πà‡∏¢‡∏ß‡∏ä‡∏≤‡∏ç‡∏î‡πâ‡∏≤‡∏ô ‡∏°‡∏≤‡∏Å‡∏ß‡πà‡∏≤ 30 ‡∏õ‡∏µ ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏´‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£:
‚Ä¢ ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏≠‡∏£‡πå‡∏Ç‡∏ô‡∏≤‡∏î‡πÉ‡∏´‡∏ç‡πà
‚Ä¢ ‡∏ö‡∏≥‡∏£‡∏∏‡∏á‡∏£‡∏±‡∏Å‡∏©‡∏≤ (PM)
‚Ä¢ ‡∏ã‡πà‡∏≠‡∏°‡πÅ‡∏ã‡∏° Overhaul
‚Ä¢ ‡∏à‡∏≥‡∏´‡∏ô‡πà‡∏≤‡∏¢‡∏≠‡∏∞‡πÑ‡∏´‡∏•‡πà"""
        
        elif 'chiller' in question_lower or '‡∏ä‡∏¥‡∏•‡πÄ‡∏•‡∏≠‡∏£‡πå' in question_lower:
            return """**Chiller (‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ó‡∏≥‡∏ô‡πâ‡∏≥‡πÄ‡∏¢‡πá‡∏ô)** 
‡∏Ñ‡∏∑‡∏≠‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏±‡∏Å‡∏£‡∏Ç‡∏ô‡∏≤‡∏î‡πÉ‡∏´‡∏ç‡πà‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏ô‡πâ‡∏≥‡πÄ‡∏¢‡πá‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡∏õ‡∏£‡∏±‡∏ö‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡∏™‡πà‡∏ß‡∏ô‡∏Å‡∏•‡∏≤‡∏á

‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏´‡∏•‡∏±‡∏Å:
‚Ä¢ **Air-Cooled** - ‡∏£‡∏∞‡∏ö‡∏≤‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡πâ‡∏≠‡∏ô‡∏î‡πâ‡∏ß‡∏¢‡∏≠‡∏≤‡∏Å‡∏≤‡∏®
‚Ä¢ **Water-Cooled** - ‡∏£‡∏∞‡∏ö‡∏≤‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡πâ‡∏≠‡∏ô‡∏î‡πâ‡∏ß‡∏¢‡∏ô‡πâ‡∏≥

Siamtemp ‡πÉ‡∏´‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£ Chiller ‡∏ó‡∏∏‡∏Å‡∏¢‡∏µ‡πà‡∏´‡πâ‡∏≠ ‡∏ó‡∏±‡πâ‡∏á Overhaul ‡πÅ‡∏•‡∏∞ Replacement"""
        
        else:
            return """‡∏°‡∏µ‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏£‡∏∞‡∏ö‡∏ö HVAC ‡πÉ‡∏ä‡πà‡πÑ‡∏´‡∏°‡∏Ñ‡∏£‡∏±‡∏ö?

‡∏ú‡∏°‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏´‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:
‚Ä¢ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à (‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ, ‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢, ‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤)
‚Ä¢ ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏≠‡∏∞‡πÑ‡∏´‡∏•‡πà‡πÅ‡∏•‡∏∞‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏Ñ‡∏á‡∏Ñ‡∏•‡∏±‡∏á
‚Ä¢ ‡πÅ‡∏ú‡∏ô‡∏á‡∏≤‡∏ô‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡πÅ‡∏•‡∏∞‡∏ã‡πà‡∏≠‡∏°‡∏ö‡∏≥‡∏£‡∏∏‡∏á

‡∏•‡∏≠‡∏á‡∏ñ‡∏≤‡∏°‡πÄ‡∏à‡∏≤‡∏∞‡∏à‡∏á‡∏°‡∏≤‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô‡∏î‡∏π‡∏Ñ‡∏£‡∏±‡∏ö üòä"""

