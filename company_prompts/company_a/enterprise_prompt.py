# company_prompts/company_a/enterprise_prompt.py
import sys
import os
sys.path.append(os.path.dirname(os.path.dirname(os.path.dirname(__file__))))

from company_prompts.base_prompt import BaseCompanyPrompt
from typing import Dict, Any, List
from datetime import datetime

# Import shared logger
from shared_components.logging_config import logger

class EnterprisePrompt(BaseCompanyPrompt):
    """ЁЯФз HVAC Service & Spare Parts Business Prompt - р╕Ыр╕гр╕▒р╕Ър╕Ыр╕гр╕╕р╕Зр╣Гр╕лр╕бр╣И"""
    
    def __init__(self, company_config: Dict[str, Any]):
        super().__init__(company_config)
        
        # р╣Ар╕Юр╕┤р╣Ир╕бр╕Др╕зр╕▓р╕бр╕гр╕╣р╣Йр╣Ар╕Йр╕Юр╕▓р╕░р╕Чр╕▓р╕Зр╕кр╕│р╕лр╕гр╕▒р╕Ър╕Шр╕╕р╕гр╕Бр╕┤р╕Ир╣Гр╕лр╕бр╣И
        self.business_domain_knowledge = {
            'hvac_terms': {
                'PM': 'Preventive Maintenance - р╕Бр╕▓р╕гр╕Ър╕│р╕гр╕╕р╕Зр╕гр╕▒р╕Бр╕йр╕▓р╕Ыр╣Йр╕нр╕Зр╕Бр╕▒р╕Щ',
                'Chiller': 'р╣Ар╕Др╕гр╕╖р╣Ир╕нр╕Зр╕Чр╕│р╕Щр╣Йр╕│р╣Ар╕вр╣Зр╕Щ',
                'Compressor': 'р╕Др╕нр╕бр╣Ар╕Юр╕гр╕кр╣Ар╕Лр╕нр╕гр╣М',
                'Overhaul': 'р╕Бр╕▓р╕гр╕вр╕Бр╣Ар╕Др╕гр╕╖р╣Ир╕нр╕З/р╕Лр╣Ир╕нр╕бр╣Бр╕Лр╕бр╕Др╕гр╕▒р╣Йр╕Зр╣Гр╕лр╕Нр╣И',
                'Replacement': 'р╕Бр╕▓р╕гр╣Ар╕Ыр╕ер╕╡р╣Ир╕вр╕Щр╕Кр╕┤р╣Йр╕Щр╕кр╣Ир╕зр╕Щ',
                'Air Cooled': 'р╕гр╕░р╕Ър╕▓р╕вр╕Др╕зр╕▓р╕бр╕гр╣Йр╕нр╕Щр╕Фр╣Йр╕зр╕вр╕нр╕▓р╕Бр╕▓р╕и',
                'Water Cooled': 'р╕гр╕░р╕Ър╕▓р╕вр╕Др╕зр╕▓р╕бр╕гр╣Йр╕нр╕Щр╕Фр╣Йр╕зр╕вр╕Щр╣Йр╕│',
                'RCUA': 'Roof Top Unit Air Cooled',
                'Set Free': 'р╕гр╕░р╕Ър╕Ър╕Ыр╕гр╕▒р╕Ър╕нр╕▓р╕Бр╕▓р╕ир╣Бр╕Ър╕Ъ VRF',
                'FTG': 'Floor Type Gas (р╣Бр╕нр╕гр╣Мр╣Бр╕Ър╕Ър╕Хр╕▒р╣Йр╕Зр╕Юр╕╖р╣Йр╕Щ)',
                'EKAC': 'EuroKlimat Air Cooled model'
            },
            'service_types': {
                'PM': 'р╕Зр╕▓р╕Щр╕Ър╕│р╕гр╕╕р╕Зр╕гр╕▒р╕Бр╕йр╕▓р╕Хр╕▓р╕бр╣Бр╕Ьр╕Щ',
                'Repair': 'р╕Зр╕▓р╕Щр╕Лр╣Ир╕нр╕бр╣Бр╕Лр╕б',
                'Replacement': 'р╕Зр╕▓р╕Щр╣Ар╕Ыр╕ер╕╡р╣Ир╕вр╕Щр╕Кр╕┤р╣Йр╕Щр╕кр╣Ир╕зр╕Щ',
                'Overhaul': 'р╕Зр╕▓р╕Щр╕вр╕Бр╣Ар╕Др╕гр╕╖р╣Ир╕нр╕З',
                'Installation': 'р╕Зр╕▓р╕Щр╕Хр╕┤р╕Фр╕Хр╕▒р╣Йр╕З',
                'Start_up': 'р╕Зр╕▓р╕Щр╣Ар╕гр╕┤р╣Ир╕бр╣Гр╕Кр╣Йр╕Зр╕▓р╕Щ'
            },
            'customer_types': {
                'Industrial': 'р╣Вр╕гр╕Зр╕Зр╕▓р╕Щр╕нр╕╕р╕Хр╕кр╕▓р╕лр╕Бр╕гр╕гр╕б',
                'Commercial': 'р╕нр╕▓р╕Др╕▓р╕гр╕Юр╕▓р╕Ур╕┤р╕Кр╕вр╣М',
                'Government': 'р╕лр╕Щр╣Ир╕зр╕вр╕Зр╕▓р╕Щр╕гр╕▓р╕Кр╕Бр╕▓р╕г',
                'Hotel': 'р╣Вр╕гр╕Зр╣Бр╕гр╕б',
                'Hospital': 'р╣Вр╕гр╕Зр╕Юр╕вр╕▓р╕Ър╕▓р╕е',
                'Office': 'р╕нр╕▓р╕Др╕▓р╕гр╕кр╕│р╕Щр╕▒р╕Бр╕Зр╕▓р╕Щ'
            },
            'brands': ['Hitachi', 'Daikin', 'EuroKlimat', 'Toyota', 'Mitsubishi', 'York', 'Carrier']
        }
        
        # Sample queries р╕кр╕│р╕лр╕гр╕▒р╕Ър╕Бр╕▓р╕гр╣Ар╕гр╕╡р╕вр╕Щр╕гр╕╣р╣Й
        self.sample_business_queries = {
            'customer_analysis': {
                'question': 'р╕Ир╕│р╕Щр╕зр╕Щр╕ер╕╣р╕Бр╕Др╣Йр╕▓р╕Чр╕▒р╣Йр╕Зр╕лр╕бр╕Ф',
                'sql_pattern': 'SELECT COUNT(DISTINCT customer_name) FROM sales2024',
                'business_context': 'р╕Щр╕▒р╕Ър╕ер╕╣р╕Бр╕Др╣Йр╕▓р╕Чр╕╡р╣Ир╣Др╕бр╣Ир╕Лр╣Йр╕│р╕Бр╕▒р╕Щр╕Ир╕▓р╕Бр╕Вр╣Йр╕нр╕бр╕╣р╕ер╕Бр╕▓р╕гр╕Вр╕▓р╕в'
            },
            'customer_history': {
                'question': 'р╕Ър╕гр╕┤р╕йр╕▒р╕Ч XXX р╕бр╕╡р╕Бр╕▓р╕гр╕Лр╕╖р╣Йр╕нр╕Вр╕▓р╕вр╕вр╣Йр╕нр╕Щр╕лр╕ер╕▒р╕З 3 р╕Ыр╕╡',
                'sql_pattern': '''
                    SELECT job_no, description, service_contact_ as value
                    FROM sales2022 WHERE customer_name ILIKE '%company_name%'
                    UNION ALL
                    SELECT job_no, description, service_contact_ as value  
                    FROM sales2023 WHERE customer_name ILIKE '%company_name%'
                    UNION ALL
                    SELECT job_no, description, service_contact_ as value
                    FROM sales2024 WHERE customer_name ILIKE '%company_name%'
                ''',
                'business_context': 'р╕лр╕▓р╕Ыр╕гр╕░р╕зр╕▒р╕Хр╕┤р╕Бр╕▓р╕гр╕Лр╕╖р╣Йр╕нр╕Вр╕▓р╕вр╕Вр╕нр╕Зр╕ер╕╣р╕Бр╕Др╣Йр╕▓р╣Ар╕Йр╕Юр╕▓р╕░р╕гр╕▓р╕вр╕Вр╣Йр╕▓р╕б 3 р╕Ыр╕╡'
            },
            'work_schedule': {
                'question': 'р╣Бр╕Ьр╕Щр╕Зр╕▓р╕Щр╕зр╕▒р╕Щр╕Чр╕╡р╣И XXX р╕бр╕╡р╕Зр╕▓р╕Щр╕нр╕░р╣Др╕гр╕Ър╣Йр╕▓р╕З',
                'sql_pattern': '''
                    SELECT customer, detail, service_group, 
                           CASE WHEN job_description_pm THEN 'PM'
                                WHEN job_description_replacement THEN 'Replacement'
                                ELSE 'Other' END as job_type
                    FROM work_force WHERE date = 'target_date'
                ''',
                'business_context': 'р╕Фр╕╣р╣Бр╕Ьр╕Щр╕Бр╕▓р╕гр╕Чр╕│р╕Зр╕▓р╕Щр╕Вр╕нр╕Зр╕Чр╕╡р╕бр╣Гр╕Щр╕зр╕▒р╕Щр╕Чр╕╡р╣Ир╕Бр╕│р╕лр╕Щр╕Ф'
            },
            'spare_parts_pricing': {
                'question': 'р╕гр╕▓р╕Др╕▓р╕нр╕░р╣Др╕лр╕ер╣Ир╣Ар╕Др╕гр╕╖р╣Ир╕нр╕Зр╕Чр╕│р╕Щр╣Йр╕│р╣Ар╕вр╣Зр╕Щ Hitachi',
                'sql_pattern': '''
                    SELECT product_code, product_name, unit_price, description
                    FROM spare_part 
                    WHERE product_name ILIKE '%р╕лр╕▓р╕Др╕│р╕кр╕│р╕Др╕▒р╕Н%' 
                    OR description ILIKE '%Hitachi%'
                ''',
                'business_context': 'р╕Др╣Йр╕Щр╕лр╕▓р╕гр╕▓р╕Др╕▓р╕нр╕░р╣Др╕лр╕ер╣Ир╕Хр╕▓р╕бр╕вр╕╡р╣Ир╕лр╣Йр╕нр╣Бр╕ер╕░р╕гр╕╕р╣Ир╕Щ'
            }
        }
        
        logger.info(f"тЬЕ HVAC Enterprise Prompt initialized for {self.company_name}")
    
    # тЬЕ MAIN ENTRY POINT (Required by PromptManager)
    async def process_question(self, question: str) -> Dict[str, Any]:
        """ЁЯОп Main processing method р╕кр╕│р╕лр╕гр╕▒р╕Ър╕Шр╕╕р╕гр╕Бр╕┤р╕И HVAC"""
        
        try:
            self.usage_stats['queries_processed'] += 1
            self.usage_stats['last_used'] = datetime.now().isoformat()
            
            # р╕зр╕┤р╣Ар╕Др╕гр╕▓р╕░р╕лр╣Мр╕Ыр╕гр╕░р╣Ар╕ар╕Чр╕Др╕│р╕Цр╕▓р╕бр╕Хр╕▓р╕бр╕Шр╕╕р╕гр╕Бр╕┤р╕Ир╣Гр╕лр╕бр╣И
            question_type = self._analyze_hvac_question(question)
            
            if question_type == 'greeting':
                return self._create_hvac_greeting_response()
            elif question_type == 'customer_inquiry':
                return self._create_customer_response(question)
            elif question_type == 'spare_parts_inquiry':
                return self._create_spare_parts_response(question)
            elif question_type == 'service_inquiry':
                return self._create_service_response(question)
            elif question_type == 'work_schedule_inquiry':
                return self._create_work_schedule_response(question)
            else:
                return self._create_general_hvac_response(question)
                
        except Exception as e:
            logger.error(f"тЭМ HVAC processing failed: {e}")
            return {
                'success': False,
                'answer': f"р╣Ар╕Бр╕┤р╕Фр╕Вр╣Йр╕нр╕Ьр╕┤р╕Фр╕Юр╕ер╕▓р╕Фр╣Гр╕Щр╕Бр╕▓р╕гр╕Ыр╕гр╕░р╕бр╕зр╕ер╕Ьр╕е: {str(e)}",
                'error': str(e),
                'tenant_id': self.company_id,
                'data_source_used': 'hvac_error'
            }
    
    def _analyze_hvac_question(self, question: str) -> str:
        """ЁЯФН р╕зр╕┤р╣Ар╕Др╕гр╕▓р╕░р╕лр╣Мр╕Ыр╕гр╕░р╣Ар╕ар╕Чр╕Др╕│р╕Цр╕▓р╕бр╕кр╕│р╕лр╕гр╕▒р╕Ър╕Шр╕╕р╕гр╕Бр╕┤р╕И HVAC"""
        question_lower = question.lower()
        
        # Greeting patterns
        if any(word in question_lower for word in ['р╕кр╕зр╕▒р╕кр╕Фр╕╡', 'hello', 'hi', 'р╕Кр╣Ир╕зр╕в']):
            return 'greeting'
        
        # Customer inquiry patterns
        if any(word in question_lower for word in ['р╕ер╕╣р╕Бр╕Др╣Йр╕▓', 'р╕Ър╕гр╕┤р╕йр╕▒р╕Ч', 'customer', 'р╕Ыр╕гр╕░р╕зр╕▒р╕Хр╕┤', 'history']):
            return 'customer_inquiry'
        
        # Spare parts inquiry patterns  
        if any(word in question_lower for word in ['р╕нр╕░р╣Др╕лр╕ер╣И', 'р╕гр╕▓р╕Др╕▓', 'spare', 'part', 'price', 'chiller', 'compressor']):
            return 'spare_parts_inquiry'
        
        # Service inquiry patterns
        if any(word in question_lower for word in ['р╕Ър╕гр╕┤р╕Бр╕▓р╕г', 'р╕Лр╣Ир╕нр╕б', 'р╕Ър╕│р╕гр╕╕р╕З', 'service', 'overhaul', 'pm']):
            return 'service_inquiry'
        
        # Work schedule patterns
        if any(word in question_lower for word in ['р╣Бр╕Ьр╕Щр╕Зр╕▓р╕Щ', 'р╕зр╕▒р╕Щр╕Чр╕╡р╣И', 'schedule', 'р╕Зр╕▓р╕Щ', 'р╕Чр╕╡р╕б']):
            return 'work_schedule_inquiry'
        
        return 'general'
    
    # тЬЕ ABSTRACT METHODS (Required by BaseCompanyPrompt)
    def generate_sql_prompt(self, question: str, schema_info: Dict[str, Any]) -> str:
        """ЁЯОп SQL prompt generation р╕кр╕│р╕лр╕гр╕▒р╕Ър╕Шр╕╕р╕гр╕Бр╕┤р╕И HVAC"""
        
        # р╕зр╕┤р╣Ар╕Др╕гр╕▓р╕░р╕лр╣Мр╕Др╕│р╕Цр╕▓р╕бр╣Ар╕Юр╕╖р╣Ир╕нр╕лр╕▓р╕Др╕зр╕▓р╕бр╣Ар╕Бр╕╡р╣Ир╕вр╕зр╕Вр╣Йр╕нр╕Зр╕Бр╕▒р╕Ър╕Шр╕╕р╕гр╕Бр╕┤р╕И
        relevant_terms = self._extract_hvac_terms(question)
        relevant_sample = self._find_relevant_sample_query(question)
        
        prompt = f"""р╕Др╕╕р╕Ур╕Др╕╖р╕н PostgreSQL Expert р╕кр╕│р╕лр╕гр╕▒р╕Ър╕гр╕░р╕Ър╕Ър╕Ър╕гр╕┤р╕лр╕▓р╕гр╕Зр╕▓р╕Щ HVAC Service & Spare Parts - {self.company_name}

ЁЯФз р╕Ър╕гр╕┤р╕Ър╕Чр╕Шр╕╕р╕гр╕Бр╕┤р╕И: р╕Ър╕гр╕┤р╕Бр╕▓р╕гр╕Лр╣Ир╕нр╕бр╕Ър╕│р╕гр╕╕р╕Зр╕гр╕░р╕Ър╕Ър╕Чр╕│р╕Др╕зр╕▓р╕бр╣Ар╕вр╣Зр╕Щ р╣Бр╕ер╕░р╕Ир╕│р╕лр╕Щр╣Ир╕▓р╕вр╕нр╕░р╣Др╕лр╕ер╣И
ЁЯТ░ р╕ер╕╣р╕Бр╕Др╣Йр╕▓р╕лр╕ер╕▒р╕Б: р╣Вр╕гр╕Зр╕Зр╕▓р╕Щр╕нр╕╕р╕Хр╕кр╕▓р╕лр╕Бр╕гр╕гр╕б, р╣Вр╕гр╕Зр╣Бр╕гр╕б, р╕нр╕▓р╕Др╕▓р╕гр╕кр╕│р╕Щр╕▒р╕Бр╕Зр╕▓р╕Щ, р╕лр╕Щр╣Ир╕зр╕вр╕Зр╕▓р╕Щр╕гр╕▓р╕Кр╕Бр╕▓р╕г
ЁЯЫая╕П р╕Ър╕гр╕┤р╕Бр╕▓р╕гр╕лр╕ер╕▒р╕Б: PM (Preventive Maintenance), р╕Лр╣Ир╕нр╕бр╣Бр╕Лр╕б, р╣Ар╕Ыр╕ер╕╡р╣Ир╕вр╕Щр╕Кр╕┤р╣Йр╕Щр╕кр╣Ир╕зр╕Щ, Overhaul
ЁЯП╖я╕П р╣Бр╕Ър╕гр╕Щр╕Фр╣Мр╕лр╕ер╕▒р╕Б: {', '.join(self.business_domain_knowledge['brands'])}

ЁЯУК р╣Вр╕Др╕гр╕Зр╕кр╕гр╣Йр╕▓р╕Зр╕Рр╕▓р╕Щр╕Вр╣Йр╕нр╕бр╕╣р╕е:
тАв sales2024, sales2023, sales2022, sales2025: р╕Вр╣Йр╕нр╕бр╕╣р╕ер╕Бр╕▓р╕гр╕Вр╕▓р╕вр╣Бр╕ер╕░р╕Ър╕гр╕┤р╕Бр╕▓р╕гр╕гр╕▓р╕вр╕Ыр╕╡
  - job_no: р╕лр╕бр╕▓р╕вр╣Ар╕ер╕Вр╕Зр╕▓р╕Щ (р╕гр╕╣р╕Ыр╣Бр╕Ър╕Ъ SV.66-XX-XXX-PM)
  - customer_name: р╕Кр╕╖р╣Ир╕нр╕ер╕╣р╕Бр╕Др╣Йр╕▓
  - description: р╕гр╕▓р╕вр╕ер╕░р╣Ар╕нр╕╡р╕вр╕Фр╕Зр╕▓р╕Щ
  - service_contact_: р╕бр╕╣р╕ер╕Др╣Ир╕▓р╕Зр╕▓р╕Щ (р╕Ър╕▓р╕Ч)
  - overhaul_, replacement: р╕Ыр╕гр╕░р╣Ар╕ар╕Чр╕Зр╕▓р╕Щ
  
тАв spare_part, spare_part2: р╕Др╕ер╕▒р╕Зр╕нр╕░р╣Др╕лр╕ер╣И
  - product_code: р╕гр╕лр╕▒р╕кр╕кр╕┤р╕Щр╕Др╣Йр╕▓
  - product_name: р╕Кр╕╖р╣Ир╕нр╕нр╕░р╣Др╕лр╕ер╣И (р╕ар╕▓р╕йр╕▓р╕нр╕▒р╕Зр╕Бр╕др╕й)
  - unit_price: р╕гр╕▓р╕Др╕▓р╕Хр╣Ир╕нр╕лр╕Щр╣Ир╕зр╕в
  - balance: р╕Ир╕│р╕Щр╕зр╕Щр╕Др╕Зр╣Ар╕лр╕ер╕╖р╕н
  - description: р╕гр╕▓р╕вр╕ер╕░р╣Ар╕нр╕╡р╕вр╕Ф (р╕гр╕╕р╣Ир╕Щр╣Ар╕Др╕гр╕╖р╣Ир╕нр╕З, р╕кр╕Цр╕▓р╕Щр╕Чр╕╡р╣И)
  
тАв work_force: р╕Бр╕▓р╕гр╕Ир╕▒р╕Фр╕Чр╕╡р╕бр╕Зр╕▓р╕Щ
  - date: р╕зр╕▒р╕Щр╕Чр╕╡р╣Ир╕Чр╕│р╕Зр╕▓р╕Щ
  - customer: р╕ер╕╣р╕Бр╕Др╣Йр╕▓
  - job_description_pm, job_description_replacement: р╕Ыр╕гр╕░р╣Ар╕ар╕Чр╕Зр╕▓р╕Щ (boolean)
  - detail: р╕гр╕▓р╕вр╕ер╕░р╣Ар╕нр╕╡р╕вр╕Фр╕Зр╕▓р╕Щ
  - service_group: р╕Чр╕╡р╕бр╕Кр╣Ир╕▓р╕З
"""

        # р╣Ар╕Юр╕┤р╣Ир╕бр╕Др╕зр╕▓р╕бр╕гр╕╣р╣Йр╣Ар╕Йр╕Юр╕▓р╕░р╕Чр╕▓р╕Зр╕Чр╕╡р╣Ир╣Ар╕Бр╕╡р╣Ир╕вр╕зр╕Вр╣Йр╕нр╕З
        if relevant_terms:
            prompt += f"\nЁЯФН р╕Др╕│р╕ир╕▒р╕Юр╕Чр╣Мр╣Ар╕Чр╕Др╕Щр╕┤р╕Др╕Чр╕╡р╣Ир╣Ар╕Бр╕╡р╣Ир╕вр╕зр╕Вр╣Йр╕нр╕З:\n"
            for term, meaning in relevant_terms.items():
                prompt += f"тАв {term}: {meaning}\n"
        
        # р╣Ар╕Юр╕┤р╣Ир╕б sample query р╕Чр╕╡р╣Ир╣Ар╕Бр╕╡р╣Ир╕вр╕зр╕Вр╣Йр╕нр╕З
        if relevant_sample:
            prompt += f"\nЁЯТб р╕гр╕╣р╕Ыр╣Бр╕Ър╕Ъ SQL р╕Чр╕╡р╣Ир╕Др╕ер╣Йр╕▓р╕вр╕Бр╕▒р╕Щ:\n{relevant_sample['sql_pattern']}\n"
            prompt += f"р╕Ър╕гр╕┤р╕Ър╕Ч: {relevant_sample['business_context']}\n"
        
        prompt += f"""
ЁЯФз р╕Бр╕Ор╕кр╕│р╕Др╕▒р╕Нр╕кр╕│р╕лр╕гр╕▒р╕Ър╕Шр╕╕р╕гр╕Бр╕┤р╕И HVAC:
1. р╣Гр╕Кр╣Й ILIKE '%keyword%' р╕кр╕│р╕лр╕гр╕▒р╕Ър╕Бр╕▓р╕гр╕Др╣Йр╕Щр╕лр╕▓р╕Кр╕╖р╣Ир╕нр╕ер╕╣р╕Бр╕Др╣Йр╕▓р╣Бр╕ер╕░р╕нр╕░р╣Др╕лр╕ер╣И
2. р╕Вр╣Йр╕нр╕бр╕╣р╕ер╕Бр╕▓р╕гр╕Вр╕▓р╕вр╣Бр╕вр╕Бр╕Хр╕▓р╕бр╕Ыр╕╡ - р╕гр╕░р╕зр╕▒р╕Зр╣Ар╕ер╕╖р╕нр╕Бр╕Хр╕▓р╕гр╕▓р╕Зр╕Чр╕╡р╣Ир╕Цр╕╣р╕Бр╕Хр╣Йр╕нр╕З
3. service_contact_ р╣Ар╕Ыр╣Зр╕Щр╕бр╕╣р╕ер╕Др╣Ир╕▓р╕Зр╕▓р╕Щ (р╕лр╕Щр╣Ир╕зр╕в: р╕Ър╕▓р╕Ч)
4. job_no р╕бр╕╡р╕гр╕╣р╕Ыр╣Бр╕Ър╕Ъ SV.р╕Ыр╕╡-р╣Ар╕Фр╕╖р╕нр╕Щ-р╕ер╕│р╕Фр╕▒р╕Ъ-р╕Ыр╕гр╕░р╣Ар╕ар╕Ч
5. product_name р╣Гр╕Щр╕Хр╕▓р╕гр╕▓р╕З spare_part р╣Ар╕Ыр╣Зр╕Щр╕ар╕▓р╕йр╕▓р╕нр╕▒р╕Зр╕Бр╕др╕й
6. р╣Гр╕Кр╣Й UNION ALL р╣Ар╕бр╕╖р╣Ир╕нр╕Хр╣Йр╕нр╕Зр╕Бр╕▓р╕гр╕Вр╣Йр╕нр╕бр╕╣р╕ер╕Вр╣Йр╕▓р╕бр╕лр╕ер╕▓р╕вр╕Ыр╕╡
7. р╣Гр╕Кр╣Й LIMIT 20 р╣Ар╕кр╕бр╕н

р╕Др╕│р╕Цр╕▓р╕б: {question}

р╕кр╕гр╣Йр╕▓р╕З PostgreSQL query р╕Чр╕╡р╣Ир╣Ар╕лр╕бр╕▓р╕░р╕кр╕бр╕кр╕│р╕лр╕гр╕▒р╕Ър╕Шр╕╕р╕гр╕Бр╕┤р╕И HVAC:"""

        return prompt
    
    def _extract_hvac_terms(self, question: str) -> Dict[str, str]:
        """ЁЯФН р╕Фр╕╢р╕Зр╕Др╕│р╕ир╕▒р╕Юр╕Чр╣Мр╣Ар╕Чр╕Др╕Щр╕┤р╕Д HVAC р╕Чр╕╡р╣Ир╣Ар╕Бр╕╡р╣Ир╕вр╕зр╕Вр╣Йр╕нр╕Зр╕Ир╕▓р╕Бр╕Др╕│р╕Цр╕▓р╕б"""
        question_lower = question.lower()
        relevant_terms = {}
        
        # р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ър╕Др╕│р╕ир╕▒р╕Юр╕Чр╣Мр╣Ар╕Чр╕Др╕Щр╕┤р╕Д
        for term, meaning in self.business_domain_knowledge['hvac_terms'].items():
            if term.lower() in question_lower:
                relevant_terms[term] = meaning
        
        # р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ър╕Ыр╕гр╕░р╣Ар╕ар╕Чр╕Ър╕гр╕┤р╕Бр╕▓р╕г
        for service_type, meaning in self.business_domain_knowledge['service_types'].items():
            if service_type.lower() in question_lower:
                relevant_terms[service_type] = meaning
        
        return relevant_terms
    
    def _find_relevant_sample_query(self, question: str) -> Dict[str, str]:
        """ЁЯФН р╕лр╕▓ sample query р╕Чр╕╡р╣Ир╣Ар╕Бр╕╡р╣Ир╕вр╕зр╕Вр╣Йр╕нр╕Зр╕Бр╕▒р╕Ър╕Др╕│р╕Цр╕▓р╕б"""
        question_lower = question.lower()
        
        # р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ър╕Ыр╕гр╕░р╣Ар╕ар╕Чр╕Др╕│р╕Цр╕▓р╕б
        if any(word in question_lower for word in ['р╕Ир╕│р╕Щр╕зр╕Щ', 'р╕ер╕╣р╕Бр╕Др╣Йр╕▓', 'count', 'customer']):
            return self.sample_business_queries['customer_analysis']
        
        elif any(word in question_lower for word in ['р╕Ыр╕гр╕░р╕зр╕▒р╕Хр╕┤', 'р╕вр╣Йр╕нр╕Щр╕лр╕ер╕▒р╕З', 'history']):
            return self.sample_business_queries['customer_history']
        
        elif any(word in question_lower for word in ['р╣Бр╕Ьр╕Щр╕Зр╕▓р╕Щ', 'р╕зр╕▒р╕Щр╕Чр╕╡р╣И', 'schedule']):
            return self.sample_business_queries['work_schedule']
        
        elif any(word in question_lower for word in ['р╕гр╕▓р╕Др╕▓', 'р╕нр╕░р╣Др╕лр╕ер╣И', 'price', 'spare']):
            return self.sample_business_queries['spare_parts_pricing']
        
        return None
    
    def format_response(self, question: str, results: List[Dict], metadata: Dict) -> str:
        """ЁЯОи Format response р╕кр╕│р╕лр╕гр╕▒р╕Ър╕Шр╕╕р╕гр╕Бр╕┤р╕И HVAC"""
        
        if not results:
            return f"р╣Др╕бр╣Ир╕Юр╕Ър╕Вр╣Йр╕нр╕бр╕╣р╕ер╕Чр╕╡р╣Ир╕Хр╕гр╕Зр╕Бр╕▒р╕Ър╕Др╕│р╕Цр╕▓р╕б: {question}"
        
        response = f"ЁЯУК р╕Ьр╕ер╕Бр╕▓р╕гр╕Др╣Йр╕Щр╕лр╕▓р╕гр╕░р╕Ър╕Ъ HVAC Service - {self.company_name}\n\n"
        
        # р╕Ир╕▒р╕Фр╕гр╕╣р╕Ыр╣Бр╕Ър╕Ър╕Хр╕▓р╕бр╕Ыр╕гр╕░р╣Ар╕ар╕Чр╕Вр╣Йр╕нр╕бр╕╣р╕е
        question_lower = question.lower()
        
        if any(word in question_lower for word in ['р╕ер╕╣р╕Бр╕Др╣Йр╕▓', 'customer']):
            response += self._format_customer_results(results)
        elif any(word in question_lower for word in ['р╕нр╕░р╣Др╕лр╕ер╣И', 'spare', 'р╕гр╕▓р╕Др╕▓']):
            response += self._format_spare_parts_results(results)
        elif any(word in question_lower for word in ['р╕Зр╕▓р╕Щ', 'р╣Бр╕Ьр╕Щ', 'work']):
            response += self._format_work_results(results)
        else:
            response += self._format_general_results(results)
        
        response += f"\n\nЁЯУИ р╕кр╕гр╕╕р╕Ы: р╕Юр╕Ър╕Вр╣Йр╕нр╕бр╕╣р╕е {len(results)} р╕гр╕▓р╕вр╕Бр╕▓р╕г"
        
        if metadata.get('tenant_id'):
            response += f" | р╕Рр╕▓р╕Щр╕Вр╣Йр╕нр╕бр╕╣р╕е: {metadata['tenant_id']}"
        
        return response
    
    def _format_customer_results(self, results: List[Dict]) -> str:
        """р╕Ир╕▒р╕Фр╕гр╕╣р╕Ыр╣Бр╕Ър╕Ър╕Ьр╕ер╕ер╕▒р╕Юр╕Шр╣Мр╕Вр╣Йр╕нр╕бр╕╣р╕ер╕ер╕╣р╕Бр╕Др╣Йр╕▓"""
        formatted = "ЁЯСе р╕Вр╣Йр╕нр╕бр╕╣р╕ер╕ер╕╣р╕Бр╕Др╣Йр╕▓:\n"
        for i, row in enumerate(results[:10], 1):
            customer = row.get('customer_name', row.get('customer', 'р╣Др╕бр╣Ир╕гр╕░р╕Ър╕╕'))
            value = row.get('service_contact_', row.get('value', 0))
            job = row.get('job_no', row.get('detail', ''))
            
            formatted += f"{i}. {customer}\n"
            if job:
                formatted += f"   р╕Зр╕▓р╕Щ: {job}\n"
            if value and str(value).isdigit():
                formatted += f"   р╕бр╕╣р╕ер╕Др╣Ир╕▓: {int(value):,} р╕Ър╕▓р╕Ч\n"
            formatted += "\n"
        return formatted
    
    def _format_spare_parts_results(self, results: List[Dict]) -> str:
        """р╕Ир╕▒р╕Фр╕гр╕╣р╕Ыр╣Бр╕Ър╕Ър╕Ьр╕ер╕ер╕▒р╕Юр╕Шр╣Мр╕нр╕░р╣Др╕лр╕ер╣И"""
        formatted = "ЁЯФз р╕гр╕▓р╕вр╕Бр╕▓р╕гр╕нр╕░р╣Др╕лр╕ер╣И:\n"
        for i, row in enumerate(results[:10], 1):
            code = row.get('product_code', '')
            name = row.get('product_name', '')
            price = row.get('unit_price', '0')
            balance = row.get('balance', 0)
            
            formatted += f"{i}. {code} - {name}\n"
            if price and price != '0':
                formatted += f"   р╕гр╕▓р╕Др╕▓: {price} р╕Ър╕▓р╕Ч"
                if balance:
                    formatted += f" | р╕Др╕Зр╣Ар╕лр╕ер╕╖р╕н: {balance} р╕Кр╕┤р╣Йр╕Щ"
                formatted += "\n"
            formatted += "\n"
        return formatted
    
    def _format_work_results(self, results: List[Dict]) -> str:
        """р╕Ир╕▒р╕Фр╕гр╕╣р╕Ыр╣Бр╕Ър╕Ър╕Ьр╕ер╕ер╕▒р╕Юр╕Шр╣Мр╕Зр╕▓р╕Щ"""
        formatted = "ЁЯУЛ р╕гр╕▓р╕вр╕Бр╕▓р╕гр╕Зр╕▓р╕Щ:\n"
        for i, row in enumerate(results[:10], 1):
            customer = row.get('customer', row.get('customer_name', ''))
            detail = row.get('detail', row.get('description', ''))
            team = row.get('service_group', '')
            date = row.get('date', '')
            
            formatted += f"{i}. {customer}\n"
            if detail:
                formatted += f"   р╕Зр╕▓р╕Щ: {detail}\n"
            if team:
                formatted += f"   р╕Чр╕╡р╕б: {team}\n"
            if date:
                formatted += f"   р╕зр╕▒р╕Щр╕Чр╕╡р╣И: {date}\n"
            formatted += "\n"
        return formatted
    
    def _format_general_results(self, results: List[Dict]) -> str:
        """р╕Ир╕▒р╕Фр╕гр╕╣р╕Ыр╣Бр╕Ър╕Ър╕Ьр╕ер╕ер╕▒р╕Юр╕Шр╣Мр╕Чр╕▒р╣Ир╕зр╣Др╕Ы"""
        formatted = "ЁЯУК р╕Ьр╕ер╕ер╕▒р╕Юр╕Шр╣М:\n"
        for i, row in enumerate(results[:10], 1):
            formatted += f"{i}. "
            formatted += " | ".join([f"{k}: {v}" for k, v in row.items() if v is not None])
            formatted += "\n"
        return formatted
    
    # Helper methods р╕кр╕│р╕лр╕гр╕▒р╕Ър╕Бр╕▓р╕гр╕Хр╕нр╕Ър╕кр╕Щр╕нр╕Зр╣Бр╕Хр╣Ир╕ер╕░р╕Ыр╕гр╕░р╣Ар╕ар╕Ч
    def _create_hvac_greeting_response(self) -> Dict[str, Any]:
        return {
            'success': True,
            'answer': f"""р╕кр╕зр╕▒р╕кр╕Фр╕╡р╕Др╕гр╕▒р╕Ъ! р╕Ьр╕бр╕Др╕╖р╕н AI Assistant р╕кр╕│р╕лр╕гр╕▒р╕Ър╕гр╕░р╕Ър╕Ъ HVAC Service & Spare Parts р╕Вр╕нр╕З {self.company_name}

ЁЯФз р╕Ьр╕бр╕кр╕▓р╕бр╕▓р╕гр╕Цр╕Кр╣Ир╕зр╕вр╕Др╕╕р╕У:
тАв р╕Др╣Йр╕Щр╕лр╕▓р╕Вр╣Йр╕нр╕бр╕╣р╕ер╕ер╕╣р╕Бр╕Др╣Йр╕▓р╣Бр╕ер╕░р╕Ыр╕гр╕░р╕зр╕▒р╕Хр╕┤р╕Бр╕▓р╕гр╕Ър╕гр╕┤р╕Бр╕▓р╕г
тАв р╕кр╕╖р╕Ър╕Др╣Йр╕Щр╕гр╕▓р╕Др╕▓р╣Бр╕ер╕░р╕кр╕Хр╣Зр╕нр╕Бр╕нр╕░р╣Др╕лр╕ер╣И
тАв р╕Фр╕╣р╣Бр╕Ьр╕Щр╕Зр╕▓р╕Щр╣Бр╕ер╕░р╕Бр╕▓р╕гр╕Ир╕▒р╕Фр╕Чр╕╡р╕б
тАв р╕зр╕┤р╣Ар╕Др╕гр╕▓р╕░р╕лр╣Мр╕вр╕нр╕Фр╕Вр╕▓р╕вр╣Бр╕ер╕░р╕гр╕▓р╕вр╕Зр╕▓р╕Щ

ЁЯТб р╕Хр╕▒р╕зр╕нр╕вр╣Ир╕▓р╕Зр╕Др╕│р╕Цр╕▓р╕б:
- "р╕Ир╕│р╕Щр╕зр╕Щр╕ер╕╣р╕Бр╕Др╣Йр╕▓р╕Чр╕▒р╣Йр╕Зр╕лр╕бр╕Ф"
- "р╕гр╕▓р╕Др╕▓р╕нр╕░р╣Др╕лр╕ер╣И Hitachi chiller"
- "р╣Бр╕Ьр╕Щр╕Зр╕▓р╕Щр╕зр╕▒р╕Щр╕Чр╕╡р╣И 15/06/2568"
- "р╕вр╕нр╕Фр╕Вр╕▓р╕в overhaul р╕Ыр╕╡ 2567"

р╕Др╕╕р╕Ур╕Хр╣Йр╕нр╕Зр╕Бр╕▓р╕гр╕кр╕нр╕Ър╕Цр╕▓р╕бр╕нр╕░р╣Др╕гр╕Др╕гр╕▒р╕Ъ?""",
            'tenant_id': self.company_id,
            'data_source_used': 'hvac_greeting'
        }
    
    def _create_customer_response(self, question: str) -> Dict[str, Any]:
        return {
            'success': True,
            'answer': f"р╕Бр╕│р╕ер╕▒р╕Зр╕Др╣Йр╕Щр╕лр╕▓р╕Вр╣Йр╕нр╕бр╕╣р╕ер╕ер╕╣р╕Бр╕Др╣Йр╕▓р╕Хр╕▓р╕бр╕Др╕│р╕Цр╕▓р╕б: {question}\nр╕Бр╕гр╕╕р╕Ур╕▓р╕гр╕нр╕кр╕▒р╕Бр╕Др╕гр╕╣р╣И...",
            'tenant_id': self.company_id,
            'data_source_used': 'hvac_customer_query',
            'needs_sql_execution': True
        }
    
    def _create_spare_parts_response(self, question: str) -> Dict[str, Any]:
        return {
            'success': True,
            'answer': f"р╕Бр╕│р╕ер╕▒р╕Зр╕Др╣Йр╕Щр╕лр╕▓р╕Вр╣Йр╕нр╕бр╕╣р╕ер╕нр╕░р╣Др╕лр╕ер╣Ир╕Хр╕▓р╕бр╕Др╕│р╕Цр╕▓р╕б: {question}\nр╕Бр╕гр╕╕р╕Ур╕▓р╕гр╕нр╕кр╕▒р╕Бр╕Др╕гр╕╣р╣И...",
            'tenant_id': self.company_id,
            'data_source_used': 'hvac_spare_parts_query',
            'needs_sql_execution': True
        }
    
    def _create_service_response(self, question: str) -> Dict[str, Any]:
        return {
            'success': True,
            'answer': f"р╕Бр╕│р╕ер╕▒р╕Зр╕Др╣Йр╕Щр╕лр╕▓р╕Вр╣Йр╕нр╕бр╕╣р╕ер╕Ър╕гр╕┤р╕Бр╕▓р╕гр╕Хр╕▓р╕бр╕Др╕│р╕Цр╕▓р╕б: {question}\nр╕Бр╕гр╕╕р╕Ур╕▓р╕гр╕нр╕кр╕▒р╕Бр╕Др╕гр╕╣р╣И...",
            'tenant_id': self.company_id,
            'data_source_used': 'hvac_service_query', 
            'needs_sql_execution': True
        }
    
    def _create_work_schedule_response(self, question: str) -> Dict[str, Any]:
        return {
            'success': True,
            'answer': f"р╕Бр╕│р╕ер╕▒р╕Зр╕Др╣Йр╕Щр╕лр╕▓р╣Бр╕Ьр╕Щр╕Зр╕▓р╕Щр╕Хр╕▓р╕бр╕Др╕│р╕Цр╕▓р╕б: {question}\nр╕Бр╕гр╕╕р╕Ур╕▓р╕гр╕нр╕кр╕▒р╕Бр╕Др╕гр╕╣р╣И...",
            'tenant_id': self.company_id,
            'data_source_used': 'hvac_work_schedule_query',
            'needs_sql_execution': True
        }
    
    def _create_general_hvac_response(self, question: str) -> Dict[str, Any]:
        return {
            'success': True,
            'answer': f"р╕Бр╕│р╕ер╕▒р╕Зр╕Ыр╕гр╕░р╕бр╕зр╕ер╕Ьр╕ер╕Др╕│р╕Цр╕▓р╕бр╕кр╕│р╕лр╕гр╕▒р╕Ър╕гр╕░р╕Ър╕Ъ HVAC: {question}\nр╕Бр╕гр╕╕р╕Ур╕▓р╕гр╕нр╕кр╕▒р╕Бр╕Др╕гр╕╣р╣И...",
            'tenant_id': self.company_id,
            'data_source_used': 'hvac_general_query',
            'needs_sql_execution': True
        }