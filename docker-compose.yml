# ============================================================================
# PRODUCTION DOCKER-COMPOSE.YML - Without Local Data Folder
# ============================================================================

version: '3.8'

services:
  # Database services remain the same...
  postgres-company-a:
    image: postgres:15
    container_name: postgres-company-a
    environment:
      POSTGRES_DB: siamtech_company_a
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-password123}
    ports:
      - "5432:5432"
    volumes:
      # ✅ PRODUCTION: Use named volumes (Docker manages location)
      - postgres_company_a_data:/var/lib/postgresql/data
      - ./init-company-a.sql:/docker-entrypoint-initdb.d/01-init.sql:ro
    networks:
      - siamtech_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d siamtech_company_a"]
      interval: 30s
      timeout: 10s
      retries: 5

  postgres-company-b:
    image: postgres:15
    container_name: postgres-company-b
    environment:
      POSTGRES_DB: siamtech_company_b
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-password123}
    ports:
      - "5433:5432"
    volumes:
      # ✅ PRODUCTION: Named volume
      - postgres_company_b_data:/var/lib/postgresql/data
      - ./init-company-b.sql:/docker-entrypoint-initdb.d/02-init.sql:ro
    networks:
      - siamtech_network
    restart: unless-stopped

  postgres-company-c:
    image: postgres:15
    container_name: postgres-company-c
    environment:
      POSTGRES_DB: siamtech_company_c
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-password123}
    ports:
      - "5434:5432"
    volumes:
      # ✅ PRODUCTION: Named volume
      - postgres_company_c_data:/var/lib/postgresql/data
      - ./init-company-c.sql:/docker-entrypoint-initdb.d/03-init.sql:ro
    networks:
      - siamtech_network
    restart: unless-stopped

  # Redis
  redis:
    image: redis:7-alpine
    container_name: siamtech-redis
    ports:
      - "6379:6379"
    volumes:
      # ✅ PRODUCTION: Named volume
      - redis_data:/data
    networks:
      - siamtech_network
    restart: unless-stopped
    command: redis-server --appendonly yes

  # RAG Service
  rag-service:
    build:
      context: .
      dockerfile: Dockerfile.rag
    container_name: siamtech-rag-service
    ports:
      - "5000:5000"
    environment:
      # Environment variables from .env file
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID:-dummy_test_key}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY:-dummy_test_secret}
      - KNOWLEDGE_BASE_ID=${KNOWLEDGE_BASE_ID:-dummy_kb_id}
      
      # Database configs
      - POSTGRES_HOST_COMPANY_A=postgres-company-a
      - POSTGRES_PASSWORD_COMPANY_A=${POSTGRES_PASSWORD:-password123}
      # ... other configs
    networks:
      - siamtech_network
    depends_on:
      - postgres-company-a
      - postgres-company-b
      - postgres-company-c
      - redis
    restart: unless-stopped

  # WebUI Services with named volumes
  open-webui-company-a:
    image: ghcr.io/open-webui/open-webui:main
    container_name: siamtech-webui-company-a
    ports:
      - "3000:8080"
    environment:
      - OPENAI_API_BASE_URL=http://openwebui-proxy-company-a:8001/v1
      - OPENAI_API_KEY=sk-company-a
      - WEBUI_NAME=SiamTech Bangkok HQ
    volumes:
      # ✅ PRODUCTION: Named volume (Docker manages)
      - open_webui_company_a_data:/app/backend/data
    networks:
      - siamtech_network
    restart: unless-stopped

  open-webui-company-b:
    image: ghcr.io/open-webui/open-webui:main
    container_name: siamtech-webui-company-b
    ports:
      - "3100:8080"
    environment:
      - OPENAI_API_BASE_URL=http://openwebui-proxy-company-b:8001/v1
      - OPENAI_API_KEY=sk-company-b
      - WEBUI_NAME=SiamTech Chiang Mai
    volumes:
      # ✅ PRODUCTION: Named volume
      - open_webui_company_b_data:/app/backend/data
    networks:
      - siamtech_network
    restart: unless-stopped

  open-webui-company-c:
    image: ghcr.io/open-webui/open-webui:main
    container_name: siamtech-webui-company-c
    ports:
      - "3200:8080"
    environment:
      - OPENAI_API_BASE_URL=http://openwebui-proxy-company-c:8001/v1
      - OPENAI_API_KEY=sk-company-c
      - WEBUI_NAME=SiamTech International
    volumes:
      # ✅ PRODUCTION: Named volume
      - open_webui_company_c_data:/app/backend/data
    networks:
      - siamtech_network
    restart: unless-stopped

  # n8n
  n8n:
    image: n8nio/n8n:latest
    container_name: siamtech-n8n
    ports:
      - "5678:5678"
    environment:
      - N8N_BASIC_AUTH_ACTIVE=true
      - N8N_BASIC_AUTH_USER=${N8N_USER:-admin}
      - N8N_BASIC_AUTH_PASSWORD=${N8N_PASSWORD:-password}
      # ... other environment variables
    volumes:
      # ✅ PRODUCTION: Named volume
      - n8n_data:/home/node/.n8n
    networks:
      - siamtech_network
    restart: unless-stopped

# ============================================================================
# PRODUCTION VOLUMES - Docker Managed (No local folders)
# ============================================================================
volumes:
  # ✅ PRODUCTION: Named volumes (Docker manages location)
  postgres_company_a_data:
    driver: local
    # NO driver_opts = Docker manages location automatically
    
  postgres_company_b_data:
    driver: local
    
  postgres_company_c_data:
    driver: local
    
  open_webui_company_a_data:
    driver: local
    
  open_webui_company_b_data:
    driver: local
    
  open_webui_company_c_data:
    driver: local
    
  redis_data:
    driver: local
    
  n8n_data:
    driver: local

# ============================================================================
# PRODUCTION NETWORKS
# ============================================================================
networks:
  siamtech_network:
    driver: bridge
    # Simple bridge network for production

# ============================================================================
# PRODUCTION BENEFITS:
# ============================================================================

# ✅ ADVANTAGES:
# 1. No local folder clutter
# 2. Docker manages volume location optimally
# 3. Better security (volumes isolated)
# 4. Cross-platform compatibility
# 5. Easy to backup: docker volume backup commands
# 6. No permission issues
# 7. Better performance (Docker optimized locations)

# ✅ DOCKER VOLUME COMMANDS FOR PRODUCTION:
# docker volume ls                              # List all volumes
# docker volume inspect postgres_company_a_data # Inspect volume details
# docker volume backup postgres_company_a_data  # Backup volume
# docker system df                              # Check disk usage

# ✅ BACKUP STRATEGY:
# docker exec postgres-company-a pg_dump -U postgres siamtech_company_a > backup-company-a.sql
# docker run --rm -v postgres_company_a_data:/data -v $(pwd):/backup ubuntu tar czf /backup/backup.tar.gz /data